{"version":3,"file":"static/js/1760.368eb6f2.chunk.js","mappings":"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","sources":["webpack://app/./src/containers/CheckoutPage/ShippingDetails/ShippingDetails.module.css?c432","containers/CheckoutPage/ShippingDetails/ShippingDetails.js","webpack://app/./src/containers/CheckoutPage/StripePaymentForm/StripePaymentForm.module.css?7e16","containers/CheckoutPage/StripePaymentForm/StripePaymentForm.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ShippingDetails_root__YJSTk\",\"heading\":\"ShippingDetails_heading__Y2aKv p\",\"formRow\":\"ShippingDetails_formRow__2bxpH\",\"field\":\"ShippingDetails_field__qPTQ+\",\"fieldFullWidth\":\"ShippingDetails_fieldFullWidth__BWtHK\"};","import React from 'react';\r\nimport { bool, object, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage, intlShape } from '../../../util/reactIntl';\r\nimport * as validators from '../../../util/validators';\r\nimport getCountryCodes from '../../../translations/countryCodes';\r\n\r\nimport { FieldSelect, FieldTextInput, Heading } from '../../../components';\r\n\r\nimport css from './ShippingDetails.module.css';\r\n\r\nconst ShippingDetails = props => {\r\n  const { rootClassName, className, locale, intl, disabled, formApi, fieldId } = props;\r\n  const classes = classNames(rootClassName || css.root, className);\r\n\r\n  const optionalText = intl.formatMessage({\r\n    id: 'ShippingDetails.optionalText',\r\n  });\r\n\r\n  // Use the language set in config.localization.locale to get the correct translations of the country names\r\n  const countryCodes = getCountryCodes(locale);\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <Heading as=\"h3\" rootClassName={css.heading}>\r\n        <FormattedMessage id=\"ShippingDetails.title\" />\r\n      </Heading>\r\n      <FieldTextInput\r\n        id={`${fieldId}.recipientName`}\r\n        name=\"recipientName\"\r\n        disabled={disabled}\r\n        className={css.fieldFullWidth}\r\n        type=\"text\"\r\n        autoComplete=\"shipping name\"\r\n        label={intl.formatMessage({ id: 'ShippingDetails.recipientNameLabel' })}\r\n        placeholder={intl.formatMessage({\r\n          id: 'ShippingDetails.recipientNamePlaceholder',\r\n        })}\r\n        validate={validators.required(\r\n          intl.formatMessage({ id: 'ShippingDetails.recipientNameRequired' })\r\n        )}\r\n        onUnmount={() => formApi.change('recipientName', undefined)}\r\n      />\r\n      <FieldTextInput\r\n        id={`${fieldId}.recipientPhoneNumber`}\r\n        name=\"recipientPhoneNumber\"\r\n        disabled={disabled}\r\n        className={css.fieldFullWidth}\r\n        type=\"text\"\r\n        autoComplete=\"shipping phoneNumber\"\r\n        label={intl.formatMessage(\r\n          { id: 'ShippingDetails.recipientPhoneNumberLabel' },\r\n          { optionalText: optionalText }\r\n        )}\r\n        placeholder={intl.formatMessage({\r\n          id: 'ShippingDetails.recipientPhoneNumberPlaceholder',\r\n        })}\r\n        onUnmount={() => formApi.change('recipientPhoneNumber', undefined)}\r\n      />\r\n      <div className={css.formRow}>\r\n        <FieldTextInput\r\n          id={`${fieldId}.recipientAddressLine1`}\r\n          name=\"recipientAddressLine1\"\r\n          disabled={disabled}\r\n          className={css.field}\r\n          type=\"text\"\r\n          autoComplete=\"shipping address-line1\"\r\n          label={intl.formatMessage({ id: 'ShippingDetails.addressLine1Label' })}\r\n          placeholder={intl.formatMessage({\r\n            id: 'ShippingDetails.addressLine1Placeholder',\r\n          })}\r\n          validate={validators.required(\r\n            intl.formatMessage({ id: 'ShippingDetails.addressLine1Required' })\r\n          )}\r\n          onUnmount={() => formApi.change('recipientAddressLine1', undefined)}\r\n        />\r\n\r\n        <FieldTextInput\r\n          id={`${fieldId}.recipientAddressLine2`}\r\n          name=\"recipientAddressLine2\"\r\n          disabled={disabled}\r\n          className={css.field}\r\n          type=\"text\"\r\n          autoComplete=\"shipping address-line2\"\r\n          label={intl.formatMessage(\r\n            { id: 'ShippingDetails.addressLine2Label' },\r\n            { optionalText: optionalText }\r\n          )}\r\n          placeholder={intl.formatMessage({\r\n            id: 'ShippingDetails.addressLine2Placeholder',\r\n          })}\r\n          onUnmount={() => formApi.change('recipientAddressLine2', undefined)}\r\n        />\r\n      </div>\r\n      <div className={css.formRow}>\r\n        <FieldTextInput\r\n          id={`${fieldId}.recipientPostalCode`}\r\n          name=\"recipientPostal\"\r\n          disabled={disabled}\r\n          className={css.field}\r\n          type=\"text\"\r\n          autoComplete=\"shipping postal-code\"\r\n          label={intl.formatMessage({ id: 'ShippingDetails.postalCodeLabel' })}\r\n          placeholder={intl.formatMessage({\r\n            id: 'ShippingDetails.postalCodePlaceholder',\r\n          })}\r\n          validate={validators.required(\r\n            intl.formatMessage({ id: 'ShippingDetails.postalCodeRequired' })\r\n          )}\r\n          onUnmount={() => formApi.change('recipientPostal', undefined)}\r\n        />\r\n\r\n        <FieldTextInput\r\n          id={`${fieldId}.recipientCity`}\r\n          name=\"recipientCity\"\r\n          disabled={disabled}\r\n          className={css.field}\r\n          type=\"text\"\r\n          autoComplete=\"shipping address-level2\"\r\n          label={intl.formatMessage({ id: 'ShippingDetails.cityLabel' })}\r\n          placeholder={intl.formatMessage({ id: 'ShippingDetails.cityPlaceholder' })}\r\n          validate={validators.required(intl.formatMessage({ id: 'ShippingDetails.cityRequired' }))}\r\n          onUnmount={() => formApi.change('recipientCity', undefined)}\r\n        />\r\n      </div>\r\n      <div className={css.formRow}>\r\n        <FieldTextInput\r\n          id={`${fieldId}.recipientState`}\r\n          name=\"recipientState\"\r\n          disabled={disabled}\r\n          className={css.field}\r\n          type=\"text\"\r\n          autoComplete=\"shipping address-level1\"\r\n          label={intl.formatMessage(\r\n            { id: 'ShippingDetails.stateLabel' },\r\n            { optionalText: optionalText }\r\n          )}\r\n          placeholder={intl.formatMessage({ id: 'ShippingDetails.statePlaceholder' })}\r\n          onUnmount={() => formApi.change('recipientState', undefined)}\r\n        />\r\n\r\n        <FieldSelect\r\n          id={`${fieldId}.recipientCountry`}\r\n          name=\"recipientCountry\"\r\n          disabled={disabled}\r\n          className={css.field}\r\n          label={intl.formatMessage({ id: 'ShippingDetails.countryLabel' })}\r\n          validate={validators.required(\r\n            intl.formatMessage({ id: 'ShippingDetails.countryRequired' })\r\n          )}\r\n        >\r\n          <option disabled value=\"\">\r\n            {intl.formatMessage({ id: 'ShippingDetails.countryPlaceholder' })}\r\n          </option>\r\n          {countryCodes.map(country => {\r\n            return (\r\n              <option key={country.code} value={country.code}>\r\n                {country.name}\r\n              </option>\r\n            );\r\n          })}\r\n        </FieldSelect>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nShippingDetails.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  disabled: false,\r\n  fieldId: null,\r\n};\r\n\r\nShippingDetails.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  disabled: bool,\r\n  formApi: object.isRequired,\r\n  fieldId: string,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nexport default ShippingDetails;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"StripePaymentForm_root__hbiuC\",\"locationWrapper\":\"StripePaymentForm_locationWrapper__2KG8C\",\"heading\":\"StripePaymentForm_heading__p2zD8 p\",\"locationDetails\":\"StripePaymentForm_locationDetails__UB4YX\",\"card\":\"StripePaymentForm_card__vw7yG marketplaceInputStyles\",\"cardError\":\"StripePaymentForm_cardError__0Oi2a\",\"error\":\"StripePaymentForm_error__LIO0Z\",\"errorMessage\":\"StripePaymentForm_errorMessage__UtRNh\",\"paymentMethodSelector\":\"StripePaymentForm_paymentMethodSelector__ylBMy\",\"saveForLaterUse\":\"StripePaymentForm_saveForLaterUse__MzO+Z\",\"saveForLaterUseCheckbox\":\"StripePaymentForm_saveForLaterUseCheckbox__nIbci\",\"saveForLaterUseLabel\":\"StripePaymentForm_saveForLaterUseLabel__HVqvK h5\",\"saveForLaterUseLegalInfo\":\"StripePaymentForm_saveForLaterUseLegalInfo__LLu7- h5\",\"billingDetails\":\"StripePaymentForm_billingDetails__oCkv9\",\"sameAddressCheckbox\":\"StripePaymentForm_sameAddressCheckbox__LnjYi\",\"messageLabel\":\"StripePaymentForm_messageLabel__2WvIC\",\"messageOptional\":\"StripePaymentForm_messageOptional__ESxce\",\"message\":\"StripePaymentForm_message__2HH+h\",\"submitContainer\":\"StripePaymentForm_submitContainer__+n637\",\"paymentInfo\":\"StripePaymentForm_paymentInfo__CFlG6 h5\",\"submitButton\":\"StripePaymentForm_submitButton__6ayQi\",\"missingStripeKey\":\"StripePaymentForm_missingStripeKey__PSMlx\"};","/**\r\n * Note: This form is using card from Stripe Elements https://stripe.com/docs/stripe-js#elements\r\n * Card is not a Final Form field so it's not available trough Final Form.\r\n * It's also handled separately in handleSubmit function.\r\n */\r\nimport React, { Component } from 'react';\r\nimport { bool, func, object, shape, string } from 'prop-types';\r\nimport { Form as FinalForm } from 'react-final-form';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport { propTypes } from '../../../util/types';\r\nimport { ensurePaymentMethodCard } from '../../../util/data';\r\n\r\nimport {\r\n  Heading,\r\n  Form,\r\n  PrimaryButton,\r\n  FieldCheckbox,\r\n  FieldTextInput,\r\n  IconSpinner,\r\n  SavedCardDetails,\r\n  StripePaymentAddress,\r\n} from '../../../components';\r\n\r\nimport ShippingDetails from '../ShippingDetails/ShippingDetails';\r\n\r\nimport css from './StripePaymentForm.module.css';\r\n\r\n/**\r\n * Translate a Stripe API error object.\r\n *\r\n * To keep up with possible keys from the Stripe API, see:\r\n *\r\n * https://stripe.com/docs/api#errors\r\n *\r\n * Note that at least at moment, the above link doesn't list all the\r\n * error codes that the API returns.\r\n *\r\n * @param {Object} intl - react-intl object from injectIntl\r\n * @param {Object} stripeError - error object from Stripe API\r\n *\r\n * @return {String} translation message for the specific Stripe error,\r\n * or the given error message (not translated) if the specific error\r\n * type/code is not defined in the translations\r\n *\r\n */\r\nconst stripeErrorTranslation = (intl, stripeError) => {\r\n  const { message, code, type } = stripeError;\r\n\r\n  if (!code || !type) {\r\n    // Not a proper Stripe error object\r\n    return intl.formatMessage({ id: 'StripePaymentForm.genericError' });\r\n  }\r\n\r\n  const translationId =\r\n    type === 'validation_error'\r\n      ? `StripePaymentForm.stripe.validation_error.${code}`\r\n      : `StripePaymentForm.stripe.${type}`;\r\n\r\n  return intl.formatMessage({\r\n    id: translationId,\r\n    defaultMessage: message,\r\n  });\r\n};\r\n\r\nconst stripeElementsOptions = {\r\n  fonts: [\r\n    {\r\n      cssSrc: 'https://fonts.googleapis.com/css?family=Inter',\r\n    },\r\n  ],\r\n};\r\n\r\n// card (being a Stripe Elements component), can have own styling passed to it.\r\n// However, its internal width-calculation seems to break if font-size is too big\r\n// compared to component's own width.\r\nconst isMobile = typeof window !== 'undefined' && window.innerWidth < 768;\r\nconst cardStyles = {\r\n  base: {\r\n    fontFamily: '-apple-system, BlinkMacSystemFont, \"Inter\", Helvetica, Arial, sans-serif',\r\n    fontSize: isMobile ? '14px' : '16px',\r\n    fontSmoothing: 'antialiased',\r\n    lineHeight: '24px',\r\n    letterSpacing: '-0.1px',\r\n    color: '#4A4A4A',\r\n    '::placeholder': {\r\n      color: '#B2B2B2',\r\n    },\r\n  },\r\n};\r\n\r\nconst OneTimePaymentWithCardElement = props => {\r\n  const {\r\n    cardClasses,\r\n    formId,\r\n    handleStripeElementRef,\r\n    hasCardError,\r\n    error,\r\n    label,\r\n    intl,\r\n    marketplaceName,\r\n  } = props;\r\n  const labelText =\r\n    label || intl.formatMessage({ id: 'StripePaymentForm.saveAfterOnetimePayment' });\r\n  return (\r\n    <React.Fragment>\r\n      <label className={css.paymentLabel} htmlFor={`${formId}-card`}>\r\n        <FormattedMessage id=\"StripePaymentForm.paymentCardDetails\" />\r\n      </label>\r\n      <div className={cardClasses} id={`${formId}-card`} ref={handleStripeElementRef} />\r\n      {hasCardError ? <span className={css.error}>{error}</span> : null}\r\n      <div className={css.saveForLaterUse}>\r\n        <FieldCheckbox\r\n          className={css.saveForLaterUseCheckbox}\r\n          textClassName={css.saveForLaterUseLabel}\r\n          id=\"saveAfterOnetimePayment\"\r\n          name=\"saveAfterOnetimePayment\"\r\n          label={labelText}\r\n          value=\"saveAfterOnetimePayment\"\r\n          useSuccessColor\r\n        />\r\n        <span className={css.saveForLaterUseLegalInfo}>\r\n          <FormattedMessage\r\n            id=\"StripePaymentForm.saveforLaterUseLegalInfo\"\r\n            values={{ marketplaceName }}\r\n          />\r\n        </span>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst PaymentMethodSelector = props => {\r\n  const {\r\n    cardClasses,\r\n    formId,\r\n    changePaymentMethod,\r\n    defaultPaymentMethod,\r\n    handleStripeElementRef,\r\n    hasCardError,\r\n    error,\r\n    paymentMethod,\r\n    intl,\r\n    marketplaceName,\r\n  } = props;\r\n  const last4Digits = defaultPaymentMethod.attributes.card.last4Digits;\r\n  const labelText = intl.formatMessage(\r\n    { id: 'StripePaymentForm.replaceAfterOnetimePayment' },\r\n    { last4Digits }\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Heading as=\"h3\" rootClassName={css.heading}>\r\n        <FormattedMessage id=\"StripePaymentForm.payWithHeading\" />\r\n      </Heading>\r\n      <SavedCardDetails\r\n        className={css.paymentMethodSelector}\r\n        card={defaultPaymentMethod.attributes.card}\r\n        onChange={changePaymentMethod}\r\n      />\r\n      {paymentMethod === 'replaceCard' ? (\r\n        <OneTimePaymentWithCardElement\r\n          cardClasses={cardClasses}\r\n          formId={formId}\r\n          handleStripeElementRef={handleStripeElementRef}\r\n          hasCardError={hasCardError}\r\n          error={error}\r\n          label={labelText}\r\n          intl={intl}\r\n          marketplaceName={marketplaceName}\r\n        />\r\n      ) : null}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst getPaymentMethod = (selectedPaymentMethod, hasDefaultPaymentMethod) => {\r\n  return selectedPaymentMethod == null && hasDefaultPaymentMethod\r\n    ? 'defaultCard'\r\n    : selectedPaymentMethod == null\r\n    ? 'onetimeCardPayment'\r\n    : selectedPaymentMethod;\r\n};\r\n\r\n// Should we show onetime payment fields and does StripeElements card need attention\r\nconst checkOnetimePaymentFields = (\r\n  cardValueValid,\r\n  selectedPaymentMethod,\r\n  hasDefaultPaymentMethod,\r\n  hasHandledCardPayment\r\n) => {\r\n  const useDefaultPaymentMethod =\r\n    selectedPaymentMethod === 'defaultCard' && hasDefaultPaymentMethod;\r\n  // Billing details are known if we have already handled card payment or existing default payment method is used.\r\n  const billingDetailsKnown = hasHandledCardPayment || useDefaultPaymentMethod;\r\n\r\n  // If onetime payment is used, check that the StripeElements card has valid value.\r\n  const oneTimePaymentMethods = ['onetimeCardPayment', 'replaceCard'];\r\n  const useOnetimePaymentMethod = oneTimePaymentMethods.includes(selectedPaymentMethod);\r\n  const onetimePaymentNeedsAttention =\r\n    !billingDetailsKnown && !(useOnetimePaymentMethod && cardValueValid);\r\n\r\n  return {\r\n    onetimePaymentNeedsAttention,\r\n    showOnetimePaymentFields: useOnetimePaymentMethod,\r\n  };\r\n};\r\n\r\nconst LocationOrShippingDetails = props => {\r\n  const {\r\n    askShippingDetails,\r\n    showPickUplocation,\r\n    listingLocation,\r\n    formApi,\r\n    locale,\r\n    isBooking,\r\n    isFuzzyLocation,\r\n    intl,\r\n  } = props;\r\n\r\n  const locationDetails = listingLocation?.building\r\n    ? `${listingLocation.building}, ${listingLocation.address}`\r\n    : listingLocation?.address\r\n    ? listingLocation.address\r\n    : intl.formatMessage({ id: 'StripePaymentForm.locationUnknown' });\r\n\r\n  return askShippingDetails ? (\r\n    <ShippingDetails intl={intl} formApi={formApi} locale={locale} />\r\n  ) : !isBooking && showPickUplocation ? (\r\n    <div className={css.locationWrapper}>\r\n      <Heading as=\"h3\" rootClassName={css.heading}>\r\n        <FormattedMessage id=\"StripePaymentForm.pickupDetailsTitle\" />\r\n      </Heading>\r\n      <p className={css.locationDetails}>{locationDetails}</p>\r\n    </div>\r\n  ) : isBooking && !isFuzzyLocation ? (\r\n    <div className={css.locationWrapper}>\r\n      <Heading as=\"h3\" rootClassName={css.heading}>\r\n        <FormattedMessage id=\"StripePaymentForm.locationDetailsTitle\" />\r\n      </Heading>\r\n      <p className={css.locationDetails}>{locationDetails}</p>\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nconst initialState = {\r\n  error: null,\r\n  cardValueValid: false,\r\n  // The mode can be 'onetimePayment', 'defaultCard', or 'replaceCard'\r\n  // Check SavedCardDetails component for more information\r\n  paymentMethod: null,\r\n};\r\n\r\n/**\r\n * Payment form that asks for credit card info using Stripe Elements.\r\n *\r\n * When the card is valid and the user submits the form, a request is\r\n * sent to the Stripe API to handle payment. `stripe.confirmCardPayment`\r\n * may ask more details from cardholder if 3D security steps are needed.\r\n *\r\n * See: https://stripe.com/docs/payments/payment-intents\r\n *      https://stripe.com/docs/elements\r\n */\r\nclass StripePaymentForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = initialState;\r\n    this.updateBillingDetailsToMatchShippingAddress = this.updateBillingDetailsToMatchShippingAddress.bind(\r\n      this\r\n    );\r\n    this.handleCardValueChange = this.handleCardValueChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.paymentForm = this.paymentForm.bind(this);\r\n    this.initializeStripeElement = this.initializeStripeElement.bind(this);\r\n    this.handleStripeElementRef = this.handleStripeElementRef.bind(this);\r\n    this.changePaymentMethod = this.changePaymentMethod.bind(this);\r\n    this.finalFormAPI = null;\r\n    this.cardContainer = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!window.Stripe) {\r\n      throw new Error('Stripe must be loaded for StripePaymentForm');\r\n    }\r\n\r\n    const publishableKey = this.props.stripePublishableKey;\r\n    if (publishableKey) {\r\n      const {\r\n        onStripeInitialized,\r\n        hasHandledCardPayment,\r\n        defaultPaymentMethod,\r\n        loadingData,\r\n      } = this.props;\r\n      this.stripe = window.Stripe(publishableKey);\r\n      onStripeInitialized(this.stripe);\r\n\r\n      if (!(hasHandledCardPayment || defaultPaymentMethod || loadingData)) {\r\n        this.initializeStripeElement();\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.card) {\r\n      this.card.removeEventListener('change', this.handleCardValueChange);\r\n      this.card.unmount();\r\n      this.card = null;\r\n    }\r\n  }\r\n\r\n  initializeStripeElement(element) {\r\n    const elements = this.stripe.elements(stripeElementsOptions);\r\n\r\n    if (!this.card) {\r\n      this.card = elements.create('card', { style: cardStyles });\r\n      this.card.mount(element || this.cardContainer);\r\n      this.card.addEventListener('change', this.handleCardValueChange);\r\n      // EventListener is the only way to simulate breakpoints with Stripe.\r\n      window.addEventListener('resize', () => {\r\n        if (this.card) {\r\n          if (window.innerWidth < 768) {\r\n            this.card.update({ style: { base: { fontSize: '14px', lineHeight: '24px' } } });\r\n          } else {\r\n            this.card.update({ style: { base: { fontSize: '18px', lineHeight: '24px' } } });\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  updateBillingDetailsToMatchShippingAddress(shouldFill) {\r\n    const formApi = this.finalFormAPI;\r\n    const values = formApi.getState()?.values || {};\r\n    formApi.batch(() => {\r\n      formApi.change('name', shouldFill ? values.recipientName : '');\r\n      formApi.change('addressLine1', shouldFill ? values.recipientAddressLine1 : '');\r\n      formApi.change('addressLine2', shouldFill ? values.recipientAddressLine2 : '');\r\n      formApi.change('postal', shouldFill ? values.recipientPostal : '');\r\n      formApi.change('city', shouldFill ? values.recipientCity : '');\r\n      formApi.change('state', shouldFill ? values.recipientState : '');\r\n      formApi.change('country', shouldFill ? values.recipientCountry : '');\r\n    });\r\n  }\r\n\r\n  changePaymentMethod(changedTo) {\r\n    if (this.card && changedTo === 'defaultCard') {\r\n      this.card.removeEventListener('change', this.handleCardValueChange);\r\n      this.card.unmount();\r\n      this.card = null;\r\n      this.setState({ cardValueValid: false });\r\n    }\r\n    this.setState({ paymentMethod: changedTo });\r\n    if (changedTo === 'defaultCard' && this.finalFormAPI) {\r\n      this.finalFormAPI.change('sameAddressCheckbox', undefined);\r\n    } else if (changedTo === 'replaceCard' && this.finalFormAPI) {\r\n      this.finalFormAPI.change('sameAddressCheckbox', ['sameAddress']);\r\n      this.updateBillingDetailsToMatchShippingAddress(true);\r\n    }\r\n  }\r\n\r\n  handleStripeElementRef(el) {\r\n    this.cardContainer = el;\r\n    if (this.stripe && el) {\r\n      this.initializeStripeElement(el);\r\n    }\r\n  }\r\n\r\n  handleCardValueChange(event) {\r\n    const { intl } = this.props;\r\n    const { error, complete } = event;\r\n\r\n    const postalCode = event.value.postalCode;\r\n    if (this.finalFormAPI) {\r\n      this.finalFormAPI.change('postal', postalCode);\r\n    }\r\n\r\n    this.setState(prevState => {\r\n      return {\r\n        error: error ? stripeErrorTranslation(intl, error) : null,\r\n        cardValueValid: complete,\r\n      };\r\n    });\r\n  }\r\n  handleSubmit(values) {\r\n    const {\r\n      onSubmit,\r\n      inProgress,\r\n      formId,\r\n      hasHandledCardPayment,\r\n      defaultPaymentMethod,\r\n    } = this.props;\r\n    const { initialMessage } = values;\r\n    const { cardValueValid, paymentMethod } = this.state;\r\n    const hasDefaultPaymentMethod = defaultPaymentMethod?.id;\r\n    const selectedPaymentMethod = getPaymentMethod(paymentMethod, hasDefaultPaymentMethod);\r\n    const { onetimePaymentNeedsAttention } = checkOnetimePaymentFields(\r\n      cardValueValid,\r\n      selectedPaymentMethod,\r\n      hasDefaultPaymentMethod,\r\n      hasHandledCardPayment\r\n    );\r\n\r\n    if (inProgress || onetimePaymentNeedsAttention) {\r\n      // Already submitting or card value incomplete/invalid\r\n      return;\r\n    }\r\n\r\n    const params = {\r\n      message: initialMessage ? initialMessage.trim() : null,\r\n      card: this.card,\r\n      formId,\r\n      formValues: values,\r\n      paymentMethod: getPaymentMethod(\r\n        paymentMethod,\r\n        ensurePaymentMethodCard(defaultPaymentMethod).id\r\n      ),\r\n    };\r\n    onSubmit(params);\r\n  }\r\n\r\n  paymentForm(formRenderProps) {\r\n    const {\r\n      className,\r\n      rootClassName,\r\n      inProgress: submitInProgress,\r\n      loadingData,\r\n      formId,\r\n      paymentInfo,\r\n      authorDisplayName,\r\n      showInitialMessageInput,\r\n      intl,\r\n      initiateOrderError,\r\n      confirmCardPaymentError,\r\n      confirmPaymentError,\r\n      invalid,\r\n      handleSubmit,\r\n      form: formApi,\r\n      hasHandledCardPayment,\r\n      defaultPaymentMethod,\r\n      listingLocation,\r\n      askShippingDetails,\r\n      showPickUplocation,\r\n      totalPrice,\r\n      locale,\r\n      stripePublishableKey,\r\n      marketplaceName,\r\n      isBooking,\r\n      isFuzzyLocation,\r\n      values,\r\n    } = formRenderProps;\r\n\r\n    this.finalFormAPI = formApi;\r\n\r\n    const ensuredDefaultPaymentMethod = ensurePaymentMethodCard(defaultPaymentMethod);\r\n    const billingDetailsNeeded = !(hasHandledCardPayment || confirmPaymentError);\r\n\r\n    const { cardValueValid, paymentMethod } = this.state;\r\n    const hasDefaultPaymentMethod = ensuredDefaultPaymentMethod.id;\r\n    const selectedPaymentMethod = getPaymentMethod(paymentMethod, hasDefaultPaymentMethod);\r\n    const { onetimePaymentNeedsAttention, showOnetimePaymentFields } = checkOnetimePaymentFields(\r\n      cardValueValid,\r\n      selectedPaymentMethod,\r\n      hasDefaultPaymentMethod,\r\n      hasHandledCardPayment\r\n    );\r\n\r\n    const submitDisabled = invalid || onetimePaymentNeedsAttention || submitInProgress;\r\n    const hasCardError = this.state.error && !submitInProgress;\r\n    const hasPaymentErrors = confirmCardPaymentError || confirmPaymentError;\r\n    const classes = classNames(rootClassName || css.root, className);\r\n    const cardClasses = classNames(css.card, {\r\n      [css.cardSuccess]: this.state.cardValueValid,\r\n      [css.cardError]: hasCardError,\r\n    });\r\n\r\n    // Note: totalPrice might not be available initially\r\n    // when speculateTransaction call is in progress.\r\n    const totalPriceMaybe = totalPrice || '';\r\n\r\n    // TODO: confirmCardPayment can create all kinds of errors.\r\n    // Currently, we provide translation support for one:\r\n    // https://stripe.com/docs/error-codes\r\n    const piAuthenticationFailure = 'payment_intent_authentication_failure';\r\n    const paymentErrorMessage =\r\n      confirmCardPaymentError && confirmCardPaymentError.code === piAuthenticationFailure\r\n        ? intl.formatMessage({ id: 'StripePaymentForm.confirmCardPaymentError' })\r\n        : confirmCardPaymentError\r\n        ? confirmCardPaymentError.message\r\n        : confirmPaymentError\r\n        ? intl.formatMessage({ id: 'StripePaymentForm.confirmPaymentError' })\r\n        : intl.formatMessage({ id: 'StripePaymentForm.genericError' });\r\n\r\n    const billingDetailsNameLabel = intl.formatMessage({\r\n      id: 'StripePaymentForm.billingDetailsNameLabel',\r\n    });\r\n\r\n    const billingDetailsNamePlaceholder = intl.formatMessage({\r\n      id: 'StripePaymentForm.billingDetailsNamePlaceholder',\r\n    });\r\n\r\n    const messagePlaceholder = intl.formatMessage(\r\n      { id: 'StripePaymentForm.messagePlaceholder' },\r\n      { name: authorDisplayName }\r\n    );\r\n\r\n    const messageOptionalText = intl.formatMessage({\r\n      id: 'StripePaymentForm.messageOptionalText',\r\n    });\r\n\r\n    const initialMessageLabel = intl.formatMessage(\r\n      { id: 'StripePaymentForm.messageLabel' },\r\n      { messageOptionalText: messageOptionalText }\r\n    );\r\n\r\n    // Asking billing address is recommended in PaymentIntent flow.\r\n    // In CheckoutPage, we send name and email as billing details, but address only if it exists.\r\n    const billingAddress = (\r\n      <StripePaymentAddress\r\n        intl={intl}\r\n        form={formApi}\r\n        fieldId={formId}\r\n        card={this.card}\r\n        locale={locale}\r\n      />\r\n    );\r\n\r\n    const hasStripeKey = stripePublishableKey;\r\n\r\n    const handleSameAddressCheckbox = event => {\r\n      const checked = event.target.checked;\r\n      this.updateBillingDetailsToMatchShippingAddress(checked);\r\n    };\r\n    const isBookingYesNo = isBooking ? 'yes' : 'no';\r\n\r\n    return hasStripeKey ? (\r\n      <Form className={classes} onSubmit={handleSubmit} enforcePagePreloadFor=\"OrderDetailsPage\">\r\n        <LocationOrShippingDetails\r\n          askShippingDetails={askShippingDetails}\r\n          showPickUplocation={showPickUplocation}\r\n          listingLocation={listingLocation}\r\n          isBooking={isBooking}\r\n          isFuzzyLocation={isFuzzyLocation}\r\n          formApi={formApi}\r\n          locale={locale}\r\n          intl={intl}\r\n        />\r\n\r\n        {billingDetailsNeeded && !loadingData ? (\r\n          <React.Fragment>\r\n            {hasDefaultPaymentMethod ? (\r\n              <PaymentMethodSelector\r\n                cardClasses={cardClasses}\r\n                formId={formId}\r\n                defaultPaymentMethod={ensuredDefaultPaymentMethod}\r\n                changePaymentMethod={this.changePaymentMethod}\r\n                handleStripeElementRef={this.handleStripeElementRef}\r\n                hasCardError={hasCardError}\r\n                error={this.state.error}\r\n                paymentMethod={selectedPaymentMethod}\r\n                intl={intl}\r\n                marketplaceName={marketplaceName}\r\n              />\r\n            ) : (\r\n              <React.Fragment>\r\n                <Heading as=\"h3\" rootClassName={css.heading}>\r\n                  <FormattedMessage id=\"StripePaymentForm.paymentHeading\" />\r\n                </Heading>\r\n                <OneTimePaymentWithCardElement\r\n                  cardClasses={cardClasses}\r\n                  formId={formId}\r\n                  handleStripeElementRef={this.handleStripeElementRef}\r\n                  hasCardError={hasCardError}\r\n                  error={this.state.error}\r\n                  intl={intl}\r\n                  marketplaceName={marketplaceName}\r\n                />\r\n              </React.Fragment>\r\n            )}\r\n\r\n            {showOnetimePaymentFields ? (\r\n              <div className={css.billingDetails}>\r\n                <Heading as=\"h3\" rootClassName={css.heading}>\r\n                  <FormattedMessage id=\"StripePaymentForm.billingDetails\" />\r\n                </Heading>\r\n\r\n                {askShippingDetails ? (\r\n                  <FieldCheckbox\r\n                    className={css.sameAddressCheckbox}\r\n                    textClassName={css.sameAddressLabel}\r\n                    id=\"sameAddressCheckbox\"\r\n                    name=\"sameAddressCheckbox\"\r\n                    label={intl.formatMessage({\r\n                      id: 'StripePaymentForm.sameBillingAndShippingAddress',\r\n                    })}\r\n                    value=\"sameAddress\"\r\n                    useSuccessColor\r\n                    onChange={handleSameAddressCheckbox}\r\n                  />\r\n                ) : null}\r\n\r\n                <FieldTextInput\r\n                  className={css.field}\r\n                  type=\"text\"\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  autoComplete=\"cc-name\"\r\n                  label={billingDetailsNameLabel}\r\n                  placeholder={billingDetailsNamePlaceholder}\r\n                />\r\n\r\n                {billingAddress}\r\n              </div>\r\n            ) : null}\r\n          </React.Fragment>\r\n        ) : loadingData ? (\r\n          <p className={css.spinner}>\r\n            <IconSpinner />\r\n          </p>\r\n        ) : null}\r\n\r\n        {initiateOrderError ? (\r\n          <span className={css.errorMessage}>{initiateOrderError.message}</span>\r\n        ) : null}\r\n        {showInitialMessageInput ? (\r\n          <div>\r\n            <Heading as=\"h3\" rootClassName={css.heading}>\r\n              <FormattedMessage id=\"StripePaymentForm.messageHeading\" />\r\n            </Heading>\r\n\r\n            <FieldTextInput\r\n              type=\"textarea\"\r\n              id={`${formId}-message`}\r\n              name=\"initialMessage\"\r\n              label={initialMessageLabel}\r\n              placeholder={messagePlaceholder}\r\n              className={css.message}\r\n            />\r\n          </div>\r\n        ) : null}\r\n        <div className={css.submitContainer}>\r\n          {hasPaymentErrors ? (\r\n            <span className={css.errorMessage}>{paymentErrorMessage}</span>\r\n          ) : null}\r\n          <PrimaryButton\r\n            className={css.submitButton}\r\n            type=\"submit\"\r\n            inProgress={submitInProgress}\r\n            disabled={submitDisabled}\r\n          >\r\n            {billingDetailsNeeded ? (\r\n              <FormattedMessage\r\n                id=\"StripePaymentForm.submitPaymentInfo\"\r\n                values={{ totalPrice: totalPriceMaybe, isBooking: isBookingYesNo }}\r\n              />\r\n            ) : (\r\n              <FormattedMessage\r\n                id=\"StripePaymentForm.submitConfirmPaymentInfo\"\r\n                values={{ totalPrice: totalPriceMaybe, isBooking: isBookingYesNo }}\r\n              />\r\n            )}\r\n          </PrimaryButton>\r\n          <p className={css.paymentInfo}>\r\n            <FormattedMessage\r\n              id=\"StripePaymentForm.submitConfirmPaymentFinePrint\"\r\n              values={{ isBooking: isBookingYesNo, name: authorDisplayName }}\r\n            />\r\n          </p>\r\n        </div>\r\n      </Form>\r\n    ) : (\r\n      <div className={css.missingStripeKey}>\r\n        <FormattedMessage id=\"StripePaymentForm.missingStripeKey\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { onSubmit, ...rest } = this.props;\r\n    return <FinalForm onSubmit={this.handleSubmit} {...rest} render={this.paymentForm} />;\r\n  }\r\n}\r\n\r\nStripePaymentForm.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n  inProgress: false,\r\n  loadingData: false,\r\n  showInitialMessageInput: true,\r\n  hasHandledCardPayment: false,\r\n  defaultPaymentMethod: null,\r\n  initiateOrderError: null,\r\n  confirmCardPaymentError: null,\r\n  confirmPaymentError: null,\r\n  askShippingDetails: false,\r\n  showPickUplocation: false,\r\n  listingLocation: null,\r\n  totalPrice: null,\r\n  isFuzzyLocation: false,\r\n};\r\n\r\nStripePaymentForm.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n  inProgress: bool,\r\n  loadingData: bool,\r\n  initiateOrderError: object,\r\n  confirmCardPaymentError: object,\r\n  confirmPaymentError: object,\r\n  formId: string.isRequired,\r\n  onSubmit: func.isRequired,\r\n  authorDisplayName: string.isRequired,\r\n  showInitialMessageInput: bool,\r\n  hasHandledCardPayment: bool,\r\n  defaultPaymentMethod: propTypes.defaultPaymentMethod,\r\n  askShippingDetails: bool,\r\n  showPickUplocation: bool,\r\n  listingLocation: shape({\r\n    address: string.isRequired,\r\n    building: string,\r\n  }),\r\n  totalPrice: string,\r\n  locale: string.isRequired,\r\n  stripePublishableKey: string.isRequired,\r\n  marketplaceName: string.isRequired,\r\n  isBooking: bool.isRequired,\r\n  isFuzzyLocation: bool,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nexport default injectIntl(StripePaymentForm);\r\n"],"names":["ShippingDetails","props","rootClassName","className","locale","intl","disabled","formApi","fieldId","classes","classNames","css","optionalText","formatMessage","id","countryCodes","getCountryCodes","React","Heading","as","FormattedMessage","FieldTextInput","concat","name","type","autoComplete","label","placeholder","validate","validators","onUnmount","change","undefined","FieldSelect","value","map","country","key","code","defaultProps","stripeErrorTranslation","stripeError","message","translationId","defaultMessage","stripeElementsOptions","fonts","cssSrc","cardStyles","base","fontFamily","fontSize","window","innerWidth","fontSmoothing","lineHeight","letterSpacing","color","OneTimePaymentWithCardElement","cardClasses","formId","handleStripeElementRef","hasCardError","error","marketplaceName","labelText","paymentLabel","htmlFor","ref","saveForLaterUse","FieldCheckbox","saveForLaterUseCheckbox","textClassName","saveForLaterUseLabel","useSuccessColor","saveForLaterUseLegalInfo","values","PaymentMethodSelector","changePaymentMethod","defaultPaymentMethod","paymentMethod","last4Digits","attributes","card","heading","SavedCardDetails","paymentMethodSelector","onChange","getPaymentMethod","selectedPaymentMethod","hasDefaultPaymentMethod","checkOnetimePaymentFields","cardValueValid","hasHandledCardPayment","billingDetailsKnown","useOnetimePaymentMethod","includes","onetimePaymentNeedsAttention","showOnetimePaymentFields","LocationOrShippingDetails","askShippingDetails","showPickUplocation","listingLocation","isBooking","isFuzzyLocation","locationDetails","building","address","locationWrapper","initialState","StripePaymentForm","Component","constructor","super","this","state","updateBillingDetailsToMatchShippingAddress","bind","handleCardValueChange","handleSubmit","paymentForm","initializeStripeElement","finalFormAPI","cardContainer","componentDidMount","Stripe","Error","publishableKey","stripePublishableKey","onStripeInitialized","loadingData","stripe","componentWillUnmount","removeEventListener","unmount","element","elements","create","style","mount","addEventListener","update","shouldFill","_formApi$getState","getState","batch","recipientName","recipientAddressLine1","recipientAddressLine2","recipientPostal","recipientCity","recipientState","recipientCountry","changedTo","setState","el","event","complete","postalCode","prevState","onSubmit","inProgress","initialMessage","trim","formValues","ensurePaymentMethodCard","formRenderProps","submitInProgress","paymentInfo","authorDisplayName","showInitialMessageInput","initiateOrderError","confirmCardPaymentError","confirmPaymentError","invalid","form","totalPrice","ensuredDefaultPaymentMethod","billingDetailsNeeded","submitDisabled","hasPaymentErrors","root","cardSuccess","cardError","totalPriceMaybe","paymentErrorMessage","billingDetailsNameLabel","billingDetailsNamePlaceholder","messagePlaceholder","messageOptionalText","initialMessageLabel","billingAddress","StripePaymentAddress","isBookingYesNo","Form","enforcePagePreloadFor","billingDetails","sameAddressCheckbox","sameAddressLabel","checked","target","field","spinner","IconSpinner","errorMessage","submitContainer","PrimaryButton","submitButton","missingStripeKey","render","rest","FinalForm","Object","assign","injectIntl"],"sourceRoot":""}