{"version":3,"file":"static/js/4661.6f7f60ff.chunk.js","mappings":"4NACA,QAAuB,oCAAvB,EAAqE,uCAArE,EAAoH,qCAApH,EAAuO,8CAAvO,EAAmS,2CAAnS,EAAoW,4FAApW,EAAyc,sCAAzc,EAAggB,kFAAhgB,EAA8lB,yCAA9lB,EAAmpB,yCAAnpB,EAAuwB,2CAAvwB,EAAw0B,mDCkCl0BA,EAAQ,IAAIC,KAEZC,EAAcA,CAACC,EAAeC,KAClCC,EAAAA,EAAAA,IAAWF,EAAe,QAASC,EAAU,EAAG,UAC5CE,EAAcA,CAACH,EAAeC,KAClCC,EAAAA,EAAAA,IAAWF,EAAe,QAASC,GAAW,EAAG,UAE7CG,EAAaA,CAACC,EAAMC,EAA6BL,KAC9CC,EAAAA,EAAAA,IAAWG,EAAM,MAAOJ,EAAUK,EAA8B,EAAG,QAGtEC,EAAyBA,CAACC,EAAMP,EAAUQ,EAAcC,KAC5D,GAAuC,IAAnCA,EAAwBC,SAAiBD,EAAwB,KAAOD,EAC1E,MAAO,GAET,MAAMG,GAAmBV,EAAAA,EAAAA,IAAWO,EAAc,MAAOR,GAoBzD,OAlBiBS,EAAwBG,QAAO,CAACC,EAAgBC,KAC/D,MAAMC,EAAYD,EAAEE,WAAWC,MACzBC,EAAUJ,EAAEE,WAAWG,IACvBC,GAAWnB,EAAAA,EAAAA,IAAWU,EAAkB,MAAOX,EAAU,EAAG,QAI5DqB,GAAaC,EAAAA,EAAAA,IAAkBX,EAAkBI,GACnDJ,EACAI,EAIEQ,GAAWD,EAAAA,EAAAA,IAAkBJ,EAASE,GAAYA,EAAWF,EAE7DM,GAAQC,EAAAA,EAAAA,IAAcJ,EAAYE,EAAUvB,EAAUO,GAC5D,OAAOM,EAAea,OAAOF,EAAM,GAClC,GACY,EAGXG,EAAuBA,CAC3BpB,EACAP,EACA4B,EACAC,EACAC,KAEA,IAAKA,IAAqBA,EAAiBd,aAAea,IAAmBD,EAC3E,MAAO,GAGT,MAAMV,EAAUY,EAAiBd,WAAWG,IACtCY,GAAyBC,EAAAA,EAAAA,IAAgBJ,GAEzCK,GAAqBhC,EAAAA,EAAAA,IAAW4B,EAAgB,MAAO7B,EAAU,EAAG,QACpEkC,GAAuBjC,EAAAA,EAAAA,IAAW8B,EAAwB,MAAO/B,EAAU,EAAG,QAC9EmC,GAAgBlC,EAAAA,EAAAA,IAAW4B,EAAgB,MAAO7B,GAExD,IAAIqB,EACAE,EAmBJ,OAjBKD,EAAAA,EAAAA,IAAkBa,EAAeJ,IAMpCV,GAAaC,EAAAA,EAAAA,IAAkBS,EAAwBI,GACnDJ,EACAI,EAIJZ,GAAWa,EAAAA,EAAAA,KAAWnC,EAAAA,EAAAA,IAAWiB,EAAS,MAAOlB,GAAWmC,GACxDjB,EACAe,IAbJZ,EAAaU,EACbR,GAAWD,EAAAA,EAAAA,IAAkBY,EAAsBhB,GAAWA,EAAUgB,IAenEG,EAAAA,EAAAA,IAAYhB,EAAYE,EAAUvB,EAAUO,EAAK,EAGpD+B,EAAeA,CAACC,EAAWnC,EAAMJ,IAC9BuC,GAAaA,EAAU,GAC1BA,EAAUC,QAAO1B,IACR2B,EAAAA,EAAAA,IAAUrC,EAAMU,EAAEE,WAAWC,MAAOH,EAAEE,WAAWG,IAAK,MAAOnB,KAEtE,GAKA0C,EAAmBA,CACvBnC,EACAP,EACAuC,EACAxB,EACA4B,EACAC,KAEA,MAAMC,EAAaF,EACf,GACArC,EACEC,EACAP,EACAe,EACAuB,EAAaC,EAAWxB,EAAWf,IAOnC8C,EAAYH,IAEdE,EAAWnC,OAAS,GAAKmC,EAAW,IAAMA,EAAW,GAAGE,UACxDF,EAAW,GAAGE,UAAUC,WACxB,MAEEC,EAAkBH,GAAYd,EAAAA,EAAAA,IAAgBc,GAAa,KAM3D5B,EAAU0B,IAEZK,EACA,IAAIpD,MAAKqD,EAAAA,EAAAA,IAAiBD,EAAiB,OAAQjD,GAAUmD,UAAY,GACzE,MAEErB,EAAmBS,EAAUa,MAAKtC,IACtC2B,EAAAA,EAAAA,IAAUQ,EAAiBnC,EAAEE,WAAWC,MAAOH,EAAEE,WAAWG,OAGxDkC,EAAW1B,EAAqBpB,EAAMP,EAAU8C,EAAW5B,EAASY,GAU1E,MAAO,CAAEgB,YAAW5B,UAASoC,QAJ3BD,EAAS3C,OAAS,GAAK2C,EAAS,IAAMA,EAAS,GAAGN,UAC9CM,EAAS,GAAGN,UAAUC,WACtB,KAEgClB,mBAAkB,EAGpDyB,EAAsBA,CAACC,EAAkBpD,EAAMJ,KACnD,MAAMyD,GAAUC,EAAAA,EAAAA,IAActD,EAAMJ,GAEpC,OAAQwD,GAA6D,IAAzCG,OAAOC,KAAKJ,GAAkB9C,QAEtD8C,EAAiBC,IAAYD,EAAiBC,GAASlB,UACvDiB,EAAiBC,GAASlB,UAF1B,EAGE,EAKFsB,EAAWC,GACfC,EAAAA,cAACC,EAAAA,GAAaL,OAAAM,OAAA,GAAKH,EAAK,CAAEI,UAAU,OAAOC,cAAeC,KAEtDC,EAAWP,GACfC,EAAAA,cAACC,EAAAA,GAAaL,OAAAM,OAAA,GAAKH,EAAK,CAAEI,UAAU,QAAQC,cAAeC,KAGvDE,EAAOR,IACX,MAAM,aAAES,EAAY,4BAAElE,EAA2B,SAAEL,GAAa8D,EAC1DU,EAAgB1E,EAAYyE,EAAcvE,GAEhD,OAAOsB,EAAAA,EAAAA,IACLkD,EACArE,EAAWP,EAAOS,EAA6BL,IAC7C,KACF+D,EAAAA,cAACM,EAAQ,KACV,EAEGI,EAAOX,IACX,MAAM,aAAES,EAAY,SAAEvE,GAAa8D,EAC7BY,EAAgBxE,EAAYqE,EAAcvE,GAC1C2E,GAAmB1E,EAAAA,EAAAA,IAAWL,EAAO,QAASI,GAEpD,OAAOsB,EAAAA,EAAAA,IAAkBoD,EAAeC,GAAoBZ,EAAAA,cAACF,EAAQ,MAAM,IAAI,EAMjF,MAAMe,UAA8BC,EAAAA,UAClCC,YAAYhB,GACViB,MAAMjB,GAAO,KA4DfkB,yBAA2BC,IACzB,MAAM,iBAAEzB,EAAgB,SAAExD,EAAQ,KAAEO,EAAI,KAAE2E,GAASC,KAAKrB,MACxD,IAAKmB,IAAUA,EAAM7E,KASnB,OARA8E,EAAKE,OAAM,KACTF,EAAKG,OAAO,mBAAoB,MAChCH,EAAKG,OAAO,iBAAkB,CAAEjF,KAAM,OACtC8E,EAAKG,OAAO,iBAAkB,KAAK,SAGrCF,KAAKG,SAAS,CAAEf,cAActE,EAAAA,EAAAA,IAAWL,EAAO,QAASI,KAO3D,MAAMe,GAAYwE,EAAAA,EAAAA,IAA6BN,EAAM7E,KAAMJ,GACrDuC,EAAYgB,EAAoBC,EAAkB2B,KAAKK,MAAMjB,aAAcvE,GAC3ES,EAA0B6B,EAAaC,EAAWxB,EAAWf,IAE7D,UAAE8C,EAAS,QAAE5B,EAAO,QAAEoC,GAAYZ,EACtCnC,EACAP,EACAS,EACAM,GAGFmE,EAAKE,OAAM,KACTF,EAAKG,OAAO,mBAAoBvC,GAChCoC,EAAKG,OAAO,iBAAkB,CAAEjF,KAAMc,IACtCgE,EAAKG,OAAO,iBAAkB/B,EAAQ,GACtC,EACF,KAEFmC,yBAA2BR,IACzB,MAAM,iBAAEzB,EAAgB,SAAExD,EAAQ,KAAEO,EAAI,KAAE2E,EAAI,OAAEQ,GAAWP,KAAKrB,MAC1DvB,EAAYgB,EAAoBC,EAAkB2B,KAAKK,MAAMjB,aAAcvE,GAC3Ee,EAAY2E,EAAO/E,iBAAiBP,KACpCK,EAA0B6B,EAAaC,EAAWxB,EAAWf,IAE7D,QAAEkB,EAAO,QAAEoC,GAAYZ,EAC3BnC,EACAP,EACAS,EACAM,EACAkE,GAGFC,EAAKE,OAAM,KACTF,EAAKG,OAAO,iBAAkB,CAAEjF,KAAMc,IACtCgE,EAAKG,OAAO,iBAAkB/B,EAAQ,GACtC,EACF,KAEFqC,uBAAyBV,IACvB,MAAM,iBAAEzB,EAAgB,SAAExD,EAAQ,KAAEO,EAAI,KAAE2E,EAAI,OAAEQ,GAAWP,KAAKrB,MAChE,IAAKmB,IAAUA,EAAM7E,KAEnB,YADA8E,EAAKG,OAAO,iBAAkB,MAMhC,MAAMnE,GAAUqE,EAAAA,EAAAA,IAA6BN,EAAM7E,KAAMJ,IAEnD,iBAAEW,EAAgB,iBAAEiB,GAAqB8D,EACzC3E,EAAYJ,EAAiBP,KAC7BmC,EAAYgB,EAAoBC,EAAkB2B,KAAKK,MAAMjB,aAAcvE,GAC3ES,EAA0B6B,EAAaC,EAAWxB,EAAWf,IAE7D,QAAEsD,GAAYZ,EAClBnC,EACAP,EACAS,EACAM,EACAa,EACAV,GAGFgE,EAAKG,OAAO,iBAAkB/B,EAAQ,EAzItC6B,KAAKK,MAAQ,CACXjB,cAActE,EAAAA,EAAAA,IAAWL,EAAO,QAASkE,EAAM9D,WAGjDmF,KAAKS,eAAiBT,KAAKS,eAAeC,KAAKV,MAC/CA,KAAKW,aAAeX,KAAKW,aAAaD,KAAKV,MAC3CA,KAAKH,yBAA2BG,KAAKH,yBAAyBa,KAAKV,MACnEA,KAAKM,yBAA2BN,KAAKM,yBAAyBI,KAAKV,MACnEA,KAAKQ,uBAAyBR,KAAKQ,uBAAuBE,KAAKV,MAC/DA,KAAKY,eAAiBZ,KAAKY,eAAeF,KAAKV,KACjD,CAEAS,eAAexF,GACb,MAAM,UAAE4F,EAAS,SAAEhG,EAAQ,iBAAEiG,EAAgB,4BAAE5F,GAAgC8E,KAAKrB,MAC9EoC,EAAiB/F,EAAWP,EAAOS,EAA6BL,GAGtE,IAAIyC,EAAAA,EAAAA,IAAUrC,EAAMR,EAAOsG,GAAiB,CAE1C,MAAMjF,GAAQK,EAAAA,EAAAA,IAAkB1B,EAAOQ,GAAQR,EAAQQ,EAGjDoE,EAAgB1E,EAAYM,EAAMJ,GAMxCiG,EAAiBD,EAAW/E,GALhBK,EAAAA,EAAAA,IAAkBkD,EAAe0B,IACzCjG,EAAAA,EAAAA,IAAWiG,EAAgB,MAAOlG,GAClCwE,EAGoCxE,EAC1C,CACF,CAEA8F,aAAaK,GACX,MAAM,eAAEC,EAAc,SAAEpG,GAAamF,KAAKrB,MAE1CqB,KAAKG,UACHe,IAAS,CAAO9B,aAAc4B,EAAQE,EAAU9B,aAAcvE,OAC9D,KAIEmF,KAAKS,eAAeO,EAAQhB,KAAKK,MAAMjB,aAAcvE,IAGrD,MAAMyD,GAAUC,EAAAA,EAAAA,IAAcyB,KAAKK,MAAMjB,aAAcvE,GACjDsG,EAAmBnB,KAAKrB,MAAMN,iBAAiBC,GACjD6C,GAAoBA,EAAiBC,qBACvCpB,KAAKS,eAAeT,KAAKK,MAAMjB,cAI7B6B,GACFA,EAAe3C,EACjB,GAGN,CAoFAsC,eAAeS,EAAK7F,EAAkBmB,EAAkB9B,GACtD,IAAK8B,EACH,OAAO,EAKT,MAAM2E,GAAelB,EAAAA,EAAAA,IAA6BiB,EAAKxG,GAEjDe,GAAYd,EAAAA,EAAAA,IAAWU,EAAkB,MAAOX,GAGhD0G,EAAe,IAAI7G,KAAKiC,EAAiBd,WAAWG,IAAIgC,UAAY,GAEpEjC,GAAUjB,EAAAA,EAAAA,IAAWyG,EAAc,MAAO1G,EAAU,EAAG,QAC7D,SACEsB,EAAAA,EAAAA,IAAkBmF,EAAc1F,KAAcO,EAAAA,EAAAA,IAAkBJ,EAASuF,GAE7E,CAEAE,SACE,MAAM,cACJxC,EAAa,UACbyC,EAAS,OACTC,EAAM,oBACNC,EAAmB,OAEnBpB,EAAM,iBACNlC,EAAgB,SAChBxD,EAAQ,KACRO,EAAI,4BACJF,GACE8E,KAAKrB,MAEHiD,EAAUC,IAAW7C,GAAiBC,EAAUwC,GAEhDjG,EACJ+E,EAAO/E,kBAAoB+E,EAAO/E,iBAAiBP,KAAOsF,EAAO/E,iBAAiBP,KAAO,KACrFwB,EAAmB8D,EAAO9D,iBAAmB8D,EAAO9D,iBAAmB,KACvEC,EACJ6D,EAAO7D,gBAAkB6D,EAAO7D,eAAezB,KAAOsF,EAAO7D,eAAezB,KAAO,KAE/E6G,EAA2B1D,EAC/BC,EACA2B,KAAKK,MAAMjB,aACXvE,GAEIS,EAA0B6B,EAC9B2E,EACAtG,EACAX,GAGIkH,EAAsB5G,EAC1BC,EACAP,EACAW,EACAF,GAGI0G,EACJD,EAAoBxG,OAAS,GAAKwG,EAAoB,IAAMA,EAAoB,GAAGnE,UAC/EmE,EAAoB,GAAGnE,UACvB,MAEA,UAAED,EAAS,QAAE5B,EAAO,iBAAEY,GAAqBY,EAC/CnC,EACAP,EACAS,EACAE,EACAiB,GAAoBuF,EACpBtF,GAAkBlB,GAGdyG,EAAoBzF,EACxBpB,EACAP,EACA4B,GAAoBkB,EACpBjB,GAAkBX,EAClBY,GAGIuF,EAAeJ,EACjBT,IACGS,EAAyB7D,MAAKkE,IAC7BC,EAAAA,EAAAA,IACEf,EACAc,EAAStG,WAAWC,MACpBqG,EAAStG,WAAWG,IACpBnB,KAGN,KAAM,EAEJwH,GAAetE,EAAAA,EAAAA,IAAiBtD,EAAO,OAAQI,GACrD,IAAIyH,EAAkB,QACtB,IAAK,IAADC,EACFD,EAA0E,QAA3DC,GAAGC,EAAAA,EAAAA,IAAuBH,EAAcjH,EAAM,CAAEP,oBAAW,IAAA0H,OAAA,EAAxDA,EAA0DE,IAE5E,CADA,MAAOC,GACP,CAGF,MAAMC,GAAe7H,EAAAA,EAAAA,IAAWL,EAAO,MAAOI,GACxC+H,EAA0BpH,IAAqBiB,GAAoBkB,GACzE,OACEiB,EAAAA,cAAA,OAAK6C,UAAWG,GACdhD,EAAAA,cAAA,OAAK6C,UAAWxC,GACdL,EAAAA,cAAA,OAAK6C,UAAWI,IAAW5C,EAAWA,IACpCL,EAAAA,cAACiE,EAAAA,GAAc,CACbpB,UAAWxC,EACX6D,KAAK,mBACLC,GAAIrB,EAAM,GAAAnF,OAAMmF,EAAM,qBAAsB,mBAC5CsB,MAAOrB,EAAoBqB,MAC3BC,gBAAiBtB,EAAoBsB,gBACrCC,OAAQC,GACNA,GAAKA,EAAElI,KAAO,CAAEA,MAAMmI,EAAAA,EAAAA,IAA6BD,EAAElI,KAAMJ,IAAcsI,EAE3EE,MAAOF,GACLA,GAAKA,EAAElI,KAAO,CAAEA,MAAMmF,EAAAA,EAAAA,IAA6B+C,EAAElI,KAAMJ,IAAcsI,EAE3EG,qBAAqBA,EAAAA,EAAAA,IAAoB9H,GAAoBmH,EAAc9H,GAC3EqH,aAAcA,EACdqB,SAAUvD,KAAKH,yBACf2D,iBAAkBA,IAAMxD,KAAKW,aAAa5F,GAC1C0I,iBAAkBA,IAAMzD,KAAKW,aAAahG,GAC1C+I,QACE9E,EAAAA,cAACO,EAAI,CACHC,aAAcY,KAAKK,MAAMjB,aACzBvE,SAAUA,EACVK,4BAA6BA,IAGjCyI,QAAS/E,EAAAA,cAACU,EAAI,CAACF,aAAcY,KAAKK,MAAMjB,aAAcvE,SAAUA,IAChE+I,kBAAgB,EAChBC,UAAUC,EAAAA,EAAAA,IACR1I,EAAK2I,cAAc,CAAEhB,GAAI,kCAE3BiB,QAASC,IAAK,IAAAC,EAAA,OACZlE,KAAKG,SAAS,CACZf,cAActE,EAAAA,EAAAA,IAAsB,QAAZoJ,EAAM,OAALD,QAAK,IAALA,OAAK,EAALA,EAAOhJ,YAAI,IAAAiJ,EAAAA,EAAIzJ,EAAO,QAASuF,KAAKrB,MAAM9D,WACnE,MAKV+D,EAAAA,cAAA,OAAK6C,UAAWxC,GACdL,EAAAA,cAAA,OAAK6C,UAAWxC,GACdL,EAAAA,cAACuF,EAAAA,GAAW,CACVrB,KAAK,mBACLC,GAAIrB,EAAM,GAAAnF,OAAMmF,EAAM,qBAAsB,mBAC5CD,UAAWjG,EAAmByD,EAAkBA,EAChDmF,gBAAiB5I,EAAmByD,EAAaA,EACjD+D,MAAO5H,EAAK2I,cAAc,CAAEhB,GAAI,oCAChCsB,UAAW7I,EACX+H,SAAUvD,KAAKM,0BAEd9E,EACCuG,EAAoBuC,KAAIC,GACtB3F,EAAAA,cAAA,UAAQ4F,IAAKD,EAAEE,UAAW3E,MAAOyE,EAAE3G,WAChC2G,EAAEE,aAIP7F,EAAAA,cAAA,cAAS0D,KAKf1D,EAAAA,cAAA,OAAK6C,UAAWjG,EAAmByD,EAAkBA,GAAyB,KAE9EL,EAAAA,cAAA,OAAK6C,UAAWxC,GACdL,EAAAA,cAACuF,EAAAA,GAAW,CACVrB,KAAK,iBACLC,GAAIrB,EAAM,GAAAnF,OAAMmF,EAAM,mBAAoB,iBAC1CD,UAAWjG,EAAmByD,EAAkBA,EAChDmF,gBAAiB5I,EAAmByD,EAAaA,EACjD+D,MAAO5H,EAAK2I,cAAc,CAAEhB,GAAI,kCAChCsB,UAAWzB,GAEVA,EACCX,EAAkBqC,KAAIC,GACpB3F,EAAAA,cAAA,UAAQ4F,IAAqB,UAAhBD,EAAEE,UAAwB,QAAUF,EAAEE,UAAW3E,MAAOyE,EAAE3G,WACpD,UAAhB2G,EAAEE,UAAwB,QAAUF,EAAEE,aAI3C7F,EAAAA,cAAA,cAAS0D,MAOvB,EAGF7C,EAAsBiF,aAAe,CACnC1F,cAAe,KACfyC,UAAW,KACXE,oBAAqB,KACrBgD,kBAAmB,KACnBC,oBAAqB,KACrBC,kBAAmB,KACnBhE,UAAW,KACXxC,iBAAkB,KAClBxD,SAAU,MAuBZ,S,yICliBA,MAAM,MAAEiK,EAAK,KAAEC,GAASC,EAAAA,MAElBC,EAAsBA,CAACC,EAAWC,KACtC,MAAMC,EAAoBF,EAAUzJ,QAAO,CAAC4J,EAAKC,KAC/C,MAAMC,GAAeC,EAAAA,EAAAA,IAAqBF,EAASG,WACnD,OAAO,IAAIC,EAAAA,EAAQH,GAAcI,IAAIN,EAAI,GACxC,IAAIK,EAAAA,EAAQ,IAITE,EACJV,EAAU,IAAMA,EAAU,GAAGW,UAAYX,EAAU,GAAGW,UAAUD,SAAWT,EAE7E,OAAO,IAAIL,GACTgB,EAAAA,EAAAA,IAAqBV,EAAkBW,YAAYC,EAAAA,EAAAA,IAAYJ,IAC/DA,EACD,EAGGK,EAAmB,SAAC5K,EAAc6K,EAAYC,GAClD,MAAMC,EAAW,CAAEtK,MAAOT,EAAcW,IAAKkK,GAE7C,MAAO,CACLnD,GAAI,IAAIgC,EAAK,qBACbsB,KAAM,UACNxK,WAAY,IACPuK,GAGT,EAwGA,EAnDwCzH,IACtC,MAAM,cAAE2H,EAAgB,CAAC,EAAC,UAAEpB,EAAS,SAAErK,EAAQ,SAAE+K,EAAQ,gBAAEW,EAAe,YAAEC,GAAgB7H,GACtF,UAAE/C,EAAS,QAAEG,GAAYuK,EAE/B,IAAIG,EAAU,KACd,IACEA,GAAUC,EAAAA,EAAAA,IAAWF,EAOvB,CANE,MAAOG,GACP,OACE/H,EAAAA,cAAA,OAAK6C,UAAWxC,EAAAA,EAAIyD,OAClB9D,EAAAA,cAACgI,EAAAA,GAAgB,CAAC7D,GAAG,yCAG3B,CAEA,MAAM8D,EAAwB,OAAT3B,QAAS,IAATA,OAAS,EAATA,EAAWjH,MAC9B6I,GAAQC,EAAAA,GAAmBC,SAASF,EAAKG,QAAUH,EAAKI,WAEpDf,EAA+B,OAAZU,QAAY,IAAZA,OAAY,EAAZA,EAAcI,KACjCE,EAAoB,CAACC,EAAAA,GAAeC,EAAAA,IAAiBL,SAASb,GAC9DmB,EAAepC,GAAaA,EAAU3J,OAAS,EAC/CgM,GAA0BJ,GAAsBvL,GAAaG,EAC7DyL,EAAWrB,IAAqBsB,EAAAA,GAAiBC,EAAAA,GAAqBC,EAAAA,GACtEC,EACJN,GAAgBC,EArEiBM,EACnC3C,EACA7J,EACA6K,EACAC,EACAtL,EACA4L,EACAD,EACArB,KAEA,MAAM2C,EAAqB,OAAPrB,QAAO,IAAPA,OAAO,EAAPA,EAASqB,YACvBC,EAAM,IAAIrN,KACVsN,EAAoB9C,EAAU7H,QAAOyJ,GAAQA,EAAKmB,WAAWjB,SAAS,cACtEkB,EAAoBhD,EAAU7H,QAAOyJ,GAAQA,EAAKmB,WAAWjB,SAAS,cACtEmB,EAAalD,EAAoB+C,EAAmB7C,GACpDiD,EAAcnD,EAAoBiD,EAAmB/C,GAErDkD,EACJhN,GAAgB6K,EACZ,CAAEoC,QAASrC,EAAiB5K,EAAc6K,EAAYC,EAAkBtL,IACxE,CAAC,EAEP,MAAO,CACLkI,GAAI,IAAIgC,EAAK,yBACbsB,KAAM,cACNxK,WAAY,CACV0M,UAAWR,EACXvB,cACAgC,mBAAoBT,EACpBU,eAAgBX,EAAYY,gBAC5BP,aACAC,cACAlD,UAAW8C,EACXF,YAAa,CACX,CACES,UAAWR,EACXY,GAAIC,EAAAA,GACJC,WAAYf,EAAYY,sBAI3BL,EACJ,EA4BKR,CACE3C,EACAtJ,EACAG,EACAoK,EACAtL,EACA4L,EACAD,EACAZ,GAEF,KAEN,OAAOgC,EACLhJ,EAAAA,cAACkK,EAAAA,GAAc,CACbrH,UAAWxC,EAAAA,EAAI8J,QACfC,SAAS,WACTC,YAAarB,EACbU,QAASV,EAAGU,QACZd,SAAUA,EACV3M,SAAUA,EACV+K,SAAUA,EACVW,gBAAiBA,IAEjB,IAAI,C","sources":["webpack://app/./src/components/OrderPanel/BookingTimeForm/FieldDateAndTimeInput.module.css?0f48","components/OrderPanel/BookingTimeForm/FieldDateAndTimeInput.js","components/OrderPanel/EstimatedCustomerBreakdownMaybe.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FieldDateAndTimeInput_root__bNnFA\",\"formRow\":\"FieldDateAndTimeInput_formRow__AgXHr\",\"field\":\"FieldDateAndTimeInput_field__mlwWG\",\"fieldDisabled\":\"FieldDateAndTimeInput_fieldDisabled__0XuMx\",\"fieldDateInput\":\"FieldDateAndTimeInput_fieldDateInput__usera\",\"fieldSelect\":\"FieldDateAndTimeInput_fieldSelect__D8+qm\",\"fieldSelectDisabled\":\"FieldDateAndTimeInput_fieldSelectDisabled__DHtUU FieldDateAndTimeInput_fieldSelect__D8+qm\",\"select\":\"FieldDateAndTimeInput_select__EvNg-\",\"selectDisabled\":\"FieldDateAndTimeInput_selectDisabled__SUW5u FieldDateAndTimeInput_select__EvNg-\",\"arrowIcon\":\"FieldDateAndTimeInput_arrowIcon__E4EL3\",\"startDate\":\"FieldDateAndTimeInput_startDate__uj2N+\",\"endDateHidden\":\"FieldDateAndTimeInput_endDateHidden__A0mit\",\"lineBetween\":\"FieldDateAndTimeInput_lineBetween__98BmD\",\"lineBetweenDisabled\":\"FieldDateAndTimeInput_lineBetweenDisabled__7ITbZ\"};","import React, { Component } from 'react';\r\nimport { func, number, object, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport { intlShape } from '../../../util/reactIntl';\r\nimport {\r\n  getStartHours,\r\n  getEndHours,\r\n  isInRange,\r\n  isSameDate,\r\n  isDayMomentInsideRange,\r\n  timeOfDayFromLocalToTimeZone,\r\n  timeOfDayFromTimeZoneToLocal,\r\n  isDateSameOrAfter,\r\n  findNextBoundary,\r\n  timestampToDate,\r\n  formatDateIntoPartials,\r\n  monthIdString,\r\n  getStartOf,\r\n  initialVisibleMonth,\r\n} from '../../../util/dates';\r\nimport { propTypes } from '../../../util/types';\r\nimport { bookingDateRequired } from '../../../util/validators';\r\nimport { FieldDateInput, FieldSelect, IconArrowHead } from '../../../components';\r\n\r\nimport css from './FieldDateAndTimeInput.module.css';\r\n\r\n// dayCountAvailableForBooking is the maximum number of days forwards during which a booking can be made.\r\n// This is limited due to Stripe holding funds up to 90 days from the\r\n// moment they are charged:\r\n// https://stripe.com/docs/connect/account-balances#holding-funds\r\n//\r\n// See also the API reference for querying time slots:\r\n// https://www.sharetribe.com/api-reference/marketplace.html#query-time-slots\r\n\r\nconst TODAY = new Date();\r\n\r\nconst nextMonthFn = (currentMoment, timeZone) =>\r\n  getStartOf(currentMoment, 'month', timeZone, 1, 'months');\r\nconst prevMonthFn = (currentMoment, timeZone) =>\r\n  getStartOf(currentMoment, 'month', timeZone, -1, 'months');\r\n\r\nconst endOfRange = (date, dayCountAvailableForBooking, timeZone) => {\r\n  return getStartOf(date, 'day', timeZone, dayCountAvailableForBooking - 1, 'days');\r\n};\r\n\r\nconst getAvailableStartTimes = (intl, timeZone, bookingStart, timeSlotsOnSelectedDate) => {\r\n  if (timeSlotsOnSelectedDate.length === 0 || !timeSlotsOnSelectedDate[0] || !bookingStart) {\r\n    return [];\r\n  }\r\n  const bookingStartDate = getStartOf(bookingStart, 'day', timeZone);\r\n\r\n  const allHours = timeSlotsOnSelectedDate.reduce((availableHours, t) => {\r\n    const startDate = t.attributes.start;\r\n    const endDate = t.attributes.end;\r\n    const nextDate = getStartOf(bookingStartDate, 'day', timeZone, 1, 'days');\r\n\r\n    // If the start date is after timeslot start, use the start date.\r\n    // Otherwise use the timeslot start time.\r\n    const startLimit = isDateSameOrAfter(bookingStartDate, startDate)\r\n      ? bookingStartDate\r\n      : startDate;\r\n\r\n    // If date next to selected start date is inside timeslot use the next date to get the hours of full day.\r\n    // Otherwise use the end of the timeslot.\r\n    const endLimit = isDateSameOrAfter(endDate, nextDate) ? nextDate : endDate;\r\n\r\n    const hours = getStartHours(startLimit, endLimit, timeZone, intl);\r\n    return availableHours.concat(hours);\r\n  }, []);\r\n  return allHours;\r\n};\r\n\r\nconst getAvailableEndTimes = (\r\n  intl,\r\n  timeZone,\r\n  bookingStartTime,\r\n  bookingEndDate,\r\n  selectedTimeSlot\r\n) => {\r\n  if (!selectedTimeSlot || !selectedTimeSlot.attributes || !bookingEndDate || !bookingStartTime) {\r\n    return [];\r\n  }\r\n\r\n  const endDate = selectedTimeSlot.attributes.end;\r\n  const bookingStartTimeAsDate = timestampToDate(bookingStartTime);\r\n\r\n  const dayAfterBookingEnd = getStartOf(bookingEndDate, 'day', timeZone, 1, 'days');\r\n  const dayAfterBookingStart = getStartOf(bookingStartTimeAsDate, 'day', timeZone, 1, 'days');\r\n  const startOfEndDay = getStartOf(bookingEndDate, 'day', timeZone);\r\n\r\n  let startLimit;\r\n  let endLimit;\r\n\r\n  if (!isDateSameOrAfter(startOfEndDay, bookingStartTimeAsDate)) {\r\n    startLimit = bookingStartTimeAsDate;\r\n    endLimit = isDateSameOrAfter(dayAfterBookingStart, endDate) ? endDate : dayAfterBookingStart;\r\n  } else {\r\n    // If the end date is on the same day as the selected booking start time\r\n    // use the start time as limit. Otherwise use the start of the selected end date.\r\n    startLimit = isDateSameOrAfter(bookingStartTimeAsDate, startOfEndDay)\r\n      ? bookingStartTimeAsDate\r\n      : startOfEndDay;\r\n\r\n    // If the selected end date is on the same day as timeslot end, use the timeslot end.\r\n    // Else use the start of the next day after selected date.\r\n    endLimit = isSameDate(getStartOf(endDate, 'day', timeZone), startOfEndDay)\r\n      ? endDate\r\n      : dayAfterBookingEnd;\r\n  }\r\n\r\n  return getEndHours(startLimit, endLimit, timeZone, intl);\r\n};\r\n\r\nconst getTimeSlots = (timeSlots, date, timeZone) => {\r\n  return timeSlots && timeSlots[0]\r\n    ? timeSlots.filter(t => {\r\n        return isInRange(date, t.attributes.start, t.attributes.end, 'day', timeZone);\r\n      })\r\n    : [];\r\n};\r\n\r\n// Use start date to calculate the first possible start time or times, end date and end time or times.\r\n// If the selected value is passed to function it will be used instead of calculated value.\r\nconst getAllTimeValues = (\r\n  intl,\r\n  timeZone,\r\n  timeSlots,\r\n  startDate,\r\n  selectedStartTime,\r\n  selectedEndDate\r\n) => {\r\n  const startTimes = selectedStartTime\r\n    ? []\r\n    : getAvailableStartTimes(\r\n        intl,\r\n        timeZone,\r\n        startDate,\r\n        getTimeSlots(timeSlots, startDate, timeZone)\r\n      );\r\n\r\n  // Value selectedStartTime is a string when user has selected it through the form.\r\n  // That's why we need to convert also the timestamp we use as a default\r\n  // value to string for consistency. This is expected later when we\r\n  // want to compare the sartTime and endTime.\r\n  const startTime = selectedStartTime\r\n    ? selectedStartTime\r\n    : startTimes.length > 0 && startTimes[0] && startTimes[0].timestamp\r\n    ? startTimes[0].timestamp.toString()\r\n    : null;\r\n\r\n  const startTimeAsDate = startTime ? timestampToDate(startTime) : null;\r\n\r\n  // Note: We need to remove 1ms from the calculated endDate so that if the end\r\n  // date would be the next day at 00:00 the day in the form is still correct.\r\n  // Because we are only using the date and not the exact time we can remove the\r\n  // 1ms.\r\n  const endDate = selectedEndDate\r\n    ? selectedEndDate\r\n    : startTimeAsDate\r\n    ? new Date(findNextBoundary(startTimeAsDate, 'hour', timeZone).getTime() - 1)\r\n    : null;\r\n\r\n  const selectedTimeSlot = timeSlots.find(t =>\r\n    isInRange(startTimeAsDate, t.attributes.start, t.attributes.end)\r\n  );\r\n\r\n  const endTimes = getAvailableEndTimes(intl, timeZone, startTime, endDate, selectedTimeSlot);\r\n\r\n  // We need to convert the timestamp we use as a default value\r\n  // for endTime to string for consistency. This is expected later when we\r\n  // want to compare the sartTime and endTime.\r\n  const endTime =\r\n    endTimes.length > 0 && endTimes[0] && endTimes[0].timestamp\r\n      ? endTimes[0].timestamp.toString()\r\n      : null;\r\n\r\n  return { startTime, endDate, endTime, selectedTimeSlot };\r\n};\r\n\r\nconst getMonthlyTimeSlots = (monthlyTimeSlots, date, timeZone) => {\r\n  const monthId = monthIdString(date, timeZone);\r\n\r\n  return !monthlyTimeSlots || Object.keys(monthlyTimeSlots).length === 0\r\n    ? []\r\n    : monthlyTimeSlots[monthId] && monthlyTimeSlots[monthId].timeSlots\r\n    ? monthlyTimeSlots[monthId].timeSlots\r\n    : [];\r\n};\r\n\r\n// IconArrowHead component might not be defined if exposed directly to the file.\r\n// This component is called before IconArrowHead component in components/index.js\r\nconst PrevIcon = props => (\r\n  <IconArrowHead {...props} direction=\"left\" rootClassName={css.arrowIcon} />\r\n);\r\nconst NextIcon = props => (\r\n  <IconArrowHead {...props} direction=\"right\" rootClassName={css.arrowIcon} />\r\n);\r\n\r\nconst Next = props => {\r\n  const { currentMonth, dayCountAvailableForBooking, timeZone } = props;\r\n  const nextMonthDate = nextMonthFn(currentMonth, timeZone);\r\n\r\n  return isDateSameOrAfter(\r\n    nextMonthDate,\r\n    endOfRange(TODAY, dayCountAvailableForBooking, timeZone)\r\n  ) ? null : (\r\n    <NextIcon />\r\n  );\r\n};\r\nconst Prev = props => {\r\n  const { currentMonth, timeZone } = props;\r\n  const prevMonthDate = prevMonthFn(currentMonth, timeZone);\r\n  const currentMonthDate = getStartOf(TODAY, 'month', timeZone);\r\n\r\n  return isDateSameOrAfter(prevMonthDate, currentMonthDate) ? <PrevIcon /> : null;\r\n};\r\n\r\n/////////////////////////////////////\r\n// FieldDateAndTimeInput component //\r\n/////////////////////////////////////\r\nclass FieldDateAndTimeInput extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      currentMonth: getStartOf(TODAY, 'month', props.timeZone),\r\n    };\r\n\r\n    this.fetchMonthData = this.fetchMonthData.bind(this);\r\n    this.onMonthClick = this.onMonthClick.bind(this);\r\n    this.onBookingStartDateChange = this.onBookingStartDateChange.bind(this);\r\n    this.onBookingStartTimeChange = this.onBookingStartTimeChange.bind(this);\r\n    this.onBookingEndDateChange = this.onBookingEndDateChange.bind(this);\r\n    this.isOutsideRange = this.isOutsideRange.bind(this);\r\n  }\r\n\r\n  fetchMonthData(date) {\r\n    const { listingId, timeZone, onFetchTimeSlots, dayCountAvailableForBooking } = this.props;\r\n    const endOfRangeDate = endOfRange(TODAY, dayCountAvailableForBooking, timeZone);\r\n\r\n    // Don't fetch timeSlots for past months or too far in the future\r\n    if (isInRange(date, TODAY, endOfRangeDate)) {\r\n      // Use \"today\", if the first day of given month is in the past\r\n      const start = isDateSameOrAfter(TODAY, date) ? TODAY : date;\r\n\r\n      // Use endOfRangeDate, if the first day of the next month is too far in the future\r\n      const nextMonthDate = nextMonthFn(date, timeZone);\r\n      const end = isDateSameOrAfter(nextMonthDate, endOfRangeDate)\r\n        ? getStartOf(endOfRangeDate, 'day', timeZone)\r\n        : nextMonthDate;\r\n\r\n      // Fetch time slots for given time range\r\n      onFetchTimeSlots(listingId, start, end, timeZone);\r\n    }\r\n  }\r\n\r\n  onMonthClick(monthFn) {\r\n    const { onMonthChanged, timeZone } = this.props;\r\n\r\n    this.setState(\r\n      prevState => ({ currentMonth: monthFn(prevState.currentMonth, timeZone) }),\r\n      () => {\r\n        // Callback function after month has been updated.\r\n        // react-dates component has next and previous months ready (but inivisible).\r\n        // we try to populate those invisible months before user advances there.\r\n        this.fetchMonthData(monthFn(this.state.currentMonth, timeZone));\r\n\r\n        // If previous fetch for month data failed, try again.\r\n        const monthId = monthIdString(this.state.currentMonth, timeZone);\r\n        const currentMonthData = this.props.monthlyTimeSlots[monthId];\r\n        if (currentMonthData && currentMonthData.fetchTimeSlotsError) {\r\n          this.fetchMonthData(this.state.currentMonth);\r\n        }\r\n\r\n        // Call onMonthChanged function if it has been passed in among props.\r\n        if (onMonthChanged) {\r\n          onMonthChanged(monthId);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  onBookingStartDateChange = value => {\r\n    const { monthlyTimeSlots, timeZone, intl, form } = this.props;\r\n    if (!value || !value.date) {\r\n      form.batch(() => {\r\n        form.change('bookingStartTime', null);\r\n        form.change('bookingEndDate', { date: null });\r\n        form.change('bookingEndTime', null);\r\n      });\r\n      // Reset the currentMonth too if bookingStartDate is cleared\r\n      this.setState({ currentMonth: getStartOf(TODAY, 'month', timeZone) });\r\n\r\n      return;\r\n    }\r\n\r\n    // This callback function (onBookingStartDateChange) is called from react-dates component.\r\n    // It gets raw value as a param - browser's local time instead of time in listing's timezone.\r\n    const startDate = timeOfDayFromLocalToTimeZone(value.date, timeZone);\r\n    const timeSlots = getMonthlyTimeSlots(monthlyTimeSlots, this.state.currentMonth, timeZone);\r\n    const timeSlotsOnSelectedDate = getTimeSlots(timeSlots, startDate, timeZone);\r\n\r\n    const { startTime, endDate, endTime } = getAllTimeValues(\r\n      intl,\r\n      timeZone,\r\n      timeSlotsOnSelectedDate,\r\n      startDate\r\n    );\r\n\r\n    form.batch(() => {\r\n      form.change('bookingStartTime', startTime);\r\n      form.change('bookingEndDate', { date: endDate });\r\n      form.change('bookingEndTime', endTime);\r\n    });\r\n  };\r\n\r\n  onBookingStartTimeChange = value => {\r\n    const { monthlyTimeSlots, timeZone, intl, form, values } = this.props;\r\n    const timeSlots = getMonthlyTimeSlots(monthlyTimeSlots, this.state.currentMonth, timeZone);\r\n    const startDate = values.bookingStartDate.date;\r\n    const timeSlotsOnSelectedDate = getTimeSlots(timeSlots, startDate, timeZone);\r\n\r\n    const { endDate, endTime } = getAllTimeValues(\r\n      intl,\r\n      timeZone,\r\n      timeSlotsOnSelectedDate,\r\n      startDate,\r\n      value\r\n    );\r\n\r\n    form.batch(() => {\r\n      form.change('bookingEndDate', { date: endDate });\r\n      form.change('bookingEndTime', endTime);\r\n    });\r\n  };\r\n\r\n  onBookingEndDateChange = value => {\r\n    const { monthlyTimeSlots, timeZone, intl, form, values } = this.props;\r\n    if (!value || !value.date) {\r\n      form.change('bookingEndTime', null);\r\n      return;\r\n    }\r\n\r\n    // This callback function (onBookingStartDateChange) is called from react-dates component.\r\n    // It gets raw value as a param - browser's local time instead of time in listing's timezone.\r\n    const endDate = timeOfDayFromLocalToTimeZone(value.date, timeZone);\r\n\r\n    const { bookingStartDate, bookingStartTime } = values;\r\n    const startDate = bookingStartDate.date;\r\n    const timeSlots = getMonthlyTimeSlots(monthlyTimeSlots, this.state.currentMonth, timeZone);\r\n    const timeSlotsOnSelectedDate = getTimeSlots(timeSlots, startDate, timeZone);\r\n\r\n    const { endTime } = getAllTimeValues(\r\n      intl,\r\n      timeZone,\r\n      timeSlotsOnSelectedDate,\r\n      startDate,\r\n      bookingStartTime,\r\n      endDate\r\n    );\r\n\r\n    form.change('bookingEndTime', endTime);\r\n  };\r\n\r\n  isOutsideRange(day, bookingStartDate, selectedTimeSlot, timeZone) {\r\n    if (!selectedTimeSlot) {\r\n      return true;\r\n    }\r\n\r\n    // 'day' is pointing to browser's local time-zone (react-dates gives these).\r\n    // However, bookingStartDate and selectedTimeSlot refer to times in listing's timeZone.\r\n    const localizedDay = timeOfDayFromLocalToTimeZone(day, timeZone);\r\n    // Given day (endDate) should be after the start of the day of selected booking start date.\r\n    const startDate = getStartOf(bookingStartDate, 'day', timeZone);\r\n    // 00:00 would return wrong day as the end date.\r\n    // Removing 1 millisecond, solves the exclusivity issue.\r\n    const inclusiveEnd = new Date(selectedTimeSlot.attributes.end.getTime() - 1);\r\n    // Given day (endDate) should be before the \"next\" day of selected timeSlots end.\r\n    const endDate = getStartOf(inclusiveEnd, 'day', timeZone, 1, 'days');\r\n    return !(\r\n      isDateSameOrAfter(localizedDay, startDate) && isDateSameOrAfter(endDate, localizedDay)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      rootClassName,\r\n      className,\r\n      formId,\r\n      startDateInputProps,\r\n      // endDateInputProps,\r\n      values,\r\n      monthlyTimeSlots,\r\n      timeZone,\r\n      intl,\r\n      dayCountAvailableForBooking,\r\n    } = this.props;\r\n\r\n    const classes = classNames(rootClassName || css.root, className);\r\n\r\n    const bookingStartDate =\r\n      values.bookingStartDate && values.bookingStartDate.date ? values.bookingStartDate.date : null;\r\n    const bookingStartTime = values.bookingStartTime ? values.bookingStartTime : null;\r\n    const bookingEndDate =\r\n      values.bookingEndDate && values.bookingEndDate.date ? values.bookingEndDate.date : null;\r\n\r\n    const timeSlotsOnSelectedMonth = getMonthlyTimeSlots(\r\n      monthlyTimeSlots,\r\n      this.state.currentMonth,\r\n      timeZone\r\n    );\r\n    const timeSlotsOnSelectedDate = getTimeSlots(\r\n      timeSlotsOnSelectedMonth,\r\n      bookingStartDate,\r\n      timeZone\r\n    );\r\n\r\n    const availableStartTimes = getAvailableStartTimes(\r\n      intl,\r\n      timeZone,\r\n      bookingStartDate,\r\n      timeSlotsOnSelectedDate\r\n    );\r\n\r\n    const firstAvailableStartTime =\r\n      availableStartTimes.length > 0 && availableStartTimes[0] && availableStartTimes[0].timestamp\r\n        ? availableStartTimes[0].timestamp\r\n        : null;\r\n\r\n    const { startTime, endDate, selectedTimeSlot } = getAllTimeValues(\r\n      intl,\r\n      timeZone,\r\n      timeSlotsOnSelectedDate,\r\n      bookingStartDate,\r\n      bookingStartTime || firstAvailableStartTime,\r\n      bookingEndDate || bookingStartDate\r\n    );\r\n\r\n    const availableEndTimes = getAvailableEndTimes(\r\n      intl,\r\n      timeZone,\r\n      bookingStartTime || startTime,\r\n      bookingEndDate || endDate,\r\n      selectedTimeSlot\r\n    );\r\n\r\n    const isDayBlocked = timeSlotsOnSelectedMonth\r\n      ? day =>\r\n          !timeSlotsOnSelectedMonth.find(timeSlot =>\r\n            isDayMomentInsideRange(\r\n              day,\r\n              timeSlot.attributes.start,\r\n              timeSlot.attributes.end,\r\n              timeZone\r\n            )\r\n          )\r\n      : () => false;\r\n\r\n    const nextBoundary = findNextBoundary(TODAY, 'hour', timeZone);\r\n    let placeholderTime = '08:00';\r\n    try {\r\n      placeholderTime = formatDateIntoPartials(nextBoundary, intl, { timeZone })?.time;\r\n    } catch (error) {\r\n      // No need to handle error\r\n    }\r\n\r\n    const startOfToday = getStartOf(TODAY, 'day', timeZone);\r\n    const bookingEndTimeAvailable = bookingStartDate && (bookingStartTime || startTime);\r\n    return (\r\n      <div className={classes}>\r\n        <div className={css.formRow}>\r\n          <div className={classNames(css.field, css.startDate)}>\r\n            <FieldDateInput\r\n              className={css.fieldDateInput}\r\n              name=\"bookingStartDate\"\r\n              id={formId ? `${formId}.bookingStartDate` : 'bookingStartDate'}\r\n              label={startDateInputProps.label}\r\n              placeholderText={startDateInputProps.placeholderText}\r\n              format={v =>\r\n                v && v.date ? { date: timeOfDayFromTimeZoneToLocal(v.date, timeZone) } : v\r\n              }\r\n              parse={v =>\r\n                v && v.date ? { date: timeOfDayFromLocalToTimeZone(v.date, timeZone) } : v\r\n              }\r\n              initialVisibleMonth={initialVisibleMonth(bookingStartDate || startOfToday, timeZone)}\r\n              isDayBlocked={isDayBlocked}\r\n              onChange={this.onBookingStartDateChange}\r\n              onPrevMonthClick={() => this.onMonthClick(prevMonthFn)}\r\n              onNextMonthClick={() => this.onMonthClick(nextMonthFn)}\r\n              navNext={\r\n                <Next\r\n                  currentMonth={this.state.currentMonth}\r\n                  timeZone={timeZone}\r\n                  dayCountAvailableForBooking={dayCountAvailableForBooking}\r\n                />\r\n              }\r\n              navPrev={<Prev currentMonth={this.state.currentMonth} timeZone={timeZone} />}\r\n              useMobileMargins\r\n              validate={bookingDateRequired(\r\n                intl.formatMessage({ id: 'BookingTimeForm.requiredDate' })\r\n              )}\r\n              onClose={event =>\r\n                this.setState({\r\n                  currentMonth: getStartOf(event?.date ?? TODAY, 'month', this.props.timeZone),\r\n                })\r\n              }\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className={css.formRow}>\r\n          <div className={css.field}>\r\n            <FieldSelect\r\n              name=\"bookingStartTime\"\r\n              id={formId ? `${formId}.bookingStartTime` : 'bookingStartTime'}\r\n              className={bookingStartDate ? css.fieldSelect : css.fieldSelectDisabled}\r\n              selectClassName={bookingStartDate ? css.select : css.selectDisabled}\r\n              label={intl.formatMessage({ id: 'FieldDateAndTimeInput.startTime' })}\r\n              disabled={!bookingStartDate}\r\n              onChange={this.onBookingStartTimeChange}\r\n            >\r\n              {bookingStartDate ? (\r\n                availableStartTimes.map(p => (\r\n                  <option key={p.timeOfDay} value={p.timestamp}>\r\n                    {p.timeOfDay}\r\n                  </option>\r\n                ))\r\n              ) : (\r\n                <option>{placeholderTime}</option>\r\n              )}\r\n            </FieldSelect>\r\n          </div>\r\n\r\n          <div className={bookingStartDate ? css.lineBetween : css.lineBetweenDisabled}>-</div>\r\n\r\n          <div className={css.field}>\r\n            <FieldSelect\r\n              name=\"bookingEndTime\"\r\n              id={formId ? `${formId}.bookingEndTime` : 'bookingEndTime'}\r\n              className={bookingStartDate ? css.fieldSelect : css.fieldSelectDisabled}\r\n              selectClassName={bookingStartDate ? css.select : css.selectDisabled}\r\n              label={intl.formatMessage({ id: 'FieldDateAndTimeInput.endTime' })}\r\n              disabled={!bookingEndTimeAvailable}\r\n            >\r\n              {bookingEndTimeAvailable ? (\r\n                availableEndTimes.map(p => (\r\n                  <option key={p.timeOfDay === '00:00' ? '24:00' : p.timeOfDay} value={p.timestamp}>\r\n                    {p.timeOfDay === '00:00' ? '24:00' : p.timeOfDay}\r\n                  </option>\r\n                ))\r\n              ) : (\r\n                <option>{placeholderTime}</option>\r\n              )}\r\n            </FieldSelect>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFieldDateAndTimeInput.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  startDateInputProps: null,\r\n  endDateInputProps: null,\r\n  startTimeInputProps: null,\r\n  endTimeInputProps: null,\r\n  listingId: null,\r\n  monthlyTimeSlots: null,\r\n  timeZone: null,\r\n};\r\n\r\nFieldDateAndTimeInput.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  formId: string,\r\n  startDateInputProps: object,\r\n  endDateInputProps: object,\r\n  startTimeInputProps: object,\r\n  endTimeInputProps: object,\r\n  form: object.isRequired,\r\n  values: object.isRequired,\r\n  listingId: propTypes.uuid,\r\n  monthlyTimeSlots: object,\r\n  onFetchTimeSlots: func.isRequired,\r\n  timeZone: string,\r\n  dayCountAvailableForBooking: number,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nexport default FieldDateAndTimeInput;\r\n","/**\r\n * Booking breakdown estimation\r\n *\r\n * Transactions have payment information that can be shown with the\r\n * OrderBreakdown component. However, when selecting booking\r\n * details, there is no transaction object present and we have to\r\n * estimate the breakdown of the transaction without data from the\r\n * API.\r\n *\r\n * If the payment process of a customized marketplace is something\r\n * else than simply daily or nightly bookings, the estimation will\r\n * most likely need some changes.\r\n *\r\n * To customize the estimation, first change the BookingDatesForm to\r\n * collect all booking information from the user (in addition to the\r\n * default date pickers), and provide that data to the\r\n * EstimatedBreakdownMaybe components. You can then make customization\r\n * within this file to create a fake transaction object that\r\n * calculates the breakdown information correctly according to the\r\n * process.\r\n *\r\n * In the future, the optimal scenario would be to use the same\r\n * transactions.initiateSpeculative API endpoint as the CheckoutPage\r\n * is using to get the breakdown information from the API, but\r\n * currently the API doesn't support that for logged out users, and we\r\n * are forced to estimate the information here.\r\n */\r\nimport React from 'react';\r\nimport Decimal from 'decimal.js';\r\n\r\nimport { types as sdkTypes } from '../../util/sdkLoader';\r\nimport { FormattedMessage } from '../../util/reactIntl';\r\nimport {\r\n  DATE_TYPE_DATE,\r\n  LINE_ITEM_DAY,\r\n  LINE_ITEM_NIGHT,\r\n  LINE_ITEM_HOUR,\r\n  LISTING_UNIT_TYPES,\r\n  DATE_TYPE_DATETIME,\r\n} from '../../util/types';\r\nimport { unitDivisor, convertMoneyToNumber, convertUnitToSubUnit } from '../../util/currency';\r\nimport { getProcess, TX_TRANSITION_ACTOR_CUSTOMER } from '../../transactions/transaction';\r\n\r\nimport { OrderBreakdown } from '../../components';\r\n\r\nimport css from './OrderPanel.module.css';\r\n\r\nconst { Money, UUID } = sdkTypes;\r\n\r\nconst estimatedTotalPrice = (lineItems, marketplaceCurrency) => {\r\n  const numericTotalPrice = lineItems.reduce((sum, lineItem) => {\r\n    const numericPrice = convertMoneyToNumber(lineItem.lineTotal);\r\n    return new Decimal(numericPrice).add(sum);\r\n  }, new Decimal(0));\r\n\r\n  // All the lineItems should have same currency so we can use the first one to check that\r\n  // In case there are no lineItems we use currency from config.js as default\r\n  const currency =\r\n    lineItems[0] && lineItems[0].unitPrice ? lineItems[0].unitPrice.currency : marketplaceCurrency;\r\n\r\n  return new Money(\r\n    convertUnitToSubUnit(numericTotalPrice.toNumber(), unitDivisor(currency)),\r\n    currency\r\n  );\r\n};\r\n\r\nconst estimatedBooking = (bookingStart, bookingEnd, lineItemUnitType, timeZone = 'Etc/UTC') => {\r\n  const duration = { start: bookingStart, end: bookingEnd };\r\n\r\n  return {\r\n    id: new UUID('estimated-booking'),\r\n    type: 'booking',\r\n    attributes: {\r\n      ...duration,\r\n    },\r\n  };\r\n};\r\n\r\n// When we cannot speculatively initiate a transaction (i.e. logged\r\n// out), we must estimate the transaction for booking breakdown. This function creates\r\n// an estimated transaction object for that use case.\r\n//\r\n// We need to use the Template's backend to calculate the correct line items through thransactionLineItems\r\n// endpoint so that they can be passed to this estimated transaction.\r\nconst estimatedCustomerTransaction = (\r\n  lineItems,\r\n  bookingStart,\r\n  bookingEnd,\r\n  lineItemUnitType,\r\n  timeZone,\r\n  process,\r\n  processName,\r\n  marketplaceCurrency\r\n) => {\r\n  const transitions = process?.transitions;\r\n  const now = new Date();\r\n  const customerLineItems = lineItems.filter(item => item.includeFor.includes('customer'));\r\n  const providerLineItems = lineItems.filter(item => item.includeFor.includes('provider'));\r\n  const payinTotal = estimatedTotalPrice(customerLineItems, marketplaceCurrency);\r\n  const payoutTotal = estimatedTotalPrice(providerLineItems, marketplaceCurrency);\r\n\r\n  const bookingMaybe =\r\n    bookingStart && bookingEnd\r\n      ? { booking: estimatedBooking(bookingStart, bookingEnd, lineItemUnitType, timeZone) }\r\n      : {};\r\n\r\n  return {\r\n    id: new UUID('estimated-transaction'),\r\n    type: 'transaction',\r\n    attributes: {\r\n      createdAt: now,\r\n      processName,\r\n      lastTransitionedAt: now,\r\n      lastTransition: transitions.REQUEST_PAYMENT,\r\n      payinTotal,\r\n      payoutTotal,\r\n      lineItems: customerLineItems,\r\n      transitions: [\r\n        {\r\n          createdAt: now,\r\n          by: TX_TRANSITION_ACTOR_CUSTOMER,\r\n          transition: transitions.REQUEST_PAYMENT,\r\n        },\r\n      ],\r\n    },\r\n    ...bookingMaybe,\r\n  };\r\n};\r\n\r\nconst EstimatedCustomerBreakdownMaybe = props => {\r\n  const { breakdownData = {}, lineItems, timeZone, currency, marketplaceName, processName } = props;\r\n  const { startDate, endDate } = breakdownData;\r\n\r\n  let process = null;\r\n  try {\r\n    process = getProcess(processName);\r\n  } catch (e) {\r\n    return (\r\n      <div className={css.error}>\r\n        <FormattedMessage id=\"OrderPanel.unknownTransactionProcess\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const unitLineItem = lineItems?.find(\r\n    item => LISTING_UNIT_TYPES.includes(item.code) && !item.reversal\r\n  );\r\n  const lineItemUnitType = unitLineItem?.code;\r\n  const shouldHaveBooking = [LINE_ITEM_DAY, LINE_ITEM_NIGHT].includes(lineItemUnitType);\r\n  const hasLineItems = lineItems && lineItems.length > 0;\r\n  const hasRequiredBookingData = !shouldHaveBooking || (startDate && endDate);\r\n  const dateType = lineItemUnitType === LINE_ITEM_HOUR ? DATE_TYPE_DATETIME : DATE_TYPE_DATE;\r\n  const tx =\r\n    hasLineItems && hasRequiredBookingData\r\n      ? estimatedCustomerTransaction(\r\n          lineItems,\r\n          startDate,\r\n          endDate,\r\n          lineItemUnitType,\r\n          timeZone,\r\n          process,\r\n          processName,\r\n          currency\r\n        )\r\n      : null;\r\n\r\n  return tx ? (\r\n    <OrderBreakdown\r\n      className={css.receipt}\r\n      userRole=\"customer\"\r\n      transaction={tx}\r\n      booking={tx.booking}\r\n      dateType={dateType}\r\n      timeZone={timeZone}\r\n      currency={currency}\r\n      marketplaceName={marketplaceName}\r\n    />\r\n  ) : null;\r\n};\r\n\r\nexport default EstimatedCustomerBreakdownMaybe;\r\n"],"names":["TODAY","Date","nextMonthFn","currentMoment","timeZone","getStartOf","prevMonthFn","endOfRange","date","dayCountAvailableForBooking","getAvailableStartTimes","intl","bookingStart","timeSlotsOnSelectedDate","length","bookingStartDate","reduce","availableHours","t","startDate","attributes","start","endDate","end","nextDate","startLimit","isDateSameOrAfter","endLimit","hours","getStartHours","concat","getAvailableEndTimes","bookingStartTime","bookingEndDate","selectedTimeSlot","bookingStartTimeAsDate","timestampToDate","dayAfterBookingEnd","dayAfterBookingStart","startOfEndDay","isSameDate","getEndHours","getTimeSlots","timeSlots","filter","isInRange","getAllTimeValues","selectedStartTime","selectedEndDate","startTimes","startTime","timestamp","toString","startTimeAsDate","findNextBoundary","getTime","find","endTimes","endTime","getMonthlyTimeSlots","monthlyTimeSlots","monthId","monthIdString","Object","keys","PrevIcon","props","React","IconArrowHead","assign","direction","rootClassName","css","NextIcon","Next","currentMonth","nextMonthDate","Prev","prevMonthDate","currentMonthDate","FieldDateAndTimeInput","Component","constructor","super","onBookingStartDateChange","value","form","this","batch","change","setState","timeOfDayFromLocalToTimeZone","state","onBookingStartTimeChange","values","onBookingEndDateChange","fetchMonthData","bind","onMonthClick","isOutsideRange","listingId","onFetchTimeSlots","endOfRangeDate","monthFn","onMonthChanged","prevState","currentMonthData","fetchTimeSlotsError","day","localizedDay","inclusiveEnd","render","className","formId","startDateInputProps","classes","classNames","timeSlotsOnSelectedMonth","availableStartTimes","firstAvailableStartTime","availableEndTimes","isDayBlocked","timeSlot","isDayMomentInsideRange","nextBoundary","placeholderTime","_formatDateIntoPartia","formatDateIntoPartials","time","error","startOfToday","bookingEndTimeAvailable","FieldDateInput","name","id","label","placeholderText","format","v","timeOfDayFromTimeZoneToLocal","parse","initialVisibleMonth","onChange","onPrevMonthClick","onNextMonthClick","navNext","navPrev","useMobileMargins","validate","bookingDateRequired","formatMessage","onClose","event","_event$date","FieldSelect","selectClassName","disabled","map","p","key","timeOfDay","defaultProps","endDateInputProps","startTimeInputProps","endTimeInputProps","Money","UUID","sdkTypes","estimatedTotalPrice","lineItems","marketplaceCurrency","numericTotalPrice","sum","lineItem","numericPrice","convertMoneyToNumber","lineTotal","Decimal","add","currency","unitPrice","convertUnitToSubUnit","toNumber","unitDivisor","estimatedBooking","bookingEnd","lineItemUnitType","duration","type","breakdownData","marketplaceName","processName","process","getProcess","e","FormattedMessage","unitLineItem","item","LISTING_UNIT_TYPES","includes","code","reversal","shouldHaveBooking","LINE_ITEM_DAY","LINE_ITEM_NIGHT","hasLineItems","hasRequiredBookingData","dateType","LINE_ITEM_HOUR","DATE_TYPE_DATETIME","DATE_TYPE_DATE","tx","estimatedCustomerTransaction","transitions","now","customerLineItems","includeFor","providerLineItems","payinTotal","payoutTotal","bookingMaybe","booking","createdAt","lastTransitionedAt","lastTransition","REQUEST_PAYMENT","by","TX_TRANSITION_ACTOR_CUSTOMER","transition","OrderBreakdown","receipt","userRole","transaction"],"sourceRoot":""}