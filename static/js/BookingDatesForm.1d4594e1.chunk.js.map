{"version":3,"file":"static/js/BookingDatesForm.1d4594e1.chunk.js","mappings":"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","sources":["webpack://app/./src/components/OrderPanel/BookingDatesForm/BookingDatesForm.module.css?39b3","components/OrderPanel/BookingDatesForm/BookingDatesForm.js","components/OrderPanel/EstimatedCustomerBreakdownMaybe.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"BookingDatesForm_root__It1h9\",\"bookingBreakdownTitle\":\"BookingDatesForm_bookingBreakdownTitle__jquSB\",\"totalDivider\":\"BookingDatesForm_totalDivider__DT8iL\",\"bookingDates\":\"BookingDatesForm_bookingDates__uThZd\",\"priceBreakdownContainer\":\"BookingDatesForm_priceBreakdownContainer__6ZoJr\",\"error\":\"BookingDatesForm_error__h55o-\",\"sideBarError\":\"BookingDatesForm_sideBarError__BqsBi h4\",\"finePrint\":\"BookingDatesForm_finePrint__EzN6H marketplaceTinyFontStyles\",\"submitButton\":\"BookingDatesForm_submitButton__KUzZT\",\"arrowIcon\":\"BookingDatesForm_arrowIcon__KtzsU\"};","import React, { useState, useEffect } from 'react';\r\nimport { array, bool, func, number, object, string } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage, intlShape, injectIntl } from '../../../util/reactIntl';\r\nimport { required, bookingDatesRequired, composeValidators } from '../../../util/validators';\r\nimport {\r\n  START_DATE,\r\n  END_DATE,\r\n  getStartOf,\r\n  addTime,\r\n  isSameDay,\r\n  isDateSameOrAfter,\r\n  isInRange,\r\n  timeOfDayFromLocalToTimeZone,\r\n  timeOfDayFromTimeZoneToLocal,\r\n  monthIdString,\r\n  initialVisibleMonth,\r\n} from '../../../util/dates';\r\nimport { LINE_ITEM_DAY, LINE_ITEM_NIGHT, TIME_SLOT_TIME, propTypes } from '../../../util/types';\r\nimport { BOOKING_PROCESS_NAME } from '../../../transactions/transaction';\r\n\r\nimport { Form, IconArrowHead, PrimaryButton, FieldDateRangeInput, H6 } from '../../../components';\r\n\r\nimport EstimatedCustomerBreakdownMaybe from '../EstimatedCustomerBreakdownMaybe';\r\n\r\nimport css from './BookingDatesForm.module.css';\r\n\r\nconst TODAY = new Date();\r\n\r\nconst nextMonthFn = (currentMoment, timeZone, offset = 1) =>\r\n  getStartOf(currentMoment, 'month', timeZone, offset, 'months');\r\nconst prevMonthFn = (currentMoment, timeZone, offset = 1) =>\r\n  getStartOf(currentMoment, 'month', timeZone, -1 * offset, 'months');\r\nconst endOfRange = (date, dayCountAvailableForBooking, timeZone) =>\r\n  getStartOf(date, 'day', timeZone, dayCountAvailableForBooking - 1, 'days');\r\n\r\n/**\r\n * Return a boolean indicating if given date can be found in an array\r\n * of tile slots (start dates).\r\n */\r\nconst timeSlotsContain = (timeSlots, date, timeZone) => {\r\n  const foundIndex = timeSlots.findIndex(slot =>\r\n    isInRange(date, slot.attributes.start, slot.attributes.end, 'hour', timeZone)\r\n  );\r\n  return foundIndex > -1;\r\n};\r\n\r\nconst pickMonthlyTimeSlots = (monthlyTimeSlots, date, timeZone) => {\r\n  const monthId = monthIdString(date, timeZone);\r\n  return monthlyTimeSlots?.[monthId]?.timeSlots || [];\r\n};\r\n\r\n/**\r\n * Find first blocked date between two dates.\r\n * If none is found, null is returned.\r\n *\r\n * @param {Object} monthlyTimeSlots propTypes.timeSlot objects\r\n * @param {Moment} startDate start date, exclusive\r\n * @param {Moment} endDate end date, exclusive\r\n * @param {String} timeZone time zone id\r\n */\r\nconst firstBlockedBetween = (monthlyTimeSlots, startDate, endDate, timeZone) => {\r\n  const firstDate = getStartOf(startDate, 'day', timeZone, 1, 'days');\r\n  if (isSameDay(firstDate, endDate, timeZone)) {\r\n    return null;\r\n  }\r\n\r\n  const timeSlots = pickMonthlyTimeSlots(monthlyTimeSlots, firstDate, timeZone);\r\n  const contains = timeSlotsContain(timeSlots, firstDate, timeZone);\r\n  return contains ? firstBlockedBetween(monthlyTimeSlots, firstDate, endDate, timeZone) : firstDate;\r\n};\r\n\r\n/**\r\n * Find last blocked date between two dates.\r\n * If none is found, null is returned.\r\n *\r\n * @param {Array} timeSlots propTypes.timeSlot objects\r\n * @param {Moment} startDate start date, exclusive\r\n * @param {Moment} endDate end date, exclusive\r\n * @param {String} timeZone time zone id\r\n */\r\nconst lastBlockedBetween = (monthlyTimeSlots, startDate, endDate, timeZone) => {\r\n  const previousDate = getStartOf(endDate, 'day', timeZone, -1, 'days');\r\n  if (isSameDay(previousDate, startDate, timeZone)) {\r\n    return null;\r\n  }\r\n\r\n  const timeSlots = pickMonthlyTimeSlots(monthlyTimeSlots, previousDate, timeZone);\r\n  return timeSlotsContain(timeSlots, previousDate, timeZone)\r\n    ? lastBlockedBetween(monthlyTimeSlots, startDate, previousDate, timeZone)\r\n    : previousDate;\r\n};\r\n\r\n/**\r\n * Check if a blocked date can be found between two dates.\r\n *\r\n * @param {Object} timeSlots propTypes.timeSlot objects\r\n * @param {String} timeZone time zone id\r\n * @param {Moment} startDate start date, exclusive\r\n * @param {Moment} endDate end date, exclusive\r\n */\r\nconst isBlockedBetween = (monthlyTimeSlots, timeZone) => (startDate, endDate) => {\r\n  const startInListingTZ = getStartOf(\r\n    timeOfDayFromLocalToTimeZone(startDate, timeZone),\r\n    'day',\r\n    timeZone\r\n  );\r\n  const endInListingTZ = getStartOf(\r\n    timeOfDayFromLocalToTimeZone(endDate, timeZone),\r\n    'day',\r\n    timeZone\r\n  );\r\n  return !!firstBlockedBetween(monthlyTimeSlots, startInListingTZ, endInListingTZ, timeZone);\r\n};\r\n\r\nconst isStartDateSelected = (timeSlots, startDate, endDate, focusedInput) => {\r\n  return (\r\n    timeSlots && startDate && (!endDate || focusedInput === END_DATE) && focusedInput !== START_DATE\r\n  );\r\n};\r\n\r\nconst endDateToPickerDate = (unitType, endDate, timeZone) => {\r\n  const isValid = endDate instanceof Date;\r\n  const isDaily = unitType === LINE_ITEM_DAY;\r\n\r\n  if (!isValid) {\r\n    return null;\r\n  } else if (isDaily) {\r\n    // API end dates are exlusive, so we need to shift them with daily\r\n    // booking.\r\n    return getStartOf(endDate, 'day', timeZone, -1, 'days');\r\n  } else {\r\n    return endDate;\r\n  }\r\n};\r\n\r\n/**\r\n * Returns an isOutsideRange function that can be passed to\r\n * a react-dates DateRangePicker component.\r\n */\r\nconst isOutsideRangeFn = (\r\n  monthlyTimeSlots,\r\n  startDate,\r\n  endDate,\r\n  lineItemUnitType,\r\n  dayCountAvailableForBooking,\r\n  timeZone\r\n) => focusedInput => {\r\n  const endOfAvailableRange = dayCountAvailableForBooking - 1;\r\n  const endOfAvailableRangeDate = getStartOf(TODAY, 'day', timeZone, endOfAvailableRange, 'days');\r\n  const outOfBookableDate = getStartOf(TODAY, 'day', timeZone, endOfAvailableRange + 1, 'days');\r\n  const startOfStartDay = getStartOf(startDate, 'day', timeZone);\r\n\r\n  // start date selected, end date missing\r\n  const startDateSelected = isStartDateSelected(monthlyTimeSlots, startDate, endDate, focusedInput);\r\n  const endOfBookableRange = startDateSelected\r\n    ? firstBlockedBetween(monthlyTimeSlots, startDate, outOfBookableDate, timeZone)\r\n    : null;\r\n\r\n  if (endOfBookableRange) {\r\n    // end the range so that the booking can end at latest on\r\n    // nightly booking: the day the next booking starts\r\n    // daily booking: the day before the next booking starts\r\n    return day => {\r\n      const timeOfDay = timeOfDayFromLocalToTimeZone(day, timeZone);\r\n      const dayInListingTZ = getStartOf(timeOfDay, 'day', timeZone);\r\n      const lastDayToEndBooking = endDateToPickerDate(\r\n        lineItemUnitType,\r\n        endOfBookableRange,\r\n        timeZone\r\n      );\r\n      return (\r\n        !isDateSameOrAfter(dayInListingTZ, startOfStartDay) ||\r\n        !isDateSameOrAfter(lastDayToEndBooking, dayInListingTZ)\r\n      );\r\n    };\r\n  }\r\n\r\n  // end date selected, start date missing\r\n  // -> limit the earliest start date for the booking so that it\r\n  // needs to be after the previous booked date\r\n  const endDateSelected = monthlyTimeSlots && endDate && !startDate && focusedInput !== END_DATE;\r\n  const previousBookedDate = endDateSelected\r\n    ? lastBlockedBetween(monthlyTimeSlots, TODAY, endDate, timeZone)\r\n    : null;\r\n\r\n  if (previousBookedDate) {\r\n    return day => {\r\n      const timeOfDay = timeOfDayFromLocalToTimeZone(day, timeZone);\r\n      const dayInListingTZ = getStartOf(timeOfDay, 'day', timeZone);\r\n      const firstDayToStartBooking = getStartOf(previousBookedDate, 'day', timeZone, 1, 'days');\r\n      return (\r\n        !isDateSameOrAfter(dayInListingTZ, firstDayToStartBooking) ||\r\n        !isDateSameOrAfter(endOfAvailableRangeDate, dayInListingTZ)\r\n      );\r\n    };\r\n  }\r\n\r\n  // standard isOutsideRange function\r\n  return day => {\r\n    const timeOfDay = timeOfDayFromLocalToTimeZone(day, timeZone);\r\n    const dayInListingTZ = getStartOf(timeOfDay, 'day', timeZone);\r\n    return (\r\n      !isDateSameOrAfter(dayInListingTZ, TODAY) ||\r\n      !isDateSameOrAfter(endOfAvailableRangeDate, dayInListingTZ)\r\n    );\r\n  };\r\n};\r\n\r\n// Checks if time slot (propTypes.timeSlot) start time equals a day (moment)\r\nconst timeSlotEqualsDay = (timeSlot, day, timeZone) => {\r\n  const isTimeBased = timeSlot?.attributes?.type === TIME_SLOT_TIME;\r\n  return isTimeBased\r\n    ? isInRange(day, timeSlot.attributes.start, timeSlot.attributes.end, undefined, timeZone)\r\n    : false;\r\n};\r\n\r\n/**\r\n * Returns an isDayBlocked function that can be passed to\r\n * a react-dates DateRangePicker component.\r\n */\r\nconst isDayBlockedFn = (\r\n  monthlyTimeSlots,\r\n  startDate,\r\n  endDate,\r\n  unitType,\r\n  dayCountAvailableForBooking,\r\n  timeZone\r\n) => focusedInput => {\r\n  const endOfAvailableRange = dayCountAvailableForBooking - 1;\r\n  const outOfBookableDate = getStartOf(TODAY, 'day', timeZone, endOfAvailableRange + 1, 'days');\r\n  const timeSlotsOnSelectedMonth = pickMonthlyTimeSlots(monthlyTimeSlots, startDate, timeZone);\r\n\r\n  // Start date selected/focused, end date missing\r\n  const startDateSelected = isStartDateSelected(\r\n    timeSlotsOnSelectedMonth,\r\n    startDate,\r\n    endDate,\r\n    focusedInput\r\n  );\r\n\r\n  // Find the end of bookable range after a start date\r\n  const endOfBookableRange = startDateSelected\r\n    ? firstBlockedBetween(monthlyTimeSlots, startDate, outOfBookableDate, timeZone)\r\n    : null;\r\n\r\n  // end date is focused but no dates are selected\r\n  const selectingEndDate =\r\n    timeSlotsOnSelectedMonth &&\r\n    !startDate &&\r\n    !endDate &&\r\n    focusedInput === END_DATE &&\r\n    unitType === LINE_ITEM_NIGHT;\r\n\r\n  if (selectingEndDate) {\r\n    // if end date is being selected first, block the day after a booked date\r\n    // (as a booking can end on the day the following booking starts)\r\n    return day => {\r\n      const timeOfDay = timeOfDayFromLocalToTimeZone(day, timeZone);\r\n      const dayInListingTZ = getStartOf(timeOfDay, 'day', timeZone);\r\n      const timeSlots = pickMonthlyTimeSlots(monthlyTimeSlots, dayInListingTZ, timeZone);\r\n      return !timeSlots.find(timeSlot => timeSlotEqualsDay(timeSlot, dayInListingTZ));\r\n    };\r\n  } else if (endOfBookableRange || !timeSlotsOnSelectedMonth) {\r\n    // a next bookable range is found or time slots are not provided\r\n    // -> booking range handles blocking dates\r\n    return () => false;\r\n  } else {\r\n    // otherwise return standard timeslots check\r\n    return day => {\r\n      const timeOfDay = timeOfDayFromLocalToTimeZone(day, timeZone);\r\n      const dayInListingTZ = getStartOf(timeOfDay, 'day', timeZone);\r\n      const timeSlots = pickMonthlyTimeSlots(monthlyTimeSlots, dayInListingTZ, timeZone);\r\n      return !timeSlots.find(timeSlot => timeSlotEqualsDay(timeSlot, dayInListingTZ));\r\n    };\r\n  }\r\n};\r\n\r\nconst fetchMonthData = (\r\n  date,\r\n  listingId,\r\n  dayCountAvailableForBooking,\r\n  timeZone,\r\n  onFetchTimeSlots\r\n) => {\r\n  const endOfRangeDate = endOfRange(TODAY, dayCountAvailableForBooking, timeZone);\r\n\r\n  // Don't fetch timeSlots for past months or too far in the future\r\n  if (isInRange(date, TODAY, endOfRangeDate)) {\r\n    // Use \"today\", if the first day of given month is in the past\r\n    const start = isDateSameOrAfter(TODAY, date) ? TODAY : date;\r\n\r\n    // Use endOfRangeDate, if the first day of the next month is too far in the future\r\n    const nextMonthDate = nextMonthFn(date, timeZone);\r\n    const end = isDateSameOrAfter(nextMonthDate, endOfRangeDate)\r\n      ? getStartOf(endOfRangeDate, 'day', timeZone)\r\n      : nextMonthDate;\r\n\r\n    // Fetch time slots for given time range\r\n    onFetchTimeSlots(listingId, start, end, timeZone);\r\n  }\r\n};\r\n\r\nconst handleMonthClick = (\r\n  currentMonth,\r\n  monthlyTimeSlots,\r\n  fetchMonthData,\r\n  dayCountAvailableForBooking,\r\n  timeZone,\r\n  listingId,\r\n  onFetchTimeSlots\r\n) => monthFn => {\r\n  // Callback function after month has been updated.\r\n  // react-dates component has next and previous months ready (but inivisible).\r\n  // we try to populate those invisible months before user advances there.\r\n  fetchMonthData(\r\n    monthFn(currentMonth, timeZone, 2),\r\n    listingId,\r\n    dayCountAvailableForBooking,\r\n    timeZone,\r\n    onFetchTimeSlots\r\n  );\r\n\r\n  // If previous fetch for month data failed, try again.\r\n  const monthId = monthIdString(currentMonth, timeZone);\r\n  const currentMonthData = monthlyTimeSlots[monthId];\r\n  if (currentMonthData && currentMonthData.fetchTimeSlotsError) {\r\n    fetchMonthData(\r\n      currentMonth,\r\n      listingId,\r\n      dayCountAvailableForBooking,\r\n      timeZone,\r\n      onFetchTimeSlots\r\n    );\r\n  }\r\n};\r\n\r\n// In case start or end date for the booking is missing\r\n// focus on that input, otherwise continue with the\r\n// default handleSubmit function.\r\nconst handleFormSubmit = (setFocusedInput, onSubmit) => e => {\r\n  const { startDate, endDate } = e.bookingDates || {};\r\n  if (!startDate) {\r\n    e.preventDefault();\r\n    setFocusedInput(START_DATE);\r\n  } else if (!endDate) {\r\n    e.preventDefault();\r\n    setFocusedInput(END_DATE);\r\n  } else {\r\n    onSubmit(e);\r\n  }\r\n};\r\n\r\n// Function that can be passed to nested components\r\n// so that they can notify this component when the\r\n// focused input changes.\r\nconst handleFocusedInputChange = setFocusedInput => focusedInput => {\r\n  setFocusedInput(focusedInput);\r\n};\r\n\r\n// When the values of the form are updated we need to fetch\r\n// lineItems from this Template's backend for the EstimatedTransactionMaybe\r\n// In case you add more fields to the form, make sure you add\r\n// the values here to the orderData object.\r\nconst handleFormSpyChange = (\r\n  listingId,\r\n  isOwnListing,\r\n  fetchLineItemsInProgress,\r\n  onFetchTransactionLineItems\r\n) => formValues => {\r\n  const { startDate, endDate } =\r\n    formValues.values && formValues.values.bookingDates ? formValues.values.bookingDates : {};\r\n\r\n  if (startDate && endDate && !fetchLineItemsInProgress) {\r\n    onFetchTransactionLineItems({\r\n      orderData: {\r\n        bookingStart: startDate,\r\n        bookingEnd: endDate,\r\n      },\r\n      listingId,\r\n      isOwnListing,\r\n    });\r\n  }\r\n};\r\n\r\n// IconArrowHead component might not be defined if exposed directly to the file.\r\n// This component is called before IconArrowHead component in components/index.js\r\nconst PrevIcon = props => (\r\n  <IconArrowHead {...props} direction=\"left\" rootClassName={css.arrowIcon} />\r\n);\r\nconst NextIcon = props => (\r\n  <IconArrowHead {...props} direction=\"right\" rootClassName={css.arrowIcon} />\r\n);\r\n\r\nconst Next = props => {\r\n  const { currentMonth, dayCountAvailableForBooking, timeZone } = props;\r\n  const nextMonthDate = nextMonthFn(currentMonth, timeZone);\r\n\r\n  return isDateSameOrAfter(\r\n    nextMonthDate,\r\n    endOfRange(TODAY, dayCountAvailableForBooking, timeZone)\r\n  ) ? null : (\r\n    <NextIcon />\r\n  );\r\n};\r\nconst Prev = props => {\r\n  const { currentMonth, timeZone } = props;\r\n  const prevMonthDate = prevMonthFn(currentMonth, timeZone);\r\n  const currentMonthDate = getStartOf(TODAY, 'month', timeZone);\r\n\r\n  return isDateSameOrAfter(prevMonthDate, currentMonthDate) ? <PrevIcon /> : null;\r\n};\r\n\r\nexport const BookingDatesFormComponent = props => {\r\n  const [focusedInput, setFocusedInput] = useState(null);\r\n  const [currentMonth, setCurrentMonth] = useState(getStartOf(TODAY, 'month', props.timeZone));\r\n\r\n  useEffect(() => {\r\n    // Call onMonthChanged function if it has been passed in among props.\r\n    if (props.onMonthChanged) {\r\n      props.onMonthChanged(monthId);\r\n    }\r\n  }, [currentMonth]);\r\n\r\n  const {\r\n    rootClassName,\r\n    className,\r\n    price: unitPrice,\r\n    listingId,\r\n    isOwnListing,\r\n    fetchLineItemsInProgress,\r\n    onFetchTransactionLineItems,\r\n    onSubmit,\r\n    timeZone,\r\n    dayCountAvailableForBooking,\r\n    marketplaceName,\r\n    payoutDetailsWarning,\r\n    ...rest\r\n  } = props;\r\n  const classes = classNames(rootClassName || css.root, className);\r\n\r\n  const onFormSubmit = handleFormSubmit(setFocusedInput, onSubmit);\r\n  const onFocusedInputChange = handleFocusedInputChange(setFocusedInput);\r\n  const onFormSpyChange = handleFormSpyChange(\r\n    listingId,\r\n    isOwnListing,\r\n    fetchLineItemsInProgress,\r\n    onFetchTransactionLineItems\r\n  );\r\n  return (\r\n    <FinalForm\r\n      {...rest}\r\n      unitPrice={unitPrice}\r\n      onSubmit={onFormSubmit}\r\n      render={fieldRenderProps => {\r\n        const {\r\n          endDatePlaceholder,\r\n          startDatePlaceholder,\r\n          formId,\r\n          handleSubmit,\r\n          intl,\r\n          lineItemUnitType,\r\n          values,\r\n          monthlyTimeSlots,\r\n          lineItems,\r\n          fetchLineItemsError,\r\n          onFetchTimeSlots,\r\n        } = fieldRenderProps;\r\n        const { startDate, endDate } = values && values.bookingDates ? values.bookingDates : {};\r\n\r\n        const startDateErrorMessage = intl.formatMessage({\r\n          id: 'FieldDateRangeInput.invalidStartDate',\r\n        });\r\n        const endDateErrorMessage = intl.formatMessage({\r\n          id: 'FieldDateRangeInput.invalidEndDate',\r\n        });\r\n\r\n        // This is the place to collect breakdown estimation data.\r\n        // Note: lineItems are calculated and fetched from this Template's backend\r\n        // so we need to pass only booking data that is needed otherwise\r\n        // If you have added new fields to the form that will affect to pricing,\r\n        // you need to add the values to handleOnChange function\r\n        const breakdownData =\r\n          startDate && endDate\r\n            ? {\r\n                startDate,\r\n                endDate,\r\n              }\r\n            : null;\r\n\r\n        const showEstimatedBreakdown =\r\n          breakdownData && lineItems && !fetchLineItemsInProgress && !fetchLineItemsError;\r\n\r\n        const dateFormatOptions = {\r\n          weekday: 'short',\r\n          month: 'short',\r\n          day: 'numeric',\r\n        };\r\n\r\n        const startOfToday = getStartOf(TODAY, 'day', timeZone);\r\n        const tomorrow = addTime(startOfToday, 1, 'days');\r\n        const startDatePlaceholderText =\r\n          startDatePlaceholder || intl.formatDate(startOfToday, dateFormatOptions);\r\n        const endDatePlaceholderText =\r\n          endDatePlaceholder || intl.formatDate(tomorrow, dateFormatOptions);\r\n\r\n        const onMonthClick = handleMonthClick(\r\n          currentMonth,\r\n          monthlyTimeSlots,\r\n          fetchMonthData,\r\n          dayCountAvailableForBooking,\r\n          timeZone,\r\n          listingId,\r\n          onFetchTimeSlots\r\n        );\r\n        const isDayBlocked = isDayBlockedFn(\r\n          monthlyTimeSlots,\r\n          startDate,\r\n          endDate,\r\n          lineItemUnitType,\r\n          dayCountAvailableForBooking,\r\n          timeZone\r\n        );\r\n        const isOutsideRange = isOutsideRangeFn(\r\n          monthlyTimeSlots,\r\n          startDate,\r\n          endDate,\r\n          lineItemUnitType,\r\n          dayCountAvailableForBooking,\r\n          timeZone\r\n        );\r\n\r\n        return (\r\n          <Form onSubmit={handleSubmit} className={classes} enforcePagePreloadFor=\"CheckoutPage\">\r\n            <FormSpy subscription={{ values: true }} onChange={onFormSpyChange} />\r\n            <FieldDateRangeInput\r\n              className={css.bookingDates}\r\n              name=\"bookingDates\"\r\n              isDaily={lineItemUnitType === LINE_ITEM_DAY}\r\n              startDateId={`${formId}.bookingStartDate`}\r\n              startDateLabel={intl.formatMessage({\r\n                id: 'BookingDatesForm.bookingStartTitle',\r\n              })}\r\n              startDatePlaceholderText={startDatePlaceholderText}\r\n              endDateId={`${formId}.bookingEndDate`}\r\n              endDateLabel={intl.formatMessage({\r\n                id: 'BookingDatesForm.bookingEndTitle',\r\n              })}\r\n              endDatePlaceholderText={endDatePlaceholderText}\r\n              focusedInput={focusedInput}\r\n              onFocusedInputChange={onFocusedInputChange}\r\n              format={v => {\r\n                const { startDate, endDate } = v || {};\r\n                // Format the Final Form field's value for the DateRangeInput\r\n                // DateRangeInput operates on local time zone, but the form uses listing's time zone\r\n                const formattedStart = startDate\r\n                  ? timeOfDayFromTimeZoneToLocal(startDate, timeZone)\r\n                  : startDate;\r\n                const formattedEnd = endDate\r\n                  ? timeOfDayFromTimeZoneToLocal(endDate, timeZone)\r\n                  : endDate;\r\n                return v ? { startDate: formattedStart, endDate: formattedEnd } : v;\r\n              }}\r\n              parse={v => {\r\n                const { startDate, endDate } = v || {};\r\n                // Parse the DateRangeInput's value (local noon) for the Final Form\r\n                // The form expects listing's time zone and start of day aka 00:00\r\n                const parsedStart = startDate\r\n                  ? getStartOf(timeOfDayFromLocalToTimeZone(startDate, timeZone), 'day', timeZone)\r\n                  : startDate;\r\n                const parsedEnd = endDate\r\n                  ? getStartOf(timeOfDayFromLocalToTimeZone(endDate, timeZone), 'day', timeZone)\r\n                  : endDate;\r\n                return v ? { startDate: parsedStart, endDate: parsedEnd } : v;\r\n              }}\r\n              useMobileMargins\r\n              validate={composeValidators(\r\n                required(\r\n                  intl.formatMessage({\r\n                    id: 'BookingDatesForm.requiredDate',\r\n                  })\r\n                ),\r\n                bookingDatesRequired(startDateErrorMessage, endDateErrorMessage)\r\n              )}\r\n              initialVisibleMonth={initialVisibleMonth(startDate || startOfToday, timeZone)}\r\n              navNext={\r\n                <Next\r\n                  currentMonth={currentMonth}\r\n                  timeZone={timeZone}\r\n                  dayCountAvailableForBooking={dayCountAvailableForBooking}\r\n                />\r\n              }\r\n              navPrev={<Prev currentMonth={currentMonth} timeZone={timeZone} />}\r\n              onPrevMonthClick={() => {\r\n                setCurrentMonth(prevMonth => prevMonthFn(prevMonth, timeZone));\r\n                onMonthClick(prevMonthFn);\r\n              }}\r\n              onNextMonthClick={() => {\r\n                setCurrentMonth(prevMonth => nextMonthFn(prevMonth, timeZone));\r\n                onMonthClick(nextMonthFn);\r\n              }}\r\n              isDayBlocked={isDayBlocked}\r\n              isOutsideRange={isOutsideRange}\r\n              isBlockedBetween={isBlockedBetween(monthlyTimeSlots, timeZone)}\r\n              disabled={fetchLineItemsInProgress}\r\n              onClose={event =>\r\n                setCurrentMonth(getStartOf(event?.startDate ?? startOfToday, 'month', timeZone))\r\n              }\r\n            />\r\n\r\n            {showEstimatedBreakdown ? (\r\n              <div className={css.priceBreakdownContainer}>\r\n                <H6 as=\"h3\" className={css.bookingBreakdownTitle}>\r\n                  <FormattedMessage id=\"BookingDatesForm.priceBreakdownTitle\" />\r\n                </H6>\r\n                <hr className={css.totalDivider} />\r\n                <EstimatedCustomerBreakdownMaybe\r\n                  breakdownData={breakdownData}\r\n                  lineItems={lineItems}\r\n                  timeZone={timeZone}\r\n                  currency={unitPrice.currency}\r\n                  marketplaceName={marketplaceName}\r\n                  processName={BOOKING_PROCESS_NAME}\r\n                />\r\n              </div>\r\n            ) : null}\r\n            {fetchLineItemsError ? (\r\n              <span className={css.sideBarError}>\r\n                <FormattedMessage id=\"BookingDatesForm.fetchLineItemsError\" />\r\n              </span>\r\n            ) : null}\r\n\r\n            <div className={css.submitButton}>\r\n              <PrimaryButton type=\"submit\" inProgress={fetchLineItemsInProgress}>\r\n                <FormattedMessage id=\"BookingDatesForm.requestToBook\" />\r\n              </PrimaryButton>\r\n            </div>\r\n            <p className={css.finePrint}>\r\n              {payoutDetailsWarning ? (\r\n                payoutDetailsWarning\r\n              ) : (\r\n                <FormattedMessage\r\n                  id={\r\n                    isOwnListing\r\n                      ? 'BookingDatesForm.ownListing'\r\n                      : 'BookingDatesForm.youWontBeChargedInfo'\r\n                  }\r\n                />\r\n              )}\r\n            </p>\r\n          </Form>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nBookingDatesFormComponent.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  price: null,\r\n  isOwnListing: false,\r\n  startDatePlaceholder: null,\r\n  endDatePlaceholder: null,\r\n  lineItems: null,\r\n  fetchLineItemsError: null,\r\n  monthlyTimeSlots: null,\r\n};\r\n\r\nBookingDatesFormComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n\r\n  marketplaceName: string.isRequired,\r\n  lineItemUnitType: propTypes.lineItemUnitType.isRequired,\r\n  price: propTypes.money,\r\n  isOwnListing: bool,\r\n  monthlyTimeSlots: object,\r\n  onFetchTimeSlots: func.isRequired,\r\n\r\n  onFetchTransactionLineItems: func.isRequired,\r\n  lineItems: array,\r\n  fetchLineItemsInProgress: bool.isRequired,\r\n  fetchLineItemsError: propTypes.error,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n\r\n  // for tests\r\n  startDatePlaceholder: string,\r\n  endDatePlaceholder: string,\r\n  dayCountAvailableForBooking: number.isRequired,\r\n};\r\n\r\nconst BookingDatesForm = compose(injectIntl)(BookingDatesFormComponent);\r\nBookingDatesForm.displayName = 'BookingDatesForm';\r\n\r\nexport default BookingDatesForm;\r\n","/**\r\n * Booking breakdown estimation\r\n *\r\n * Transactions have payment information that can be shown with the\r\n * OrderBreakdown component. However, when selecting booking\r\n * details, there is no transaction object present and we have to\r\n * estimate the breakdown of the transaction without data from the\r\n * API.\r\n *\r\n * If the payment process of a customized marketplace is something\r\n * else than simply daily or nightly bookings, the estimation will\r\n * most likely need some changes.\r\n *\r\n * To customize the estimation, first change the BookingDatesForm to\r\n * collect all booking information from the user (in addition to the\r\n * default date pickers), and provide that data to the\r\n * EstimatedBreakdownMaybe components. You can then make customization\r\n * within this file to create a fake transaction object that\r\n * calculates the breakdown information correctly according to the\r\n * process.\r\n *\r\n * In the future, the optimal scenario would be to use the same\r\n * transactions.initiateSpeculative API endpoint as the CheckoutPage\r\n * is using to get the breakdown information from the API, but\r\n * currently the API doesn't support that for logged out users, and we\r\n * are forced to estimate the information here.\r\n */\r\nimport React from 'react';\r\nimport Decimal from 'decimal.js';\r\n\r\nimport { types as sdkTypes } from '../../util/sdkLoader';\r\nimport { FormattedMessage } from '../../util/reactIntl';\r\nimport {\r\n  DATE_TYPE_DATE,\r\n  LINE_ITEM_DAY,\r\n  LINE_ITEM_NIGHT,\r\n  LINE_ITEM_HOUR,\r\n  LISTING_UNIT_TYPES,\r\n  DATE_TYPE_DATETIME,\r\n} from '../../util/types';\r\nimport { unitDivisor, convertMoneyToNumber, convertUnitToSubUnit } from '../../util/currency';\r\nimport { getProcess, TX_TRANSITION_ACTOR_CUSTOMER } from '../../transactions/transaction';\r\n\r\nimport { OrderBreakdown } from '../../components';\r\n\r\nimport css from './OrderPanel.module.css';\r\n\r\nconst { Money, UUID } = sdkTypes;\r\n\r\nconst estimatedTotalPrice = (lineItems, marketplaceCurrency) => {\r\n  const numericTotalPrice = lineItems.reduce((sum, lineItem) => {\r\n    const numericPrice = convertMoneyToNumber(lineItem.lineTotal);\r\n    return new Decimal(numericPrice).add(sum);\r\n  }, new Decimal(0));\r\n\r\n  // All the lineItems should have same currency so we can use the first one to check that\r\n  // In case there are no lineItems we use currency from config.js as default\r\n  const currency =\r\n    lineItems[0] && lineItems[0].unitPrice ? lineItems[0].unitPrice.currency : marketplaceCurrency;\r\n\r\n  return new Money(\r\n    convertUnitToSubUnit(numericTotalPrice.toNumber(), unitDivisor(currency)),\r\n    currency\r\n  );\r\n};\r\n\r\nconst estimatedBooking = (bookingStart, bookingEnd, lineItemUnitType, timeZone = 'Etc/UTC') => {\r\n  const duration = { start: bookingStart, end: bookingEnd };\r\n\r\n  return {\r\n    id: new UUID('estimated-booking'),\r\n    type: 'booking',\r\n    attributes: {\r\n      ...duration,\r\n    },\r\n  };\r\n};\r\n\r\n// When we cannot speculatively initiate a transaction (i.e. logged\r\n// out), we must estimate the transaction for booking breakdown. This function creates\r\n// an estimated transaction object for that use case.\r\n//\r\n// We need to use the Template's backend to calculate the correct line items through thransactionLineItems\r\n// endpoint so that they can be passed to this estimated transaction.\r\nconst estimatedCustomerTransaction = (\r\n  lineItems,\r\n  bookingStart,\r\n  bookingEnd,\r\n  lineItemUnitType,\r\n  timeZone,\r\n  process,\r\n  processName,\r\n  marketplaceCurrency\r\n) => {\r\n  const transitions = process?.transitions;\r\n  const now = new Date();\r\n  const customerLineItems = lineItems.filter(item => item.includeFor.includes('customer'));\r\n  const providerLineItems = lineItems.filter(item => item.includeFor.includes('provider'));\r\n  const payinTotal = estimatedTotalPrice(customerLineItems, marketplaceCurrency);\r\n  const payoutTotal = estimatedTotalPrice(providerLineItems, marketplaceCurrency);\r\n\r\n  const bookingMaybe =\r\n    bookingStart && bookingEnd\r\n      ? { booking: estimatedBooking(bookingStart, bookingEnd, lineItemUnitType, timeZone) }\r\n      : {};\r\n\r\n  return {\r\n    id: new UUID('estimated-transaction'),\r\n    type: 'transaction',\r\n    attributes: {\r\n      createdAt: now,\r\n      processName,\r\n      lastTransitionedAt: now,\r\n      lastTransition: transitions.REQUEST_PAYMENT,\r\n      payinTotal,\r\n      payoutTotal,\r\n      lineItems: customerLineItems,\r\n      transitions: [\r\n        {\r\n          createdAt: now,\r\n          by: TX_TRANSITION_ACTOR_CUSTOMER,\r\n          transition: transitions.REQUEST_PAYMENT,\r\n        },\r\n      ],\r\n    },\r\n    ...bookingMaybe,\r\n  };\r\n};\r\n\r\nconst EstimatedCustomerBreakdownMaybe = props => {\r\n  const { breakdownData = {}, lineItems, timeZone, currency, marketplaceName, processName } = props;\r\n  const { startDate, endDate } = breakdownData;\r\n\r\n  let process = null;\r\n  try {\r\n    process = getProcess(processName);\r\n  } catch (e) {\r\n    return (\r\n      <div className={css.error}>\r\n        <FormattedMessage id=\"OrderPanel.unknownTransactionProcess\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const unitLineItem = lineItems?.find(\r\n    item => LISTING_UNIT_TYPES.includes(item.code) && !item.reversal\r\n  );\r\n  const lineItemUnitType = unitLineItem?.code;\r\n  const shouldHaveBooking = [LINE_ITEM_DAY, LINE_ITEM_NIGHT].includes(lineItemUnitType);\r\n  const hasLineItems = lineItems && lineItems.length > 0;\r\n  const hasRequiredBookingData = !shouldHaveBooking || (startDate && endDate);\r\n  const dateType = lineItemUnitType === LINE_ITEM_HOUR ? DATE_TYPE_DATETIME : DATE_TYPE_DATE;\r\n  const tx =\r\n    hasLineItems && hasRequiredBookingData\r\n      ? estimatedCustomerTransaction(\r\n          lineItems,\r\n          startDate,\r\n          endDate,\r\n          lineItemUnitType,\r\n          timeZone,\r\n          process,\r\n          processName,\r\n          currency\r\n        )\r\n      : null;\r\n\r\n  return tx ? (\r\n    <OrderBreakdown\r\n      className={css.receipt}\r\n      userRole=\"customer\"\r\n      transaction={tx}\r\n      booking={tx.booking}\r\n      dateType={dateType}\r\n      timeZone={timeZone}\r\n      currency={currency}\r\n      marketplaceName={marketplaceName}\r\n    />\r\n  ) : null;\r\n};\r\n\r\nexport default EstimatedCustomerBreakdownMaybe;\r\n"],"names":["TODAY","Date","nextMonthFn","currentMoment","timeZone","offset","arguments","length","undefined","getStartOf","prevMonthFn","endOfRange","date","dayCountAvailableForBooking","timeSlotsContain","timeSlots","findIndex","slot","isInRange","attributes","start","end","pickMonthlyTimeSlots","monthlyTimeSlots","_monthlyTimeSlots$mon","monthId","monthIdString","firstBlockedBetween","startDate","endDate","firstDate","isSameDay","lastBlockedBetween","previousDate","isBlockedBetween","startInListingTZ","timeOfDayFromLocalToTimeZone","endInListingTZ","isStartDateSelected","focusedInput","END_DATE","START_DATE","isOutsideRangeFn","lineItemUnitType","endOfAvailableRange","endOfAvailableRangeDate","outOfBookableDate","startOfStartDay","endOfBookableRange","day","timeOfDay","dayInListingTZ","lastDayToEndBooking","endDateToPickerDate","unitType","isValid","isDaily","LINE_ITEM_DAY","isDateSameOrAfter","previousBookedDate","firstDayToStartBooking","timeSlotEqualsDay","timeSlot","_timeSlot$attributes","type","TIME_SLOT_TIME","fetchMonthData","listingId","onFetchTimeSlots","endOfRangeDate","nextMonthDate","PrevIcon","props","React","IconArrowHead","Object","assign","direction","rootClassName","css","NextIcon","Next","currentMonth","Prev","prevMonthDate","currentMonthDate","BookingDatesFormComponent","setFocusedInput","useState","setCurrentMonth","useEffect","onMonthChanged","className","price","unitPrice","isOwnListing","fetchLineItemsInProgress","onFetchTransactionLineItems","onSubmit","marketplaceName","payoutDetailsWarning","rest","classes","classNames","onFormSubmit","handleFormSubmit","e","bookingDates","preventDefault","onFocusedInputChange","handleFocusedInputChange","onFormSpyChange","handleFormSpyChange","formValues","values","orderData","bookingStart","bookingEnd","FinalForm","render","fieldRenderProps","endDatePlaceholder","startDatePlaceholder","formId","handleSubmit","intl","lineItems","fetchLineItemsError","startDateErrorMessage","formatMessage","id","endDateErrorMessage","breakdownData","showEstimatedBreakdown","dateFormatOptions","weekday","month","startOfToday","tomorrow","addTime","startDatePlaceholderText","formatDate","endDatePlaceholderText","onMonthClick","handleMonthClick","monthFn","currentMonthData","fetchTimeSlotsError","isDayBlocked","isDayBlockedFn","timeSlotsOnSelectedMonth","LINE_ITEM_NIGHT","find","isOutsideRange","Form","enforcePagePreloadFor","FormSpy","subscription","onChange","FieldDateRangeInput","name","startDateId","concat","startDateLabel","endDateId","endDateLabel","format","v","formattedStart","timeOfDayFromTimeZoneToLocal","formattedEnd","parse","parsedStart","parsedEnd","useMobileMargins","validate","composeValidators","required","bookingDatesRequired","initialVisibleMonth","navNext","navPrev","onPrevMonthClick","prevMonth","onNextMonthClick","disabled","onClose","event","_event$startDate","H6","as","FormattedMessage","EstimatedCustomerBreakdownMaybe","currency","processName","BOOKING_PROCESS_NAME","PrimaryButton","inProgress","defaultProps","BookingDatesForm","compose","injectIntl","displayName","Money","UUID","sdkTypes","estimatedTotalPrice","marketplaceCurrency","numericTotalPrice","reduce","sum","lineItem","numericPrice","convertMoneyToNumber","lineTotal","Decimal","add","convertUnitToSubUnit","toNumber","unitDivisor","estimatedBooking","duration","process","getProcess","error","unitLineItem","item","LISTING_UNIT_TYPES","includes","code","reversal","shouldHaveBooking","hasLineItems","hasRequiredBookingData","dateType","LINE_ITEM_HOUR","DATE_TYPE_DATETIME","DATE_TYPE_DATE","tx","estimatedCustomerTransaction","transitions","now","customerLineItems","filter","includeFor","providerLineItems","payinTotal","payoutTotal","bookingMaybe","booking","createdAt","lastTransitionedAt","lastTransition","REQUEST_PAYMENT","by","TX_TRANSITION_ACTOR_CUSTOMER","transition","OrderBreakdown","receipt","userRole","transaction"],"sourceRoot":""}