{"version":3,"file":"static/js/PasswordChangePage.1005cf6f.chunk.js","mappings":"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","sources":["webpack://app/./src/containers/PasswordChangePage/PasswordChangeForm/PasswordChangeForm.module.css?dd4e","containers/PasswordChangePage/PasswordChangeForm/PasswordChangeForm.js","webpack://app/./src/containers/PasswordChangePage/PasswordChangePage.module.css?7acf","containers/PasswordChangePage/PasswordChangePage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PasswordChangeForm_root__D64td\",\"newPasswordSection\":\"PasswordChangeForm_newPasswordSection__O6n8a\",\"confirmChangesSection\":\"PasswordChangeForm_confirmChangesSection__5vqhf\",\"confirmChangesSectionVisible\":\"PasswordChangeForm_confirmChangesSectionVisible__DtoAO\",\"confirmChangesTitle\":\"PasswordChangeForm_confirmChangesTitle__hqLza\",\"confirmChangesInfo\":\"PasswordChangeForm_confirmChangesInfo__cAsZu\",\"bottomWrapper\":\"PasswordChangeForm_bottomWrapper__RbGvM\",\"error\":\"PasswordChangeForm_error__-dDVS h4\",\"helperLink\":\"PasswordChangeForm_helperLink__scojf a\",\"emailStyle\":\"PasswordChangeForm_emailStyle__LF37r\"};","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { Form as FinalForm } from 'react-final-form';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport { propTypes } from '../../../util/types';\r\nimport * as validators from '../../../util/validators';\r\nimport { ensureCurrentUser } from '../../../util/data';\r\nimport { isChangePasswordWrongPassword } from '../../../util/errors';\r\n\r\nimport { Form, PrimaryButton, FieldTextInput, H4 } from '../../../components';\r\n\r\nimport css from './PasswordChangeForm.module.css';\r\n\r\nconst RESET_TIMEOUT = 800;\r\n\r\nclass PasswordChangeFormComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { showResetPasswordMessage: false };\r\n    this.resetTimeoutId = null;\r\n    this.submittedValues = {};\r\n    this.handleResetPassword = this.handleResetPassword.bind(this);\r\n  }\r\n  componentWillUnmount() {\r\n    window.clearTimeout(this.resetTimeoutId);\r\n  }\r\n\r\n  handleResetPassword() {\r\n    this.setState({ showResetPasswordMessage: true });\r\n    const email = this.props.currentUser.attributes.email;\r\n\r\n    this.props.onResetPassword(email);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <FinalForm\r\n        {...this.props}\r\n        render={fieldRenderProps => {\r\n          const {\r\n            rootClassName,\r\n            className,\r\n            formId,\r\n            changePasswordError,\r\n            currentUser,\r\n            handleSubmit,\r\n            inProgress,\r\n            resetPasswordInProgress,\r\n            intl,\r\n            invalid,\r\n            pristine,\r\n            ready,\r\n            form,\r\n            values,\r\n          } = fieldRenderProps;\r\n\r\n          const user = ensureCurrentUser(currentUser);\r\n\r\n          if (!user.id) {\r\n            return null;\r\n          }\r\n\r\n          // New password\r\n          const newPasswordLabel = intl.formatMessage({\r\n            id: 'PasswordChangeForm.newPasswordLabel',\r\n          });\r\n          const newPasswordPlaceholder = intl.formatMessage({\r\n            id: 'PasswordChangeForm.newPasswordPlaceholder',\r\n          });\r\n          const newPasswordRequiredMessage = intl.formatMessage({\r\n            id: 'PasswordChangeForm.newPasswordRequired',\r\n          });\r\n          const newPasswordRequired = validators.requiredStringNoTrim(newPasswordRequiredMessage);\r\n\r\n          const passwordMinLengthMessage = intl.formatMessage(\r\n            {\r\n              id: 'PasswordChangeForm.passwordTooShort',\r\n            },\r\n            {\r\n              minLength: validators.PASSWORD_MIN_LENGTH,\r\n            }\r\n          );\r\n          const passwordMaxLengthMessage = intl.formatMessage(\r\n            {\r\n              id: 'PasswordChangeForm.passwordTooLong',\r\n            },\r\n            {\r\n              maxLength: validators.PASSWORD_MAX_LENGTH,\r\n            }\r\n          );\r\n\r\n          const passwordMinLength = validators.minLength(\r\n            passwordMinLengthMessage,\r\n            validators.PASSWORD_MIN_LENGTH\r\n          );\r\n          const passwordMaxLength = validators.maxLength(\r\n            passwordMaxLengthMessage,\r\n            validators.PASSWORD_MAX_LENGTH\r\n          );\r\n\r\n          // password\r\n          const passwordLabel = intl.formatMessage({\r\n            id: 'PasswordChangeForm.passwordLabel',\r\n          });\r\n          const passwordPlaceholder = intl.formatMessage({\r\n            id: 'PasswordChangeForm.passwordPlaceholder',\r\n          });\r\n          const passwordRequiredMessage = intl.formatMessage({\r\n            id: 'PasswordChangeForm.passwordRequired',\r\n          });\r\n\r\n          const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\r\n\r\n          const passwordFailedMessage = intl.formatMessage({\r\n            id: 'PasswordChangeForm.passwordFailed',\r\n          });\r\n          const passwordTouched =\r\n            values.currentPassword &&\r\n            this.submittedValues.currentPassword !== values.currentPassword;\r\n          const passwordErrorText = isChangePasswordWrongPassword(changePasswordError)\r\n            ? passwordFailedMessage\r\n            : null;\r\n\r\n          const confirmClasses = classNames(css.confirmChangesSection, {\r\n            [css.confirmChangesSectionVisible]: !pristine,\r\n          });\r\n\r\n          const genericFailure =\r\n            changePasswordError && !passwordErrorText ? (\r\n              <span className={css.error}>\r\n                <FormattedMessage id=\"PasswordChangeForm.genericFailure\" />\r\n              </span>\r\n            ) : null;\r\n\r\n          const classes = classNames(rootClassName || css.root, className);\r\n          const submitDisabled = invalid || inProgress;\r\n\r\n          const sendPasswordLink = (\r\n            <span className={css.helperLink} onClick={this.handleResetPassword} role=\"button\">\r\n              <FormattedMessage id=\"PasswordChangeForm.resetPasswordLinkText\" />\r\n            </span>\r\n          );\r\n\r\n          const resendPasswordLink = (\r\n            <span className={css.helperLink} onClick={this.handleResetPassword} role=\"button\">\r\n              <FormattedMessage id=\"PasswordChangeForm.resendPasswordLinkText\" />\r\n            </span>\r\n          );\r\n\r\n          const resetPasswordLink =\r\n            this.state.showResetPasswordMessage || resetPasswordInProgress ? (\r\n              <>\r\n                <FormattedMessage\r\n                  id=\"PasswordChangeForm.resetPasswordLinkSent\"\r\n                  values={{\r\n                    email: <span className={css.emailStyle}>{currentUser.attributes.email}</span>,\r\n                  }}\r\n                />{' '}\r\n                {resendPasswordLink}\r\n              </>\r\n            ) : (\r\n              sendPasswordLink\r\n            );\r\n\r\n          return (\r\n            <Form\r\n              className={classes}\r\n              onSubmit={e => {\r\n                this.submittedValues = values;\r\n                handleSubmit(e)\r\n                  .then(() => {\r\n                    this.resetTimeoutId = window.setTimeout(() => {\r\n                      form.restart();\r\n                      if (this.props.onChange) {\r\n                        this.props.onChange();\r\n                      }\r\n                    }, RESET_TIMEOUT);\r\n                  })\r\n                  .catch(() => {\r\n                    // Error is handled in duck file already.\r\n                  });\r\n              }}\r\n            >\r\n              <div className={css.newPasswordSection}>\r\n                <FieldTextInput\r\n                  type=\"password\"\r\n                  id={formId ? `${formId}.newPassword` : 'newPassword'}\r\n                  name=\"newPassword\"\r\n                  autoComplete=\"new-password\"\r\n                  label={newPasswordLabel}\r\n                  placeholder={newPasswordPlaceholder}\r\n                  validate={validators.composeValidators(\r\n                    newPasswordRequired,\r\n                    passwordMinLength,\r\n                    passwordMaxLength\r\n                  )}\r\n                />\r\n              </div>\r\n\r\n              <div className={confirmClasses}>\r\n                <H4 as=\"h3\" className={css.confirmChangesTitle}>\r\n                  <FormattedMessage id=\"PasswordChangeForm.confirmChangesTitle\" />\r\n                </H4>\r\n                <p className={css.confirmChangesInfo}>\r\n                  <FormattedMessage id=\"PasswordChangeForm.confirmChangesInfo\" />\r\n                  <br />\r\n                  <FormattedMessage\r\n                    id=\"PasswordChangeForm.resetPasswordInfo\"\r\n                    values={{ resetPasswordLink }}\r\n                  />\r\n                </p>\r\n\r\n                <FieldTextInput\r\n                  className={css.password}\r\n                  type=\"password\"\r\n                  id=\"currentPassword\"\r\n                  name=\"currentPassword\"\r\n                  autoComplete=\"current-password\"\r\n                  label={passwordLabel}\r\n                  placeholder={passwordPlaceholder}\r\n                  validate={validators.composeValidators(\r\n                    passwordRequired,\r\n                    passwordMinLength,\r\n                    passwordMaxLength\r\n                  )}\r\n                  customErrorText={passwordTouched ? null : passwordErrorText}\r\n                />\r\n              </div>\r\n              <div className={css.bottomWrapper}>\r\n                {genericFailure}\r\n                <PrimaryButton\r\n                  type=\"submit\"\r\n                  inProgress={inProgress}\r\n                  ready={ready}\r\n                  disabled={submitDisabled}\r\n                >\r\n                  <FormattedMessage id=\"PasswordChangeForm.saveChanges\" />\r\n                </PrimaryButton>\r\n              </div>\r\n            </Form>\r\n          );\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nPasswordChangeFormComponent.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  changePasswordError: null,\r\n  inProgress: false,\r\n  formId: null,\r\n  resetPasswordInProgress: false,\r\n  resetPasswordError: null,\r\n};\r\n\r\nconst { bool, string } = PropTypes;\r\n\r\nPasswordChangeFormComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  changePasswordError: propTypes.error,\r\n  inProgress: bool,\r\n  intl: intlShape.isRequired,\r\n  ready: bool.isRequired,\r\n  formId: string,\r\n  resetPasswordInProgress: bool,\r\n  resetPasswordError: propTypes.error,\r\n};\r\n\r\nconst PasswordChangeForm = compose(injectIntl)(PasswordChangeFormComponent);\r\nPasswordChangeForm.displayName = 'PasswordChangeForm';\r\n\r\nexport default PasswordChangeForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"PasswordChangePage_content__QjUBH\",\"desktopTopbar\":\"PasswordChangePage_desktopTopbar__E5IUB\",\"mobileTopbar\":\"PasswordChangePage_mobileTopbar__SL9-g\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\r\nimport { propTypes } from '../../util/types';\r\nimport { isScrollingDisabled } from '../../ducks/ui.duck';\r\n\r\nimport { Page, UserNav, H3, LayoutSideNavigation } from '../../components';\r\n\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\nimport FooterContainer from '../../containers/FooterContainer/FooterContainer';\r\n\r\nimport PasswordChangeForm from './PasswordChangeForm/PasswordChangeForm';\r\n\r\nimport { changePassword, changePasswordClear, resetPassword } from './PasswordChangePage.duck';\r\nimport css from './PasswordChangePage.module.css';\r\n\r\nexport const PasswordChangePageComponent = props => {\r\n  const {\r\n    changePasswordError,\r\n    changePasswordInProgress,\r\n    currentUser,\r\n    onChange,\r\n    onSubmitChangePassword,\r\n    onResetPassword,\r\n    resetPasswordInProgress,\r\n    resetPasswordError,\r\n    passwordChanged,\r\n    scrollingDisabled,\r\n    intl,\r\n  } = props;\r\n\r\n  const changePasswordForm =\r\n    currentUser && currentUser.id ? (\r\n      <PasswordChangeForm\r\n        className={css.form}\r\n        changePasswordError={changePasswordError}\r\n        currentUser={currentUser}\r\n        onSubmit={onSubmitChangePassword}\r\n        onChange={onChange}\r\n        onResetPassword={onResetPassword}\r\n        resetPasswordInProgress={resetPasswordInProgress}\r\n        resetPasswordError={resetPasswordError}\r\n        inProgress={changePasswordInProgress}\r\n        ready={passwordChanged}\r\n      />\r\n    ) : null;\r\n\r\n  const title = intl.formatMessage({ id: 'PasswordChangePage.title' });\r\n\r\n  return (\r\n    <Page title={title} scrollingDisabled={scrollingDisabled}>\r\n      <LayoutSideNavigation\r\n        topbar={\r\n          <>\r\n            <TopbarContainer\r\n              currentPage=\"PasswordChangePage\"\r\n              desktopClassName={css.desktopTopbar}\r\n              mobileClassName={css.mobileTopbar}\r\n            />\r\n            <UserNav currentPage=\"PasswordChangePage\" />\r\n          </>\r\n        }\r\n        sideNav={null}\r\n        useAccountSettingsNav\r\n        currentPage=\"PasswordChangePage\"\r\n        footer={<FooterContainer />}\r\n      >\r\n        <div className={css.content}>\r\n          <H3 as=\"h1\">\r\n            <FormattedMessage id=\"PasswordChangePage.heading\" />\r\n          </H3>\r\n          {changePasswordForm}\r\n        </div>\r\n      </LayoutSideNavigation>\r\n    </Page>\r\n  );\r\n};\r\n\r\nPasswordChangePageComponent.defaultProps = {\r\n  changePasswordError: null,\r\n  currentUser: null,\r\n  resetPasswordInProgress: false,\r\n  resetPasswordError: null,\r\n};\r\n\r\nconst { bool, func } = PropTypes;\r\n\r\nPasswordChangePageComponent.propTypes = {\r\n  changePasswordError: propTypes.error,\r\n  changePasswordInProgress: bool.isRequired,\r\n  currentUser: propTypes.currentUser,\r\n  onChange: func.isRequired,\r\n  onSubmitChangePassword: func.isRequired,\r\n  passwordChanged: bool.isRequired,\r\n  scrollingDisabled: bool.isRequired,\r\n  resetPasswordInProgress: bool,\r\n  resetPasswordError: propTypes.error,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  // Topbar needs user info.\r\n  const {\r\n    changePasswordError,\r\n    changePasswordInProgress,\r\n    passwordChanged,\r\n    resetPasswordInProgress,\r\n    resetPasswordError,\r\n  } = state.PasswordChangePage;\r\n  const { currentUser } = state.user;\r\n  return {\r\n    changePasswordError,\r\n    changePasswordInProgress,\r\n    currentUser,\r\n    passwordChanged,\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n    resetPasswordInProgress,\r\n    resetPasswordError,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: () => dispatch(changePasswordClear()),\r\n  onSubmitChangePassword: values => dispatch(changePassword(values)),\r\n  onResetPassword: values => dispatch(resetPassword(values)),\r\n});\r\n\r\nconst PasswordChangePage = compose(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  ),\r\n  injectIntl\r\n)(PasswordChangePageComponent);\r\n\r\nexport default PasswordChangePage;\r\n"],"names":["PasswordChangeFormComponent","Component","constructor","props","super","this","state","showResetPasswordMessage","resetTimeoutId","submittedValues","handleResetPassword","bind","componentWillUnmount","window","clearTimeout","setState","email","currentUser","attributes","onResetPassword","render","React","FinalForm","Object","assign","fieldRenderProps","rootClassName","className","formId","changePasswordError","handleSubmit","inProgress","resetPasswordInProgress","intl","invalid","pristine","ready","form","values","ensureCurrentUser","id","newPasswordLabel","formatMessage","newPasswordPlaceholder","newPasswordRequiredMessage","newPasswordRequired","validators","passwordMinLengthMessage","minLength","passwordMaxLengthMessage","maxLength","passwordMinLength","passwordMaxLength","passwordLabel","passwordPlaceholder","passwordRequiredMessage","passwordRequired","passwordFailedMessage","passwordTouched","currentPassword","passwordErrorText","isChangePasswordWrongPassword","confirmClasses","classNames","css","confirmChangesSection","confirmChangesSectionVisible","genericFailure","error","FormattedMessage","classes","root","submitDisabled","sendPasswordLink","helperLink","onClick","role","resendPasswordLink","resetPasswordLink","emailStyle","Form","onSubmit","e","then","setTimeout","restart","onChange","catch","newPasswordSection","FieldTextInput","type","concat","name","autoComplete","label","placeholder","validate","H4","as","confirmChangesTitle","confirmChangesInfo","password","customErrorText","bottomWrapper","PrimaryButton","disabled","defaultProps","resetPasswordError","bool","string","PropTypes","PasswordChangeForm","compose","injectIntl","displayName","PasswordChangePageComponent","changePasswordInProgress","onSubmitChangePassword","passwordChanged","scrollingDisabled","changePasswordForm","title","Page","LayoutSideNavigation","topbar","TopbarContainer","currentPage","desktopClassName","desktopTopbar","mobileClassName","mobileTopbar","UserNav","sideNav","useAccountSettingsNav","footer","FooterContainer","content","H3","func","connect","PasswordChangePage","user","isScrollingDisabled","dispatch","changePasswordClear","changePassword","resetPassword"],"sourceRoot":""}