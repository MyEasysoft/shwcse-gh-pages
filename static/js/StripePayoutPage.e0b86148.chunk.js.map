{"version":3,"file":"static/js/StripePayoutPage.e0b86148.chunk.js","mappings":"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","sources":["webpack://app/./src/containers/StripePayoutPage/StripePayoutPage.module.css?383a","containers/StripePayoutPage/StripePayoutPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"StripePayoutPage_content__kxziG\",\"desktopTopbar\":\"StripePayoutPage_desktopTopbar__Lzgqr\",\"mobileTopbar\":\"StripePayoutPage_mobileTopbar__0K4pK\",\"heading\":\"StripePayoutPage_heading__yUpdg\",\"stripeConnectAccountForm\":\"StripePayoutPage_stripeConnectAccountForm__6Fvac\"};","import React from 'react';\r\nimport { bool, func, oneOf, shape } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useConfiguration } from '../../context/configurationContext';\r\nimport { useRouteConfiguration } from '../../context/routeConfigurationContext';\r\nimport { createResourceLocatorString } from '../../util/routes';\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\r\nimport { ensureCurrentUser } from '../../util/data';\r\nimport { propTypes } from '../../util/types';\r\nimport { isScrollingDisabled } from '../../ducks/ui.duck';\r\nimport {\r\n  stripeAccountClearError,\r\n  getStripeConnectAccountLink,\r\n} from '../../ducks/stripeConnectAccount.duck';\r\n\r\nimport {\r\n  H3,\r\n  NamedRedirect,\r\n  Page,\r\n  StripeConnectAccountStatusBox,\r\n  StripeConnectAccountForm,\r\n  UserNav,\r\n  LayoutSideNavigation,\r\n} from '../../components';\r\n\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\nimport FooterContainer from '../../containers/FooterContainer/FooterContainer';\r\n\r\nimport { savePayoutDetails } from './StripePayoutPage.duck';\r\n\r\nimport css from './StripePayoutPage.module.css';\r\n\r\nconst STRIPE_ONBOARDING_RETURN_URL_SUCCESS = 'success';\r\nconst STRIPE_ONBOARDING_RETURN_URL_FAILURE = 'failure';\r\nconst STRIPE_ONBOARDING_RETURN_URL_TYPES = [\r\n  STRIPE_ONBOARDING_RETURN_URL_SUCCESS,\r\n  STRIPE_ONBOARDING_RETURN_URL_FAILURE,\r\n];\r\n\r\n// Create return URL for the Stripe onboarding form\r\nconst createReturnURL = (returnURLType, rootURL, routes) => {\r\n  const path = createResourceLocatorString(\r\n    'StripePayoutOnboardingPage',\r\n    routes,\r\n    { returnURLType },\r\n    {}\r\n  );\r\n  const root = rootURL.replace(/\\/$/, '');\r\n  return `${root}${path}`;\r\n};\r\n\r\n// Get attribute: stripeAccountData\r\nconst getStripeAccountData = stripeAccount => stripeAccount.attributes.stripeAccountData || null;\r\n\r\n// Get last 4 digits of bank account returned in Stripe account\r\nconst getBankAccountLast4Digits = stripeAccountData =>\r\n  stripeAccountData && stripeAccountData.external_accounts.data.length > 0\r\n    ? stripeAccountData.external_accounts.data[0].last4\r\n    : null;\r\n\r\n// Check if there's requirements on selected type: 'past_due', 'currently_due' etc.\r\nconst hasRequirements = (stripeAccountData, requirementType) =>\r\n  stripeAccountData != null &&\r\n  stripeAccountData.requirements &&\r\n  Array.isArray(stripeAccountData.requirements[requirementType]) &&\r\n  stripeAccountData.requirements[requirementType].length > 0;\r\n\r\n// Redirect user to Stripe's hosted Connect account onboarding form\r\nconst handleGetStripeConnectAccountLinkFn = (getLinkFn, commonParams) => type => () => {\r\n  getLinkFn({ type, ...commonParams })\r\n    .then(url => {\r\n      window.location.href = url;\r\n    })\r\n    .catch(err => console.error(err));\r\n};\r\n\r\nexport const StripePayoutPageComponent = props => {\r\n  const config = useConfiguration();\r\n  const routes = useRouteConfiguration();\r\n  const {\r\n    currentUser,\r\n    scrollingDisabled,\r\n    getAccountLinkInProgress,\r\n    getAccountLinkError,\r\n    createStripeAccountError,\r\n    updateStripeAccountError,\r\n    fetchStripeAccountError,\r\n    stripeAccountFetched,\r\n    stripeAccount,\r\n    onPayoutDetailsChange,\r\n    onPayoutDetailsSubmit,\r\n    onGetStripeConnectAccountLink,\r\n    payoutDetailsSaveInProgress,\r\n    payoutDetailsSaved,\r\n    params,\r\n    intl,\r\n  } = props;\r\n\r\n  const { returnURLType } = params;\r\n  const ensuredCurrentUser = ensureCurrentUser(currentUser);\r\n  const currentUserLoaded = !!ensuredCurrentUser.id;\r\n  const stripeConnected = currentUserLoaded && !!stripeAccount && !!stripeAccount.id;\r\n\r\n  const title = intl.formatMessage({ id: 'StripePayoutPage.title' });\r\n\r\n  const formDisabled = getAccountLinkInProgress;\r\n\r\n  const rootURL = config.marketplaceRootURL;\r\n  const successURL = createReturnURL(STRIPE_ONBOARDING_RETURN_URL_SUCCESS, rootURL, routes);\r\n  const failureURL = createReturnURL(STRIPE_ONBOARDING_RETURN_URL_FAILURE, rootURL, routes);\r\n\r\n  const accountId = stripeConnected ? stripeAccount.id : null;\r\n  const stripeAccountData = stripeConnected ? getStripeAccountData(stripeAccount) : null;\r\n  const requirementsMissing =\r\n    stripeAccount &&\r\n    (hasRequirements(stripeAccountData, 'past_due') ||\r\n      hasRequirements(stripeAccountData, 'currently_due'));\r\n\r\n  const savedCountry = stripeAccountData ? stripeAccountData.country : null;\r\n\r\n  const handleGetStripeConnectAccountLink = handleGetStripeConnectAccountLinkFn(\r\n    onGetStripeConnectAccountLink,\r\n    {\r\n      accountId,\r\n      successURL,\r\n      failureURL,\r\n    }\r\n  );\r\n\r\n  const returnedNormallyFromStripe = returnURLType === STRIPE_ONBOARDING_RETURN_URL_SUCCESS;\r\n  const returnedAbnormallyFromStripe = returnURLType === STRIPE_ONBOARDING_RETURN_URL_FAILURE;\r\n  const showVerificationNeeded = stripeConnected && requirementsMissing;\r\n\r\n  // Redirect from success URL to basic path for StripePayoutPage\r\n  if (returnedNormallyFromStripe && stripeConnected && !requirementsMissing) {\r\n    return <NamedRedirect name=\"StripePayoutPage\" />;\r\n  }\r\n\r\n  // Failure url should redirect back to Stripe since it's most likely due to page reload\r\n  // Account link creation will fail if the account is the reason\r\n  if (returnedAbnormallyFromStripe && !getAccountLinkError) {\r\n    handleGetStripeConnectAccountLink('custom_account_verification')();\r\n  }\r\n\r\n  return (\r\n    <Page title={title} scrollingDisabled={scrollingDisabled}>\r\n      <LayoutSideNavigation\r\n        topbar={\r\n          <>\r\n            <TopbarContainer\r\n              currentPage=\"StripePayoutPage\"\r\n              desktopClassName={css.desktopTopbar}\r\n              mobileClassName={css.mobileTopbar}\r\n            />\r\n            <UserNav currentPage=\"StripePayoutPage\" />\r\n          </>\r\n        }\r\n        sideNav={null}\r\n        useAccountSettingsNav\r\n        currentPage=\"StripePayoutPage\"\r\n        footer={<FooterContainer />}\r\n      >\r\n        <div className={css.content}>\r\n          <H3 as=\"h1\" className={css.heading}>\r\n            <FormattedMessage id=\"StripePayoutPage.heading\" />\r\n          </H3>\r\n          {!currentUserLoaded ? (\r\n            <FormattedMessage id=\"StripePayoutPage.loadingData\" />\r\n          ) : returnedAbnormallyFromStripe && !getAccountLinkError ? (\r\n            <FormattedMessage id=\"StripePayoutPage.redirectingToStripe\" />\r\n          ) : (\r\n            <StripeConnectAccountForm\r\n              rootClassName={css.stripeConnectAccountForm}\r\n              disabled={formDisabled}\r\n              inProgress={payoutDetailsSaveInProgress}\r\n              ready={payoutDetailsSaved}\r\n              currentUser={ensuredCurrentUser}\r\n              stripeBankAccountLastDigits={getBankAccountLast4Digits(stripeAccountData)}\r\n              savedCountry={savedCountry}\r\n              submitButtonText={intl.formatMessage({\r\n                id: 'StripePayoutPage.submitButtonText',\r\n              })}\r\n              stripeAccountError={\r\n                createStripeAccountError || updateStripeAccountError || fetchStripeAccountError\r\n              }\r\n              stripeAccountLinkError={getAccountLinkError}\r\n              stripeAccountFetched={stripeAccountFetched}\r\n              onChange={onPayoutDetailsChange}\r\n              onSubmit={onPayoutDetailsSubmit}\r\n              onGetStripeConnectAccountLink={handleGetStripeConnectAccountLink}\r\n              stripeConnected={stripeConnected}\r\n            >\r\n              {stripeConnected && !returnedAbnormallyFromStripe && showVerificationNeeded ? (\r\n                <StripeConnectAccountStatusBox\r\n                  type=\"verificationNeeded\"\r\n                  inProgress={getAccountLinkInProgress}\r\n                  onGetStripeConnectAccountLink={handleGetStripeConnectAccountLink(\r\n                    'custom_account_verification'\r\n                  )}\r\n                />\r\n              ) : stripeConnected && savedCountry && !returnedAbnormallyFromStripe ? (\r\n                <StripeConnectAccountStatusBox\r\n                  type=\"verificationSuccess\"\r\n                  inProgress={getAccountLinkInProgress}\r\n                  disabled={payoutDetailsSaveInProgress}\r\n                  onGetStripeConnectAccountLink={handleGetStripeConnectAccountLink(\r\n                    'custom_account_update'\r\n                  )}\r\n                />\r\n              ) : null}\r\n            </StripeConnectAccountForm>\r\n          )}\r\n        </div>\r\n      </LayoutSideNavigation>\r\n    </Page>\r\n  );\r\n};\r\n\r\nStripePayoutPageComponent.defaultProps = {\r\n  currentUser: null,\r\n  createStripeAccountError: null,\r\n  updateStripeAccountError: null,\r\n  fetchStripeAccountError: null,\r\n  getAccountLinkError: null,\r\n  stripeAccount: null,\r\n  params: {\r\n    returnURLType: null,\r\n  },\r\n};\r\n\r\nStripePayoutPageComponent.propTypes = {\r\n  currentUser: propTypes.currentUser,\r\n  scrollingDisabled: bool.isRequired,\r\n  getAccountLinkInProgress: bool.isRequired,\r\n  payoutDetailsSaveInProgress: bool.isRequired,\r\n  createStripeAccountError: propTypes.error,\r\n  getAccountLinkError: propTypes.error,\r\n  updateStripeAccountError: propTypes.error,\r\n  fetchStripeAccountError: propTypes.error,\r\n  stripeAccount: propTypes.stripeAccount,\r\n  stripeAccountFetched: bool.isRequired,\r\n  payoutDetailsSaved: bool.isRequired,\r\n\r\n  onPayoutDetailsChange: func.isRequired,\r\n  onPayoutDetailsSubmit: func.isRequired,\r\n  onGetStripeConnectAccountLink: func.isRequired,\r\n  params: shape({\r\n    returnURLType: oneOf(STRIPE_ONBOARDING_RETURN_URL_TYPES),\r\n  }),\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const {\r\n    getAccountLinkInProgress,\r\n    getAccountLinkError,\r\n    createStripeAccountError,\r\n    updateStripeAccountError,\r\n    fetchStripeAccountError,\r\n    stripeAccount,\r\n    stripeAccountFetched,\r\n  } = state.stripeConnectAccount;\r\n  const { currentUser } = state.user;\r\n  const { payoutDetailsSaveInProgress, payoutDetailsSaved } = state.StripePayoutPage;\r\n  return {\r\n    currentUser,\r\n    getAccountLinkInProgress,\r\n    getAccountLinkError,\r\n    createStripeAccountError,\r\n    updateStripeAccountError,\r\n    fetchStripeAccountError,\r\n    stripeAccount,\r\n    stripeAccountFetched,\r\n    payoutDetailsSaveInProgress,\r\n    payoutDetailsSaved,\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onPayoutDetailsChange: () => dispatch(stripeAccountClearError()),\r\n  onPayoutDetailsSubmit: (values, isUpdateCall) =>\r\n    dispatch(savePayoutDetails(values, isUpdateCall)),\r\n  onGetStripeConnectAccountLink: params => dispatch(getStripeConnectAccountLink(params)),\r\n});\r\n\r\nconst StripePayoutPage = compose(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  ),\r\n  injectIntl\r\n)(StripePayoutPageComponent);\r\n\r\nexport default StripePayoutPage;\r\n"],"names":["STRIPE_ONBOARDING_RETURN_URL_SUCCESS","STRIPE_ONBOARDING_RETURN_URL_FAILURE","createReturnURL","returnURLType","rootURL","routes","path","createResourceLocatorString","root","replace","concat","getBankAccountLast4Digits","stripeAccountData","external_accounts","data","length","last4","hasRequirements","requirementType","requirements","Array","isArray","StripePayoutPageComponent","props","config","useConfiguration","useRouteConfiguration","currentUser","scrollingDisabled","getAccountLinkInProgress","getAccountLinkError","createStripeAccountError","updateStripeAccountError","fetchStripeAccountError","stripeAccountFetched","stripeAccount","onPayoutDetailsChange","onPayoutDetailsSubmit","onGetStripeConnectAccountLink","payoutDetailsSaveInProgress","payoutDetailsSaved","params","intl","ensuredCurrentUser","ensureCurrentUser","currentUserLoaded","id","stripeConnected","title","formatMessage","formDisabled","marketplaceRootURL","successURL","failureURL","accountId","attributes","getStripeAccountData","requirementsMissing","savedCountry","country","handleGetStripeConnectAccountLink","getLinkFn","commonParams","type","then","url","window","location","href","catch","err","console","error","handleGetStripeConnectAccountLinkFn","returnedAbnormallyFromStripe","showVerificationNeeded","React","NamedRedirect","name","Page","LayoutSideNavigation","topbar","TopbarContainer","currentPage","desktopClassName","css","mobileClassName","UserNav","sideNav","useAccountSettingsNav","footer","FooterContainer","className","H3","as","FormattedMessage","StripeConnectAccountForm","rootClassName","disabled","inProgress","ready","stripeBankAccountLastDigits","submitButtonText","stripeAccountError","stripeAccountLinkError","onChange","onSubmit","StripeConnectAccountStatusBox","defaultProps","compose","connect","state","stripeConnectAccount","user","StripePayoutPage","isScrollingDisabled","dispatch","stripeAccountClearError","values","isUpdateCall","savePayoutDetails","getStripeConnectAccountLink","injectIntl"],"sourceRoot":""}