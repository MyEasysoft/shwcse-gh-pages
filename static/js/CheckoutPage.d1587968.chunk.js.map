{"version":3,"file":"static/js/CheckoutPage.d1587968.chunk.js","mappings":"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","sources":["containers/CheckoutPage/CheckoutPageSessionHelpers.js","webpack://app/./src/containers/CheckoutPage/CheckoutPage.module.css?d758","containers/CheckoutPage/CustomTopbar.js","containers/CheckoutPage/CheckoutPageTransactionHelpers.js","containers/CheckoutPage/DetailsSideCard.js","containers/CheckoutPage/MobileListingImage.js","containers/CheckoutPage/MobileOrderBreakdown.js","containers/CheckoutPage/CheckoutPageWithPayment.js","containers/CheckoutPage/ErrorMessages.js","containers/CheckoutPage/CheckoutPageWithInquiryProcess.js","containers/CheckoutPage/CheckoutPage.js"],"sourcesContent":["/**\r\n * CheckoutPage starts payment process and therefore it will get data from ListingPage\r\n * (booking dates, listing data, and all the other data that affects to booking decision).\r\n * This data is saved to Session Store which only exists while the browsing session exists -\r\n * e.g. tab is open. (Session Store is not related to session cookies.)\r\n */\r\nimport reduce from 'lodash/reduce';\r\nimport Decimal from 'decimal.js';\r\n\r\nimport { isAfterDate, subtractTime } from '../../util/dates';\r\nimport { types as sdkTypes } from '../../util/sdkLoader';\r\nimport { getProcess } from '../../transactions/transaction';\r\n\r\nconst { UUID, Money } = sdkTypes;\r\n\r\n// Validate that given 'obj' has all the keys of defined by validPropTypes parameter\r\n// and values must pass related test-value-format function.\r\nconst validateProperties = (obj, validPropTypes) => {\r\n  return reduce(\r\n    Object.entries(validPropTypes),\r\n    (acc, [prop, fn]) => {\r\n      if (Object.prototype.hasOwnProperty.call(obj, prop) && fn(obj[prop])) {\r\n        return acc;\r\n      }\r\n      return false;\r\n    },\r\n    true\r\n  );\r\n};\r\n\r\n// Validate content of booking dates object received from SessionStore\r\nexport const isValidBookingDates = bookingDates => {\r\n  const props = {\r\n    bookingStart: d => d instanceof Date,\r\n    bookingEnd: d => d instanceof Date,\r\n  };\r\n  return validateProperties(bookingDates, props);\r\n};\r\n\r\n// Validate content of listing object received from SessionStore.\r\n// Currently only id & attributes.price are needed.\r\nexport const isValidListing = listing => {\r\n  const props = {\r\n    id: id => id instanceof UUID,\r\n    attributes: v => {\r\n      return typeof v === 'object' && v.price instanceof Money;\r\n    },\r\n  };\r\n  return validateProperties(listing, props);\r\n};\r\n\r\n// Validate content of an transaction received from SessionStore.\r\n// An id is required and the last transition needs to be one of the known transitions\r\nexport const isValidTransaction = transaction => {\r\n  let process = null;\r\n  try {\r\n    const processName = transaction?.attributes?.processName;\r\n    process = getProcess(processName);\r\n  } catch (e) {\r\n    console.error(\r\n      'Transaction, found from sessionStorage, was following unsupported transaction process.'\r\n    );\r\n    return false;\r\n  }\r\n\r\n  const props = {\r\n    id: id => id instanceof UUID,\r\n    type: type => type === 'transaction',\r\n    attributes: v => {\r\n      return typeof v === 'object' && Object.values(process.transitions).includes(v.lastTransition);\r\n    },\r\n  };\r\n  return validateProperties(transaction, props);\r\n};\r\n\r\n// Stores given bookinData, listing and transaction to sessionStorage\r\nexport const storeData = (orderData, listing, transaction, storageKey) => {\r\n  if (window && window.sessionStorage && listing && orderData) {\r\n    const data = {\r\n      orderData,\r\n      listing,\r\n      transaction,\r\n      storedAt: new Date(),\r\n    };\r\n\r\n    const replacer = function(k, v) {\r\n      if (this[k] instanceof Date) {\r\n        return { date: v, _serializedType: 'SerializableDate' };\r\n      }\r\n      if (this[k] instanceof Decimal) {\r\n        return { decimal: v, _serializedType: 'SerializableDecimal' };\r\n      }\r\n      return sdkTypes.replacer(k, v);\r\n    };\r\n\r\n    const storableData = JSON.stringify(data, replacer);\r\n    window.sessionStorage.setItem(storageKey, storableData);\r\n  }\r\n};\r\n\r\n// Get stored data\r\nexport const storedData = storageKey => {\r\n  if (window && window.sessionStorage) {\r\n    const checkoutPageData = window.sessionStorage.getItem(storageKey);\r\n\r\n    const reviver = (k, v) => {\r\n      if (v && typeof v === 'object' && v._serializedType === 'SerializableDate') {\r\n        // Dates are expected to be stored as:\r\n        // { date: new Date(), _serializedType: 'SerializableDate' }\r\n        return new Date(v.date);\r\n      } else if (v && typeof v === 'object' && v._serializedType === 'SerializableDecimal') {\r\n        // Decimals are expected to be stored as:\r\n        // { decimal: v, _serializedType: 'SerializableDecimal' }\r\n        return new Decimal(v.decimal);\r\n      }\r\n      return sdkTypes.reviver(k, v);\r\n    };\r\n\r\n    // Note: orderData may contain bookingDates if booking process is used.\r\n    const { orderData, listing, transaction, storedAt } = checkoutPageData\r\n      ? JSON.parse(checkoutPageData, reviver)\r\n      : {};\r\n\r\n    const bookingDates = orderData?.bookingDates;\r\n    const isPotentiallyIncludedBookingDatesValid = bookingDates\r\n      ? isValidBookingDates(bookingDates)\r\n      : true;\r\n\r\n    // If sessionStore contains freshly saved data (max 1 day old), use it\r\n    const isFreshlySaved = storedAt\r\n      ? isAfterDate(storedAt, subtractTime(new Date(), 1, 'days'))\r\n      : false;\r\n\r\n    // resolve transaction as valid if it is missing\r\n    const isTransactionValid = !!transaction ? isValidTransaction(transaction) : true;\r\n\r\n    const isStoredDataValid =\r\n      isFreshlySaved &&\r\n      isPotentiallyIncludedBookingDatesValid &&\r\n      isValidListing(listing) &&\r\n      isTransactionValid;\r\n\r\n    if (isStoredDataValid) {\r\n      return { orderData, listing, transaction };\r\n    }\r\n  }\r\n  return {};\r\n};\r\n\r\nexport const clearData = storageKey => {\r\n  if (window && window.sessionStorage) {\r\n    window.sessionStorage.removeItem(storageKey);\r\n  }\r\n};\r\n\r\n/**\r\n * Save page data to sessionstorage if the data is passed through navigation\r\n *\r\n * @param {Object} pageData an object containing orderData, listing and transaction entities.\r\n * @param {String} storageKey key for the sessionStorage\r\n * @param {Object} history navigation related object with pushState action\r\n * @returns pageData\r\n */\r\nexport const handlePageData = ({ orderData, listing, transaction }, storageKey, history) => {\r\n  // Browser's back navigation should not rewrite data in session store.\r\n  // Action is 'POP' on both history.back() and page refresh cases.\r\n  // Action is 'PUSH' when user has directed through a link\r\n  // Action is 'REPLACE' when user has directed through login/signup process\r\n  const hasNavigatedThroughLink = history.action === 'PUSH' || history.action === 'REPLACE';\r\n\r\n  const hasDataInProps = !!(orderData && listing && hasNavigatedThroughLink);\r\n  if (hasDataInProps) {\r\n    // Store data only if data is passed through props and user has navigated through a link.\r\n    storeData(orderData, listing, transaction, storageKey);\r\n  }\r\n\r\n  // NOTE: stored data can be empty if user has already successfully completed transaction.\r\n  const pageData = hasDataInProps ? { orderData, listing, transaction } : storedData(storageKey);\r\n  return pageData;\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"topbar\":\"CheckoutPage_topbar__k07kt\",\"contentContainer\":\"CheckoutPage_contentContainer__vNONJ\",\"orderFormContainer\":\"CheckoutPage_orderFormContainer__0JA45\",\"listingImageMobile\":\"CheckoutPage_listingImageMobile__rIpgh\",\"rootForImage\":\"CheckoutPage_rootForImage__Z4MDV\",\"avatarWrapper\":\"CheckoutPage_avatarWrapper__6JZzu\",\"avatarMobile\":\"CheckoutPage_avatarMobile__fWjDI\",\"headingContainer\":\"CheckoutPage_headingContainer__nk7ok\",\"heading\":\"CheckoutPage_heading__86Q2N\",\"listingDetailsWrapper\":\"CheckoutPage_listingDetailsWrapper__H8Ooc\",\"detailsHeadingMobile\":\"CheckoutPage_detailsHeadingMobile__t-UMX\",\"author\":\"CheckoutPage_author__cTV2f h4\",\"priceBreakdownContainer\":\"CheckoutPage_priceBreakdownContainer__KqI59\",\"priceBreakdownTitle\":\"CheckoutPage_priceBreakdownTitle__da8I9\",\"paymentContainer\":\"CheckoutPage_paymentContainer__cV4tO\",\"orderError\":\"CheckoutPage_orderError__aJIyS\",\"notFoundError\":\"CheckoutPage_notFoundError__p2Npf\",\"speculateError\":\"CheckoutPage_speculateError__ZTokl\",\"paymentForm\":\"CheckoutPage_paymentForm__vuiwL\",\"detailsContainerDesktop\":\"CheckoutPage_detailsContainerDesktop__w4SVt\",\"detailsAspectWrapper\":\"CheckoutPage_detailsAspectWrapper__FjTNJ\",\"detailsHeadings\":\"CheckoutPage_detailsHeadings__HBcW9\",\"detailsSubtitle\":\"CheckoutPage_detailsSubtitle__BWgQj h5\",\"orderBreakdownHeader\":\"CheckoutPage_orderBreakdownHeader__6zbvg\",\"orderBreakdownTitle\":\"CheckoutPage_orderBreakdownTitle__etMpy\",\"totalDivider\":\"CheckoutPage_totalDivider__zfy1R\",\"orderBreakdown\":\"CheckoutPage_orderBreakdown__KkPra\",\"section\":\"CheckoutPage_section__AyQhE\",\"sectionHeading\":\"CheckoutPage_sectionHeading__6Sxh3 p\",\"field\":\"CheckoutPage_field__qx3Wj\",\"fieldInquiryMessage\":\"CheckoutPage_fieldInquiryMessage__F5tIh\",\"error\":\"CheckoutPage_error__0BAAg\",\"priceContainer\":\"CheckoutPage_priceContainer__YuyOj\",\"price\":\"CheckoutPage_price__boBWI p\",\"perUnit\":\"CheckoutPage_perUnit__Zs86f p\",\"inquiryPrice\":\"CheckoutPage_inquiryPrice__yramS p\"};","import React, { useState, useEffect } from 'react';\r\nimport { string } from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport { intlShape } from '../../util/reactIntl';\r\n\r\nimport { LinkedLogo } from '../../components';\r\n\r\nimport css from './CheckoutPage.module.css';\r\n\r\nconst CustomTopbar = props => {\r\n  const [isMobile, setIsMobile] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // set initial value\r\n    const mediaQueryList = window.matchMedia('(max-width: 767px)');\r\n    setIsMobile(mediaQueryList.matches);\r\n\r\n    //watch for updates\r\n    function updateIsMobile(e) {\r\n      setIsMobile(e.matches);\r\n    }\r\n    mediaQueryList.addEventListener('change', updateIsMobile);\r\n\r\n    // clean up after ourselves\r\n    return function cleanup() {\r\n      mediaQueryList.removeEventListener('change', updateIsMobile);\r\n    };\r\n  });\r\n\r\n  const { className, rootClassName, intl } = props;\r\n  const classes = classNames(rootClassName || css.topbar, className);\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <LinkedLogo\r\n        layout={isMobile ? 'mobile' : 'desktop'}\r\n        alt={intl.formatMessage({ id: 'CheckoutPage.goToLandingPage' })}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nCustomTopbar.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n};\r\n\r\nCustomTopbar.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nexport default CustomTopbar;\r\n","// Import contexts and util modules\r\nimport { findRouteByRouteName } from '../../util/routes';\r\nimport { ensureStripeCustomer, ensureTransaction } from '../../util/data';\r\nimport { minutesBetween } from '../../util/dates';\r\nimport { formatMoney } from '../../util/currency';\r\nimport { storeData } from './CheckoutPageSessionHelpers';\r\n\r\n/**\r\n * Extract relevant transaction type data from listing type\r\n * Note: this is saved to protectedData of the transaction entity\r\n *       therefore, we don't need the process name (nor alias)\r\n *\r\n * @param {Object} listingType\r\n * @param {String} unitTypeInPublicData\r\n * @param {Object} config\r\n * @returns object containing unitType etc. - or an empty object.\r\n */\r\nexport const getTransactionTypeData = (listingType, unitTypeInPublicData, config) => {\r\n  const listingTypeConfig = config.listing.listingTypes.find(lt => lt.listingType === listingType);\r\n  const { process, alias, unitType, ...rest } = listingTypeConfig?.transactionType || {};\r\n  // Note: we want to rely on unitType written in public data of the listing entity.\r\n  //       The listingType configuration might have changed on the fly.\r\n  return unitTypeInPublicData ? { unitType: unitTypeInPublicData, ...rest } : {};\r\n};\r\n\r\n/**\r\n * This just makes it easier to transfrom bookingDates object if needed\r\n * (or manibulate bookingStart and bookingEnd)\r\n *\r\n * @param {Object} bookingDates\r\n * @returns object containing bookingDates or an empty object.\r\n */\r\nexport const bookingDatesMaybe = bookingDates => {\r\n  return bookingDates ? { bookingDates } : {};\r\n};\r\n\r\n/**\r\n * Construct billing details (JSON-like object) for the Stripe API\r\n *\r\n * @param {Object} formValues object containing name, addressLine1, addressLine2, postal, city, state, country\r\n * @param {Object} currentUser\r\n * @returns Object that contains name, email and potentially address data for the Stripe API\r\n */\r\nexport const getBillingDetails = (formValues, currentUser) => {\r\n  const { name, addressLine1, addressLine2, postal, city, state, country } = formValues;\r\n\r\n  // Billing address is recommended.\r\n  // However, let's not assume that <StripePaymentAddress> data is among formValues.\r\n  // Read more about this from Stripe's docs\r\n  // https://stripe.com/docs/stripe-js/reference#stripe-handle-card-payment-no-element\r\n  const addressMaybe =\r\n    addressLine1 && postal\r\n      ? {\r\n          address: {\r\n            city: city,\r\n            country: country,\r\n            line1: addressLine1,\r\n            line2: addressLine2,\r\n            postal_code: postal,\r\n            state: state,\r\n          },\r\n        }\r\n      : {};\r\n  return {\r\n    name,\r\n    email: currentUser?.attributes?.email,\r\n    ...addressMaybe,\r\n  };\r\n};\r\n\r\n/**\r\n * Get formatted total price (payinTotal)\r\n *\r\n * @param {Object} transaction\r\n * @param {Object} intl\r\n * @returns formatted money as a string.\r\n */\r\nexport const getFormattedTotalPrice = (transaction, intl) => {\r\n  const totalPrice = transaction.attributes.payinTotal;\r\n  return formatMoney(intl, totalPrice);\r\n};\r\n\r\n/**\r\n * Construct shipping details (JSON-like object)\r\n *\r\n * @param {Object} formValues object containing saveAfterOnetimePayment, recipientName,\r\n * recipientPhoneNumber, recipientAddressLine1, recipientAddressLine2, recipientPostal,\r\n * recipientCity, recipientState, and recipientCountry.\r\n * @returns shippingDetails object containing name, phoneNumber and address\r\n */\r\nexport const getShippingDetailsMaybe = formValues => {\r\n  const {\r\n    saveAfterOnetimePayment: saveAfterOnetimePaymentRaw,\r\n    recipientName,\r\n    recipientPhoneNumber,\r\n    recipientAddressLine1,\r\n    recipientAddressLine2,\r\n    recipientPostal,\r\n    recipientCity,\r\n    recipientState,\r\n    recipientCountry,\r\n  } = formValues;\r\n\r\n  return recipientName && recipientAddressLine1 && recipientPostal\r\n    ? {\r\n        shippingDetails: {\r\n          name: recipientName,\r\n          phoneNumber: recipientPhoneNumber,\r\n          address: {\r\n            city: recipientCity,\r\n            country: recipientCountry,\r\n            line1: recipientAddressLine1,\r\n            line2: recipientAddressLine2,\r\n            postalCode: recipientPostal,\r\n            state: recipientState,\r\n          },\r\n        },\r\n      }\r\n    : {};\r\n};\r\n\r\n/**\r\n * Check if the default payment method exists for the currentUser\r\n * @param {Boolean} stripeCustomerFetched\r\n * @param {Object} currentUser\r\n * @returns true if default payment method has been set\r\n */\r\nexport const hasDefaultPaymentMethod = (stripeCustomerFetched, currentUser) =>\r\n  !!(\r\n    stripeCustomerFetched &&\r\n    currentUser?.stripeCustomer?.attributes?.stripeCustomerId &&\r\n    currentUser?.stripeCustomer?.defaultPaymentMethod?.id\r\n  );\r\n\r\n/**\r\n * Check if payment is expired (PAYMENT_EXPIRED state) or if payment has passed 15 minute treshold from PENDING_PAYMENT\r\n *\r\n * @param {Object} existingTransaction\r\n * @param {Object} process\r\n * @returns true if payment has expired.\r\n */\r\nexport const hasPaymentExpired = (existingTransaction, process) => {\r\n  const state = process.getState(existingTransaction);\r\n  return state === process.states.PAYMENT_EXPIRED\r\n    ? true\r\n    : state === process.states.PENDING_PAYMENT\r\n    ? minutesBetween(existingTransaction.attributes.lastTransitionedAt, new Date()) >= 15\r\n    : false;\r\n};\r\n\r\n/**\r\n * Check if the transaction has passed PENDING_PAYMENT state (assumes that process has that state)\r\n * @param {Object} tx\r\n * @param {Object} process\r\n * @returns true if the transaction has passed that state\r\n */\r\nexport const hasTransactionPassedPendingPayment = (tx, process) => {\r\n  return process.hasPassedState(process.states.PENDING_PAYMENT, tx);\r\n};\r\n\r\nconst persistTransaction = (order, pageData, storeData, setPageData, sessionStorageKey) => {\r\n  // Store the returned transaction (order)\r\n  if (order?.id) {\r\n    // Store order.\r\n    const { orderData, listing } = pageData;\r\n    storeData(orderData, listing, order, sessionStorageKey);\r\n    setPageData({ ...pageData, transaction: order });\r\n  }\r\n};\r\n\r\n/**\r\n * Create call sequence for checkout with Stripe PaymentIntents.\r\n *\r\n * @param {Object} orderParams contains params for the initial order itself\r\n * @param {Object} extraPaymentParams contains extra params needed by one of the following calls in the checkout sequence\r\n * @returns Promise that goes through each step in the checkout sequence.\r\n */\r\nexport const processCheckoutWithPayment = (orderParams, extraPaymentParams) => {\r\n  const {\r\n    hasPaymentIntentUserActionsDone,\r\n    isPaymentFlowUseSavedCard,\r\n    isPaymentFlowPayAndSaveCard,\r\n    message,\r\n    onConfirmCardPayment,\r\n    onConfirmPayment,\r\n    onInitiateOrder,\r\n    onSavePaymentMethod,\r\n    onSendMessage,\r\n    pageData,\r\n    paymentIntent,\r\n    process,\r\n    setPageData,\r\n    sessionStorageKey,\r\n    stripeCustomer,\r\n    stripePaymentMethodId,\r\n  } = extraPaymentParams;\r\n  const storedTx = ensureTransaction(pageData.transaction);\r\n\r\n  const ensuredStripeCustomer = ensureStripeCustomer(stripeCustomer);\r\n  const processAlias = pageData?.listing?.attributes?.publicData?.transactionProcessAlias;\r\n\r\n  let createdPaymentIntent = null;\r\n\r\n  ////////////////////////////////////////////////\r\n  // Step 1: initiate order                     //\r\n  // by requesting payment from Marketplace API //\r\n  ////////////////////////////////////////////////\r\n  const fnRequestPayment = fnParams => {\r\n    // fnParams should be { listingId, deliveryMethod?, quantity?, bookingDates?, paymentMethod?.setupPaymentMethodForSaving?, protectedData }\r\n    const hasPaymentIntents = storedTx.attributes.protectedData?.stripePaymentIntents;\r\n\r\n    const requestTransition =\r\n      storedTx?.attributes?.lastTransition === process.transitions.INQUIRE\r\n        ? process.transitions.REQUEST_PAYMENT_AFTER_INQUIRY\r\n        : process.transitions.REQUEST_PAYMENT;\r\n    const isPrivileged = process.isPrivileged(requestTransition);\r\n\r\n    // If paymentIntent exists, order has been initiated previously.\r\n    const orderPromise = hasPaymentIntents\r\n      ? Promise.resolve(storedTx)\r\n      : onInitiateOrder(fnParams, processAlias, storedTx.id, requestTransition, isPrivileged);\r\n\r\n    orderPromise.then(order => {\r\n      // Store the returned transaction (order)\r\n      persistTransaction(order, pageData, storeData, setPageData, sessionStorageKey);\r\n    });\r\n\r\n    return orderPromise;\r\n  };\r\n\r\n  //////////////////////////////////\r\n  // Step 2: pay using Stripe SDK //\r\n  //////////////////////////////////\r\n  const fnConfirmCardPayment = fnParams => {\r\n    // fnParams should be returned transaction entity\r\n    const order = fnParams;\r\n\r\n    const hasPaymentIntents = order?.attributes?.protectedData?.stripePaymentIntents;\r\n    if (!hasPaymentIntents) {\r\n      throw new Error(\r\n        `Missing StripePaymentIntents key in transaction's protectedData. Check that your transaction process is configured to use payment intents.`\r\n      );\r\n    }\r\n\r\n    const { stripePaymentIntentClientSecret } = hasPaymentIntents\r\n      ? order.attributes.protectedData.stripePaymentIntents.default\r\n      : null;\r\n\r\n    const { stripe, card, billingDetails, paymentIntent } = extraPaymentParams;\r\n    const stripeElementMaybe = !isPaymentFlowUseSavedCard ? { card } : {};\r\n\r\n    // Note: For basic USE_SAVED_CARD scenario, we have set it already on API side, when PaymentIntent was created.\r\n    // However, the payment_method is save here for USE_SAVED_CARD flow if customer first attempted onetime payment\r\n    const paymentParams = !isPaymentFlowUseSavedCard\r\n      ? {\r\n          payment_method: {\r\n            billing_details: billingDetails,\r\n            card: card,\r\n          },\r\n        }\r\n      : { payment_method: stripePaymentMethodId };\r\n\r\n    const params = {\r\n      stripePaymentIntentClientSecret,\r\n      orderId: order?.id,\r\n      stripe,\r\n      ...stripeElementMaybe,\r\n      paymentParams,\r\n    };\r\n\r\n    return hasPaymentIntentUserActionsDone\r\n      ? Promise.resolve({ transactionId: order?.id, paymentIntent })\r\n      : onConfirmCardPayment(params);\r\n  };\r\n\r\n  ///////////////////////////////////////////////////\r\n  // Step 3: complete order                        //\r\n  // by confirming payment against Marketplace API //\r\n  ///////////////////////////////////////////////////\r\n  const fnConfirmPayment = fnParams => {\r\n    // fnParams should contain { paymentIntent, transactionId } returned in step 2\r\n    // Remember the created PaymentIntent for step 5\r\n    createdPaymentIntent = fnParams.paymentIntent;\r\n    const transactionId = fnParams.transactionId;\r\n    const transitionName = process.transitions.CONFIRM_PAYMENT;\r\n    const isTransitionedAlready = storedTx?.attributes?.lastTransition === transitionName;\r\n    const orderPromise = isTransitionedAlready\r\n      ? Promise.resolve(storedTx)\r\n      : onConfirmPayment(transactionId, transitionName, {});\r\n\r\n    orderPromise.then(order => {\r\n      // Store the returned transaction (order)\r\n      persistTransaction(order, pageData, storeData, setPageData, sessionStorageKey);\r\n    });\r\n\r\n    return orderPromise;\r\n  };\r\n\r\n  //////////////////////////////////\r\n  // Step 4: send initial message //\r\n  //////////////////////////////////\r\n  const fnSendMessage = fnParams => {\r\n    const orderId = fnParams?.id;\r\n    return onSendMessage({ id: orderId, message });\r\n  };\r\n\r\n  //////////////////////////////////////////////////////////\r\n  // Step 5: optionally save card as defaultPaymentMethod //\r\n  //////////////////////////////////////////////////////////\r\n  const fnSavePaymentMethod = fnParams => {\r\n    const pi = createdPaymentIntent || paymentIntent;\r\n\r\n    if (isPaymentFlowPayAndSaveCard) {\r\n      return onSavePaymentMethod(ensuredStripeCustomer, pi.payment_method)\r\n        .then(response => {\r\n          if (response.errors) {\r\n            return { ...fnParams, paymentMethodSaved: false };\r\n          }\r\n          return { ...fnParams, paymentMethodSaved: true };\r\n        })\r\n        .catch(e => {\r\n          // Real error cases are catched already in paymentMethods page.\r\n          return { ...fnParams, paymentMethodSaved: false };\r\n        });\r\n    } else {\r\n      return Promise.resolve({ ...fnParams, paymentMethodSaved: true });\r\n    }\r\n  };\r\n\r\n  // Here we create promise calls in sequence\r\n  // This is pretty much the same as:\r\n  // fnRequestPayment({...initialParams})\r\n  //   .then(result => fnConfirmCardPayment({...result}))\r\n  //   .then(result => fnConfirmPayment({...result}))\r\n  const applyAsync = (acc, val) => acc.then(val);\r\n  const composeAsync = (...funcs) => x => funcs.reduce(applyAsync, Promise.resolve(x));\r\n  const handlePaymentIntentCreation = composeAsync(\r\n    fnRequestPayment,\r\n    fnConfirmCardPayment,\r\n    fnConfirmPayment,\r\n    fnSendMessage,\r\n    fnSavePaymentMethod\r\n  );\r\n\r\n  return handlePaymentIntentCreation(orderParams);\r\n};\r\n\r\n/**\r\n * Initialize OrderDetailsPage with given initialValues.\r\n *\r\n * @param {Object} initialValues\r\n * @param {Object} routes\r\n * @param {Function} dispatch\r\n */\r\nexport const setOrderPageInitialValues = (initialValues, routes, dispatch) => {\r\n  const OrderPage = findRouteByRouteName('OrderDetailsPage', routes);\r\n\r\n  // Transaction is already created, but if the initial message\r\n  // sending failed, we tell it to the OrderDetailsPage.\r\n  dispatch(OrderPage.setInitialValues(initialValues));\r\n};\r\n","import React from 'react';\r\nimport { node, object, string } from 'prop-types';\r\n\r\nimport { FormattedMessage } from '../../util/reactIntl';\r\nimport { propTypes } from '../../util/types';\r\nimport { createSlug } from '../../util/urlHelpers';\r\nimport { formatMoney } from '../../util/currency';\r\n\r\nimport {\r\n  AspectRatioWrapper,\r\n  AvatarMedium,\r\n  H4,\r\n  H6,\r\n  NamedLink,\r\n  ResponsiveImage,\r\n} from '../../components';\r\n\r\nimport css from './CheckoutPage.module.css';\r\n\r\nconst DetailsSideCard = props => {\r\n  const {\r\n    listing,\r\n    listingTitle,\r\n    author,\r\n    firstImage,\r\n    layoutListingImageConfig,\r\n    speculateTransactionErrorMessage,\r\n    showPrice,\r\n    processName,\r\n    breakdown,\r\n    intl,\r\n  } = props;\r\n\r\n  const { price, publicData } = listing?.attributes || {};\r\n  const unitType = publicData.unitType || 'unknown';\r\n\r\n  const { aspectWidth = 1, aspectHeight = 1, variantPrefix = 'listing-card' } =\r\n    layoutListingImageConfig || {};\r\n  const variants = firstImage\r\n    ? Object.keys(firstImage?.attributes?.variants).filter(k => k.startsWith(variantPrefix))\r\n    : [];\r\n\r\n  return (\r\n    <div className={css.detailsContainerDesktop}>\r\n      <AspectRatioWrapper\r\n        width={aspectWidth}\r\n        height={aspectHeight}\r\n        className={css.detailsAspectWrapper}\r\n      >\r\n        <ResponsiveImage\r\n          rootClassName={css.rootForImage}\r\n          alt={listingTitle}\r\n          image={firstImage}\r\n          variants={variants}\r\n        />\r\n      </AspectRatioWrapper>\r\n      <div className={css.listingDetailsWrapper}>\r\n        <div className={css.avatarWrapper}>\r\n          <AvatarMedium user={author} disableProfileLink />\r\n        </div>\r\n        <div className={css.detailsHeadings}>\r\n          <H4 as=\"h2\">\r\n            <NamedLink\r\n              name=\"ListingPage\"\r\n              params={{ id: listing?.id?.uuid, slug: createSlug(listingTitle) }}\r\n            >\r\n              {listingTitle}\r\n            </NamedLink>\r\n          </H4>\r\n          {showPrice ? (\r\n            <div className={css.priceContainer}>\r\n              <p className={css.price}>{formatMoney(intl, price)}</p>\r\n              <div className={css.perUnit}>\r\n                <FormattedMessage\r\n                  id=\"CheckoutPageWithInquiryProcess.perUnit\"\r\n                  values={{ unitType }}\r\n                />\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n        {speculateTransactionErrorMessage}\r\n      </div>\r\n\r\n      {!!breakdown ? (\r\n        <div className={css.orderBreakdownHeader}>\r\n          <H6 as=\"h3\" className={css.orderBreakdownTitle}>\r\n            <FormattedMessage id={`CheckoutPage.${processName}.orderBreakdown`} />\r\n          </H6>\r\n          <hr className={css.totalDivider} />\r\n        </div>\r\n      ) : null}\r\n      {breakdown}\r\n    </div>\r\n  );\r\n};\r\n\r\nDetailsSideCard.defaultProps = {\r\n  speculateTransactionErrorMessage: null,\r\n  breakdown: null,\r\n};\r\n\r\nDetailsSideCard.propTypes = {\r\n  listing: propTypes.listing.isRequired,\r\n  listingTitle: string.isRequired,\r\n  author: propTypes.user.isRequired,\r\n  firstImage: propTypes.image.isRequired,\r\n  layoutListingImageConfig: object.isRequired,\r\n  speculateTransactionErrorMessage: node,\r\n  processName: string.isRequired,\r\n  breakdown: node,\r\n};\r\n\r\nexport default DetailsSideCard;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport { AspectRatioWrapper, AvatarMedium, ResponsiveImage } from '../../components';\r\n\r\nimport css from './CheckoutPage.module.css';\r\n\r\nconst MobileListingImage = props => {\r\n  const { listingTitle, author, firstImage, layoutListingImageConfig } = props;\r\n\r\n  const { aspectWidth = 1, aspectHeight = 1, variantPrefix = 'listing-card' } =\r\n    layoutListingImageConfig || {};\r\n  const variants = firstImage\r\n    ? Object.keys(firstImage?.attributes?.variants).filter(k => k.startsWith(variantPrefix))\r\n    : [];\r\n\r\n  return (\r\n    <>\r\n      <AspectRatioWrapper\r\n        width={aspectWidth}\r\n        height={aspectHeight}\r\n        className={css.listingImageMobile}\r\n      >\r\n        <ResponsiveImage\r\n          rootClassName={css.rootForImage}\r\n          alt={listingTitle}\r\n          image={firstImage}\r\n          variants={variants}\r\n        />\r\n      </AspectRatioWrapper>\r\n      <div className={classNames(css.avatarWrapper, css.avatarMobile)}>\r\n        <AvatarMedium user={author} disableProfileLink />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MobileListingImage;\r\n","import React from 'react';\r\n\r\nimport css from './CheckoutPage.module.css';\r\n\r\nconst MobileOrderBreakdown = props => {\r\n  const { breakdown, speculateTransactionErrorMessage } = props;\r\n\r\n  return (\r\n    <div className={css.priceBreakdownContainer}>\r\n      {speculateTransactionErrorMessage}\r\n      {breakdown}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MobileOrderBreakdown;\r\n","import React, { useState } from 'react';\r\nimport { arrayOf, bool, func, object, oneOfType, shape, string } from 'prop-types';\r\n\r\n// Import contexts and util modules\r\nimport { FormattedMessage, intlShape } from '../../util/reactIntl';\r\nimport { pathByRouteName } from '../../util/routes';\r\nimport { propTypes, LINE_ITEM_HOUR, DATE_TYPE_DATE, DATE_TYPE_DATETIME } from '../../util/types';\r\nimport { ensureTransaction } from '../../util/data';\r\nimport { createSlug } from '../../util/urlHelpers';\r\nimport { isTransactionInitiateListingNotFoundError } from '../../util/errors';\r\nimport { getProcess, isBookingProcessAlias } from '../../transactions/transaction';\r\n\r\n// Import shared components\r\nimport { H3, H4, NamedLink, OrderBreakdown, Page } from '../../components';\r\n\r\nimport {\r\n  bookingDatesMaybe,\r\n  getBillingDetails,\r\n  getFormattedTotalPrice,\r\n  getShippingDetailsMaybe,\r\n  getTransactionTypeData,\r\n  hasDefaultPaymentMethod,\r\n  hasPaymentExpired,\r\n  hasTransactionPassedPendingPayment,\r\n  processCheckoutWithPayment,\r\n  setOrderPageInitialValues,\r\n} from './CheckoutPageTransactionHelpers.js';\r\nimport { getErrorMessages } from './ErrorMessages';\r\n\r\nimport CustomTopbar from './CustomTopbar';\r\nimport StripePaymentForm from './StripePaymentForm/StripePaymentForm';\r\nimport DetailsSideCard from './DetailsSideCard';\r\nimport MobileListingImage from './MobileListingImage';\r\nimport MobileOrderBreakdown from './MobileOrderBreakdown';\r\n\r\nimport css from './CheckoutPage.module.css';\r\n\r\n// Stripe PaymentIntent statuses, where user actions are already completed\r\n// https://stripe.com/docs/payments/payment-intents/status\r\nconst STRIPE_PI_USER_ACTIONS_DONE_STATUSES = ['processing', 'requires_capture', 'succeeded'];\r\n\r\n// Payment charge options\r\nconst ONETIME_PAYMENT = 'ONETIME_PAYMENT';\r\nconst PAY_AND_SAVE_FOR_LATER_USE = 'PAY_AND_SAVE_FOR_LATER_USE';\r\nconst USE_SAVED_CARD = 'USE_SAVED_CARD';\r\n\r\nconst paymentFlow = (selectedPaymentMethod, saveAfterOnetimePayment) => {\r\n  // Payment mode could be 'replaceCard', but without explicit saveAfterOnetimePayment flag,\r\n  // we'll handle it as one-time payment\r\n  return selectedPaymentMethod === 'defaultCard'\r\n    ? USE_SAVED_CARD\r\n    : saveAfterOnetimePayment\r\n    ? PAY_AND_SAVE_FOR_LATER_USE\r\n    : ONETIME_PAYMENT;\r\n};\r\n\r\n/**\r\n * Construct orderParams object using pageData from session storage, shipping details, and optional payment params.\r\n * Note: This is used for both speculate transition and real transition\r\n *       - Speculate transition is called, when the the component is mounted. It's used to test if the data can go through the API validation\r\n *       - Real transition is made, when the user submits the StripePaymentForm.\r\n *\r\n * @param {Object} pageData data that's saved to session storage.\r\n * @param {Object} shippingDetails shipping address if applicable.\r\n * @param {Object} optionalPaymentParams (E.g. paymentMethod or setupPaymentMethodForSaving)\r\n * @param {Object} config app-wide configs. This contains hosted configs too.\r\n * @returns orderParams.\r\n */\r\nconst getOrderParams = (pageData, shippingDetails, optionalPaymentParams, config) => {\r\n  const quantity = pageData.orderData?.quantity;\r\n  const quantityMaybe = quantity ? { quantity } : {};\r\n  const deliveryMethod = pageData.orderData?.deliveryMethod;\r\n  const deliveryMethodMaybe = deliveryMethod ? { deliveryMethod } : {};\r\n\r\n  const { listingType, unitType } = pageData?.listing?.attributes?.publicData || {};\r\n  const protectedDataMaybe = {\r\n    protectedData: {\r\n      ...getTransactionTypeData(listingType, unitType, config),\r\n      ...deliveryMethodMaybe,\r\n      ...shippingDetails,\r\n    },\r\n  };\r\n\r\n  // These are the order parameters for the first payment-related transition\r\n  // which is either initiate-transition or initiate-transition-after-enquiry\r\n  const orderParams = {\r\n    listingId: pageData?.listing?.id,\r\n    ...deliveryMethodMaybe,\r\n    ...quantityMaybe,\r\n    ...bookingDatesMaybe(pageData.orderData?.bookingDates),\r\n    ...protectedDataMaybe,\r\n    ...optionalPaymentParams,\r\n  };\r\n  return orderParams;\r\n};\r\n\r\nconst fetchSpeculatedTransactionIfNeeded = (orderParams, pageData, fetchSpeculatedTransaction) => {\r\n  const tx = pageData ? pageData.transaction : null;\r\n  const pageDataListing = pageData.listing;\r\n  const processName =\r\n    tx?.attributes?.processName ||\r\n    pageDataListing?.attributes?.publicData?.transactionProcessAlias?.split('/')[0];\r\n  const process = processName ? getProcess(processName) : null;\r\n\r\n  // If transaction has passed payment-pending state, speculated tx is not needed.\r\n  const shouldFetchSpeculatedTransaction =\r\n    !!pageData?.listing?.id &&\r\n    !!pageData.orderData &&\r\n    !!process &&\r\n    !hasTransactionPassedPendingPayment(tx, process);\r\n\r\n  if (shouldFetchSpeculatedTransaction) {\r\n    const processAlias = pageData.listing.attributes.publicData?.transactionProcessAlias;\r\n    const transactionId = tx ? tx.id : null;\r\n    const isInquiryInPaymentProcess =\r\n      tx?.attributes?.lastTransition === process.transitions.INQUIRE;\r\n\r\n    const requestTransition = isInquiryInPaymentProcess\r\n      ? process.transitions.REQUEST_PAYMENT_AFTER_INQUIRY\r\n      : process.transitions.REQUEST_PAYMENT;\r\n    const isPrivileged = process.isPrivileged(requestTransition);\r\n\r\n    fetchSpeculatedTransaction(\r\n      orderParams,\r\n      processAlias,\r\n      transactionId,\r\n      requestTransition,\r\n      isPrivileged\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Load initial data for the page\r\n *\r\n * Since the data for the checkout is not passed in the URL (there\r\n * might be lots of options in the future), we must pass in the data\r\n * some other way. Currently the ListingPage sets the initial data\r\n * for the CheckoutPage's Redux store.\r\n *\r\n * For some cases (e.g. a refresh in the CheckoutPage), the Redux\r\n * store is empty. To handle that case, we store the received data\r\n * to window.sessionStorage and read it from there if no props from\r\n * the store exist.\r\n *\r\n * This function also sets of fetching the speculative transaction\r\n * based on this initial data.\r\n */\r\nexport const loadInitialDataForStripePayments = ({\r\n  pageData,\r\n  fetchSpeculatedTransaction,\r\n  fetchStripeCustomer,\r\n  config,\r\n}) => {\r\n  // Fetch currentUser with stripeCustomer entity\r\n  // Note: since there's need for data loading in \"componentWillMount\" function,\r\n  //       this is added here instead of loadData static function.\r\n  fetchStripeCustomer();\r\n\r\n  // Fetch speculated transaction for showing price in order breakdown\r\n  // NOTE: if unit type is line-item/item, quantity needs to be added.\r\n  // The way to pass it to checkout page is through pageData.orderData\r\n  const shippingDetails = {};\r\n  const optionalPaymentParams = {};\r\n  const orderParams = getOrderParams(pageData, shippingDetails, optionalPaymentParams, config);\r\n\r\n  fetchSpeculatedTransactionIfNeeded(orderParams, pageData, fetchSpeculatedTransaction);\r\n};\r\n\r\nconst handleSubmit = (values, process, props, stripe, submitting, setSubmitting) => {\r\n  if (submitting) {\r\n    return;\r\n  }\r\n  setSubmitting(true);\r\n\r\n  const {\r\n    history,\r\n    config,\r\n    routeConfiguration,\r\n    speculatedTransaction,\r\n    currentUser,\r\n    stripeCustomerFetched,\r\n    paymentIntent,\r\n    dispatch,\r\n    onInitiateOrder,\r\n    onConfirmCardPayment,\r\n    onConfirmPayment,\r\n    onSendMessage,\r\n    onSavePaymentMethod,\r\n    onSubmitCallback,\r\n    pageData,\r\n    setPageData,\r\n    sessionStorageKey,\r\n  } = props;\r\n  const { card, message, paymentMethod: selectedPaymentMethod, formValues } = values;\r\n  const { saveAfterOnetimePayment: saveAfterOnetimePaymentRaw } = formValues;\r\n\r\n  const saveAfterOnetimePayment =\r\n    Array.isArray(saveAfterOnetimePaymentRaw) && saveAfterOnetimePaymentRaw.length > 0;\r\n  const selectedPaymentFlow = paymentFlow(selectedPaymentMethod, saveAfterOnetimePayment);\r\n  const hasDefaultPaymentMethodSaved = hasDefaultPaymentMethod(stripeCustomerFetched, currentUser);\r\n  const stripePaymentMethodId = hasDefaultPaymentMethodSaved\r\n    ? currentUser?.stripeCustomer?.defaultPaymentMethod?.attributes?.stripePaymentMethodId\r\n    : null;\r\n\r\n  // If paymentIntent status is not waiting user action,\r\n  // confirmCardPayment has been called previously.\r\n  const hasPaymentIntentUserActionsDone =\r\n    paymentIntent && STRIPE_PI_USER_ACTIONS_DONE_STATUSES.includes(paymentIntent.status);\r\n\r\n  const requestPaymentParams = {\r\n    pageData,\r\n    speculatedTransaction,\r\n    stripe,\r\n    card,\r\n    billingDetails: getBillingDetails(formValues),\r\n    message,\r\n    paymentIntent,\r\n    hasPaymentIntentUserActionsDone,\r\n    stripePaymentMethodId,\r\n    process,\r\n    onInitiateOrder,\r\n    onConfirmCardPayment,\r\n    onConfirmPayment,\r\n    onSendMessage,\r\n    onSavePaymentMethod,\r\n    sessionStorageKey,\r\n    stripeCustomer: currentUser?.stripeCustomer,\r\n    isPaymentFlowUseSavedCard: selectedPaymentFlow === USE_SAVED_CARD,\r\n    isPaymentFlowPayAndSaveCard: selectedPaymentFlow === PAY_AND_SAVE_FOR_LATER_USE,\r\n    setPageData,\r\n  };\r\n\r\n  const shippingDetails = getShippingDetailsMaybe(formValues);\r\n  // Note: optionalPaymentParams contains Stripe paymentMethod,\r\n  // but that can also be passed on Step 2\r\n  // stripe.confirmCardPayment(stripe, { payment_method: stripePaymentMethodId })\r\n  const optionalPaymentParams =\r\n    selectedPaymentFlow === USE_SAVED_CARD && hasDefaultPaymentMethodSaved\r\n      ? { paymentMethod: stripePaymentMethodId }\r\n      : selectedPaymentFlow === PAY_AND_SAVE_FOR_LATER_USE\r\n      ? { setupPaymentMethodForSaving: true }\r\n      : {};\r\n\r\n  // These are the order parameters for the first payment-related transition\r\n  // which is either initiate-transition or initiate-transition-after-enquiry\r\n  const orderParams = getOrderParams(pageData, shippingDetails, optionalPaymentParams, config);\r\n\r\n  // There are multiple XHR calls that needs to be made against Stripe API and Sharetribe Marketplace API on checkout with payments\r\n  processCheckoutWithPayment(orderParams, requestPaymentParams)\r\n    .then(response => {\r\n      const { orderId, messageSuccess, paymentMethodSaved } = response;\r\n      setSubmitting(false);\r\n\r\n      const initialMessageFailedToTransaction = messageSuccess ? null : orderId;\r\n      const orderDetailsPath = pathByRouteName('OrderDetailsPage', routeConfiguration, {\r\n        id: orderId.uuid,\r\n      });\r\n      const initialValues = {\r\n        initialMessageFailedToTransaction,\r\n        savePaymentMethodFailed: !paymentMethodSaved,\r\n      };\r\n\r\n      setOrderPageInitialValues(initialValues, routeConfiguration, dispatch);\r\n      onSubmitCallback();\r\n      history.push(orderDetailsPath);\r\n    })\r\n    .catch(err => {\r\n      console.error(err);\r\n      setSubmitting(false);\r\n    });\r\n};\r\n\r\nconst onStripeInitialized = (stripe, process, props) => {\r\n  const { paymentIntent, onRetrievePaymentIntent, pageData } = props;\r\n  const tx = pageData?.transaction || null;\r\n\r\n  // We need to get up to date PI, if payment is pending but it's not expired.\r\n  const shouldFetchPaymentIntent =\r\n    stripe &&\r\n    !paymentIntent &&\r\n    tx?.id &&\r\n    process?.getState(tx) === process?.states.PENDING_PAYMENT &&\r\n    !hasPaymentExpired(tx, process);\r\n\r\n  if (shouldFetchPaymentIntent) {\r\n    const { stripePaymentIntentClientSecret } =\r\n      tx.attributes.protectedData?.stripePaymentIntents?.default || {};\r\n\r\n    // Fetch up to date PaymentIntent from Stripe\r\n    onRetrievePaymentIntent({ stripe, stripePaymentIntentClientSecret });\r\n  }\r\n};\r\n\r\nexport const CheckoutPageWithPayment = props => {\r\n  const [submitting, setSubmitting] = useState(false);\r\n  // Initialized stripe library is saved to state - if it's needed at some point here too.\r\n  const [stripe, setStripe] = useState(null);\r\n\r\n  const {\r\n    scrollingDisabled,\r\n    speculateTransactionError,\r\n    speculatedTransaction: speculatedTransactionMaybe,\r\n    initiateOrderError,\r\n    confirmPaymentError,\r\n    intl,\r\n    currentUser,\r\n    confirmCardPaymentError,\r\n    paymentIntent,\r\n    retrievePaymentIntentError,\r\n    stripeCustomerFetched,\r\n    pageData,\r\n    processName,\r\n    listingTitle,\r\n    title,\r\n    config,\r\n  } = props;\r\n\r\n  // Since the listing data is already given from the ListingPage\r\n  // and stored to handle refreshes, it might not have the possible\r\n  // deleted or closed information in it. If the transaction\r\n  // initiate or the speculative initiate fail due to the listing\r\n  // being deleted or closed, we should dig the information from the\r\n  // errors and not the listing data.\r\n  const listingNotFound =\r\n    isTransactionInitiateListingNotFoundError(speculateTransactionError) ||\r\n    isTransactionInitiateListingNotFoundError(initiateOrderError);\r\n\r\n  const { listing, transaction, orderData } = pageData;\r\n  const existingTransaction = ensureTransaction(transaction);\r\n  const speculatedTransaction = ensureTransaction(speculatedTransactionMaybe, {}, null);\r\n\r\n  // If existing transaction has line-items, it has gone through one of the request-payment transitions.\r\n  // Otherwise, we try to rely on speculatedTransaction for order breakdown data.\r\n  const tx =\r\n    existingTransaction?.attributes?.lineItems?.length > 0\r\n      ? existingTransaction\r\n      : speculatedTransaction;\r\n  const timeZone = listing?.attributes?.availabilityPlan?.timezone;\r\n  const transactionProcessAlias = listing?.attributes?.publicData?.transactionProcessAlias;\r\n  const unitType = listing?.attributes?.publicData?.unitType;\r\n  const lineItemUnitType = `line-item/${unitType}`;\r\n  const dateType = lineItemUnitType === LINE_ITEM_HOUR ? DATE_TYPE_DATETIME : DATE_TYPE_DATE;\r\n  const txBookingMaybe = tx?.booking?.id ? { booking: tx.booking, dateType, timeZone } : {};\r\n\r\n  // Show breakdown only when (speculated?) transaction is loaded\r\n  // (i.e. it has an id and lineItems)\r\n  const breakdown =\r\n    tx.id && tx.attributes.lineItems?.length > 0 ? (\r\n      <OrderBreakdown\r\n        className={css.orderBreakdown}\r\n        userRole=\"customer\"\r\n        transaction={tx}\r\n        {...txBookingMaybe}\r\n        currency={config.currency}\r\n        marketplaceName={config.marketplaceName}\r\n      />\r\n    ) : null;\r\n\r\n  const totalPrice =\r\n    tx?.attributes?.lineItems?.length > 0 ? getFormattedTotalPrice(tx, intl) : null;\r\n\r\n  const process = processName ? getProcess(processName) : null;\r\n  const transitions = process.transitions;\r\n  const isPaymentExpired = hasPaymentExpired(existingTransaction, process);\r\n\r\n  // Allow showing page when currentUser is still being downloaded,\r\n  // but show payment form only when user info is loaded.\r\n  const showPaymentForm = !!(\r\n    currentUser &&\r\n    !listingNotFound &&\r\n    !initiateOrderError &&\r\n    !speculateTransactionError &&\r\n    !retrievePaymentIntentError &&\r\n    !isPaymentExpired\r\n  );\r\n\r\n  const firstImage = listing?.images?.length > 0 ? listing.images[0] : null;\r\n\r\n  const listingLink = (\r\n    <NamedLink\r\n      name=\"ListingPage\"\r\n      params={{ id: listing?.id?.uuid, slug: createSlug(listingTitle) }}\r\n    >\r\n      <FormattedMessage id=\"CheckoutPage.errorlistingLinkText\" />\r\n    </NamedLink>\r\n  );\r\n\r\n  const errorMessages = getErrorMessages(\r\n    listingNotFound,\r\n    initiateOrderError,\r\n    isPaymentExpired,\r\n    retrievePaymentIntentError,\r\n    speculateTransactionError,\r\n    listingLink\r\n  );\r\n\r\n  const txTransitions = existingTransaction?.attributes?.transitions || [];\r\n  const hasInquireTransition = txTransitions.find(tr => tr.transition === transitions.INQUIRE);\r\n  const showInitialMessageInput = !hasInquireTransition;\r\n\r\n  // Get first and last name of the current user and use it in the StripePaymentForm to autofill the name field\r\n  const userName = currentUser?.attributes?.profile\r\n    ? `${currentUser.attributes.profile.firstName} ${currentUser.attributes.profile.lastName}`\r\n    : null;\r\n\r\n  // If paymentIntent status is not waiting user action,\r\n  // confirmCardPayment has been called previously.\r\n  const hasPaymentIntentUserActionsDone =\r\n    paymentIntent && STRIPE_PI_USER_ACTIONS_DONE_STATUSES.includes(paymentIntent.status);\r\n\r\n  // If your marketplace works mostly in one country you can use initial values to select country automatically\r\n  // e.g. {country: 'FI'}\r\n\r\n  const initalValuesForStripePayment = { name: userName, recipientName: userName };\r\n  const askShippingDetails =\r\n    orderData?.deliveryMethod === 'shipping' &&\r\n    !hasTransactionPassedPendingPayment(existingTransaction, process);\r\n\r\n  return (\r\n    <Page title={title} scrollingDisabled={scrollingDisabled}>\r\n      <CustomTopbar intl={intl} />\r\n      <div className={css.contentContainer}>\r\n        <MobileListingImage\r\n          listingTitle={listingTitle}\r\n          author={listing?.author}\r\n          firstImage={firstImage}\r\n          layoutListingImageConfig={config.layout.listingImage}\r\n        />\r\n        <div className={css.orderFormContainer}>\r\n          <div className={css.headingContainer}>\r\n            <H3 as=\"h1\" className={css.heading}>\r\n              {title}\r\n            </H3>\r\n            <H4 as=\"h2\" className={css.detailsHeadingMobile}>\r\n              <FormattedMessage id=\"CheckoutPage.listingTitle\" values={{ listingTitle }} />\r\n            </H4>\r\n          </div>\r\n\r\n          <MobileOrderBreakdown\r\n            speculateTransactionErrorMessage={errorMessages.speculateTransactionErrorMessage}\r\n            breakdown={breakdown}\r\n          />\r\n\r\n          <section className={css.paymentContainer}>\r\n            {errorMessages.initiateOrderErrorMessage}\r\n            {errorMessages.listingNotFoundErrorMessage}\r\n            {errorMessages.speculateErrorMessage}\r\n            {errorMessages.retrievePaymentIntentErrorMessage}\r\n            {errorMessages.paymentExpiredMessage}\r\n\r\n            {showPaymentForm ? (\r\n              <StripePaymentForm\r\n                className={css.paymentForm}\r\n                onSubmit={values =>\r\n                  handleSubmit(values, process, props, stripe, submitting, setSubmitting)\r\n                }\r\n                inProgress={submitting}\r\n                formId=\"CheckoutPagePaymentForm\"\r\n                authorDisplayName={listing?.author?.attributes?.profile?.displayName}\r\n                showInitialMessageInput={showInitialMessageInput}\r\n                initialValues={initalValuesForStripePayment}\r\n                initiateOrderError={initiateOrderError}\r\n                confirmCardPaymentError={confirmCardPaymentError}\r\n                confirmPaymentError={confirmPaymentError}\r\n                hasHandledCardPayment={hasPaymentIntentUserActionsDone}\r\n                loadingData={!stripeCustomerFetched}\r\n                defaultPaymentMethod={\r\n                  hasDefaultPaymentMethod(stripeCustomerFetched, currentUser)\r\n                    ? currentUser.stripeCustomer.defaultPaymentMethod\r\n                    : null\r\n                }\r\n                paymentIntent={paymentIntent}\r\n                onStripeInitialized={stripe => {\r\n                  setStripe(stripe);\r\n                  return onStripeInitialized(stripe, process, props);\r\n                }}\r\n                askShippingDetails={askShippingDetails}\r\n                showPickUplocation={orderData?.deliveryMethod === 'pickup'}\r\n                listingLocation={listing?.attributes?.publicData?.location}\r\n                totalPrice={totalPrice}\r\n                locale={config.localization.locale}\r\n                stripePublishableKey={config.stripe.publishableKey}\r\n                marketplaceName={config.marketplaceName}\r\n                isBooking={isBookingProcessAlias(transactionProcessAlias)}\r\n                isFuzzyLocation={config.maps.fuzzy.enabled}\r\n              />\r\n            ) : null}\r\n          </section>\r\n        </div>\r\n\r\n        <DetailsSideCard\r\n          listing={listing}\r\n          listingTitle={listingTitle}\r\n          author={listing?.author}\r\n          firstImage={firstImage}\r\n          layoutListingImageConfig={config.layout.listingImage}\r\n          speculateTransactionErrorMessage={errorMessages.speculateTransactionErrorMessage}\r\n          isInquiryProcess={false}\r\n          processName={processName}\r\n          breakdown={breakdown}\r\n          intl={intl}\r\n        />\r\n      </div>\r\n    </Page>\r\n  );\r\n};\r\n\r\nCheckoutPageWithPayment.defaultProps = {\r\n  initiateOrderError: null,\r\n  confirmPaymentError: null,\r\n  listing: null,\r\n  orderData: {},\r\n  speculateTransactionError: null,\r\n  speculatedTransaction: null,\r\n  transaction: null,\r\n  currentUser: null,\r\n  paymentIntent: null,\r\n};\r\n\r\nCheckoutPageWithPayment.propTypes = {\r\n  scrollingDisabled: bool.isRequired,\r\n  listing: propTypes.listing,\r\n  orderData: object,\r\n  fetchStripeCustomer: func.isRequired,\r\n  stripeCustomerFetched: bool.isRequired,\r\n  fetchSpeculatedTransaction: func.isRequired,\r\n  speculateTransactionInProgress: bool.isRequired,\r\n  speculateTransactionError: propTypes.error,\r\n  speculatedTransaction: propTypes.transaction,\r\n  transaction: propTypes.transaction,\r\n  currentUser: propTypes.currentUser,\r\n  params: shape({\r\n    id: string,\r\n    slug: string,\r\n  }).isRequired,\r\n  onConfirmPayment: func.isRequired,\r\n  onInitiateOrder: func.isRequired,\r\n  onConfirmCardPayment: func.isRequired,\r\n  onRetrievePaymentIntent: func.isRequired,\r\n  onSavePaymentMethod: func.isRequired,\r\n  onSendMessage: func.isRequired,\r\n  initiateOrderError: propTypes.error,\r\n  confirmPaymentError: propTypes.error,\r\n  // confirmCardPaymentError comes from Stripe so that's why we can't expect it to be in a specific form\r\n  confirmCardPaymentError: oneOfType([propTypes.error, object]),\r\n  paymentIntent: object,\r\n\r\n  // from connect\r\n  dispatch: func.isRequired,\r\n\r\n  // from useIntl\r\n  intl: intlShape.isRequired,\r\n\r\n  // from useConfiguration\r\n  config: object.isRequired,\r\n\r\n  // from useRouteConfiguration\r\n  routeConfiguration: arrayOf(propTypes.route).isRequired,\r\n\r\n  // from useHistory\r\n  history: shape({\r\n    push: func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default CheckoutPageWithPayment;\r\n","import React from 'react';\r\n\r\nimport { FormattedMessage } from '../../util/reactIntl';\r\nimport {\r\n  isTransactionInitiateAmountTooLowError,\r\n  isTransactionInitiShwcseissingStripeAccountError,\r\n  isTransactionInitiateBookingTimeNotAvailableError,\r\n  isTransactionInitiateListingInsufficientStockError,\r\n  isTransactionChargeDisabledError,\r\n  isTransactionZeroPaymentError,\r\n  isTransitionQuantityInfoMissingError,\r\n  isTooManyRequestsError,\r\n  transactionInitiateOrderStripeErrors,\r\n} from '../../util/errors';\r\n\r\nimport css from './CheckoutPage.module.css';\r\n\r\n// Collect error message checks to a single function.\r\nexport const getErrorMessages = (\r\n  listingNotFound,\r\n  initiateOrderError,\r\n  isPaymentExpired,\r\n  retrievePaymentIntentError,\r\n  speculateTransactionError,\r\n  listingLink\r\n) => {\r\n  let listingNotFoundErrorMessage = null;\r\n  let initiateOrderErrorMessage = null;\r\n  let speculateErrorMessage = null;\r\n\r\n  const isAmountTooLowError = isTransactionInitiateAmountTooLowError(initiateOrderError);\r\n  const isChargeDisabledError = isTransactionChargeDisabledError(initiateOrderError);\r\n  const stripeErrors = transactionInitiateOrderStripeErrors(initiateOrderError);\r\n\r\n  // We want to show one error at a time for the real transition\r\n  if (listingNotFound) {\r\n    listingNotFoundErrorMessage = <FormattedMessage id=\"CheckoutPage.listingNotFoundError\" />;\r\n  } else if (isAmountTooLowError) {\r\n    initiateOrderErrorMessage = <FormattedMessage id=\"CheckoutPage.initiateOrderAmountTooLow\" />;\r\n  } else if (isTransactionInitiateBookingTimeNotAvailableError(initiateOrderError)) {\r\n    // If bookings are used, there could be error related to those\r\n    initiateOrderErrorMessage = (\r\n      <FormattedMessage id=\"CheckoutPage.bookingTimeNotAvailableMessage\" />\r\n    );\r\n  } else if (isTransitionQuantityInfoMissingError(initiateOrderError)) {\r\n    initiateOrderErrorMessage = (\r\n      <FormattedMessage id=\"CheckoutPage.correctQuantityInformationMissing\" />\r\n    );\r\n  } else if (isTransactionInitiateListingInsufficientStockError(initiateOrderError)) {\r\n    // If stock management is used, there could be error related to that\r\n    initiateOrderErrorMessage = <FormattedMessage id=\"CheckoutPage.notEnoughStockMessage\" />;\r\n  } else if (isChargeDisabledError) {\r\n    initiateOrderErrorMessage = <FormattedMessage id=\"CheckoutPage.chargeDisabledMessage\" />;\r\n  } else if (stripeErrors && stripeErrors.length > 0) {\r\n    const noAccountMsg =\r\n      'Your destination account needs to have at least one of the following capabilities enabled';\r\n    if (stripeErrors.length === 1 && stripeErrors[0].indexOf(noAccountMsg) > -1) {\r\n      initiateOrderErrorMessage = (\r\n        <FormattedMessage id=\"CheckoutPage.destinationAccountNotCompleteStripeError\" />\r\n      );\r\n    } else {\r\n      // NOTE: Error messages from Stripes are not part of translations.\r\n      // By default they are in English.\r\n      const stripeErrorsAsString = stripeErrors.join(', ');\r\n      initiateOrderErrorMessage = (\r\n        <FormattedMessage\r\n          id=\"CheckoutPage.initiateOrderStripeError\"\r\n          values={{ stripeErrors: stripeErrorsAsString }}\r\n        />\r\n      );\r\n    }\r\n  } else if (isTooManyRequestsError(initiateOrderError)) {\r\n    // 429 Too Many Requests\r\n    initiateOrderErrorMessage = <FormattedMessage id=\"CheckoutPage.tooManyRequestsError\" />;\r\n  } else if (initiateOrderError) {\r\n    // Generic initiate order error\r\n    initiateOrderErrorMessage = (\r\n      <FormattedMessage id=\"CheckoutPage.initiateOrderError\" values={{ listingLink }} />\r\n    );\r\n  }\r\n\r\n  // We want to show one error at a time for speculateTransition\r\n  if (isTransactionInitiShwcseissingStripeAccountError(speculateTransactionError)) {\r\n    speculateErrorMessage = (\r\n      <FormattedMessage id=\"CheckoutPage.providerStripeAccountMissingError\" />\r\n    );\r\n  } else if (isTransactionInitiateBookingTimeNotAvailableError(speculateTransactionError)) {\r\n    speculateErrorMessage = <FormattedMessage id=\"CheckoutPage.bookingTimeNotAvailableMessage\" />;\r\n  } else if (isTransactionInitiateListingInsufficientStockError(speculateTransactionError)) {\r\n    speculateErrorMessage = <FormattedMessage id=\"CheckoutPage.notEnoughStockMessage\" />;\r\n  } else if (isTransactionZeroPaymentError(speculateTransactionError)) {\r\n    speculateErrorMessage = <FormattedMessage id=\"CheckoutPage.initiateOrderAmountTooLow\" />;\r\n  } else if (isTransitionQuantityInfoMissingError(speculateTransactionError)) {\r\n    speculateErrorMessage = (\r\n      <FormattedMessage id=\"CheckoutPage.correctQuantityInformationMissing\" />\r\n    );\r\n  } else if (speculateTransactionError) {\r\n    speculateErrorMessage = <FormattedMessage id=\"CheckoutPage.speculateFailedMessage\" />;\r\n  }\r\n\r\n  // Add paragraph-container for the error message, if it exists\r\n  const listingNotFoundErrorMessageParagraph = listingNotFoundErrorMessage ? (\r\n    <p className={css.notFoundError}>{listingNotFoundErrorMessage}</p>\r\n  ) : null;\r\n  const initiateOrderErrorMessageParagraph = initiateOrderErrorMessage ? (\r\n    <p className={css.orderError}>{initiateOrderErrorMessage}</p>\r\n  ) : null;\r\n  const speculateErrorMessageParagraph = speculateErrorMessage ? (\r\n    <p className={css.orderError}>{speculateErrorMessage}</p>\r\n  ) : null;\r\n  const speculateTransactionErrorMessageParagraph =\r\n    speculateTransactionError &&\r\n    !isTransactionInitiShwcseissingStripeAccountError(speculateTransactionError) ? (\r\n      <p className={css.speculateError}>\r\n        <FormattedMessage id=\"CheckoutPage.speculateTransactionError\" />\r\n      </p>\r\n    ) : null;\r\n\r\n  // Stripe might throw error when retrieving payment intent\r\n  const retrievePaymentIntentErrorMessageParagraph = retrievePaymentIntentError ? (\r\n    <p className={css.orderError}>\r\n      <FormattedMessage\r\n        id=\"CheckoutPage.retrievingStripePaymentIntentFailed\"\r\n        values={{ listingLink }}\r\n      />\r\n    </p>\r\n  ) : null;\r\n\r\n  // Stripe related processes have payment expiration (15 min time-window to confirm the payment)\r\n  const paymentExpiredMessageParagraph = isPaymentExpired ? (\r\n    <p className={css.orderError}>\r\n      <FormattedMessage id=\"CheckoutPage.paymentExpiredMessage\" values={{ listingLink }} />\r\n    </p>\r\n  ) : null;\r\n\r\n  return {\r\n    listingNotFoundErrorMessage: listingNotFoundErrorMessageParagraph,\r\n    initiateOrderErrorMessage: initiateOrderErrorMessageParagraph,\r\n    paymentExpiredMessage: paymentExpiredMessageParagraph,\r\n    retrievePaymentIntentErrorMessage: retrievePaymentIntentErrorMessageParagraph,\r\n    speculateErrorMessage: speculateErrorMessageParagraph,\r\n    speculateTransactionErrorMessage: speculateTransactionErrorMessageParagraph,\r\n  };\r\n};\r\n","import React, { useState } from 'react';\r\nimport { bool, node, object, shape, string } from 'prop-types';\r\nimport { Form as FinalForm } from 'react-final-form';\r\nimport classNames from 'classnames';\r\n\r\n// Import contexts and util modules\r\nimport { FormattedMessage, intlShape } from '../../util/reactIntl';\r\nimport { displayPrice } from '../../util/configHelpers';\r\nimport { pathByRouteName } from '../../util/routes';\r\nimport { propTypes } from '../../util/types';\r\nimport { formatMoney } from '../../util/currency';\r\nimport { createSlug } from '../../util/urlHelpers';\r\nimport { isTransactionInitiateListingNotFoundError } from '../../util/errors';\r\nimport * as validators from '../../util/validators';\r\nimport { getProcess } from '../../transactions/transaction';\r\n\r\n// Import shared components\r\nimport {\r\n  FieldTextInput,\r\n  Form,\r\n  H3,\r\n  H4,\r\n  Heading,\r\n  NamedLink,\r\n  Page,\r\n  PrimaryButton,\r\n} from '../../components';\r\n\r\nimport { getTransactionTypeData } from './CheckoutPageTransactionHelpers.js';\r\n\r\nimport CustomTopbar from './CustomTopbar';\r\nimport DetailsSideCard from './DetailsSideCard';\r\nimport MobileListingImage from './MobileListingImage';\r\n\r\nimport css from './CheckoutPage.module.css';\r\n\r\nconst ErrorMessage = props => {\r\n  const { error } = props;\r\n\r\n  // Since the listing data is already given from the ListingPage\r\n  // and stored to handle refreshes, it might not have the possible\r\n  // deleted or closed information in it. If the transaction\r\n  // initiate or the speculative initiate fail due to the listing\r\n  // being deleted or closed, we should dig the information from the\r\n  // errors and not the listing data.\r\n  const listingNotFound = isTransactionInitiateListingNotFoundError(error);\r\n\r\n  // No transaction process attached to listing\r\n  const noTransactionProcessAlias = error?.message === 'No transaction process attached to listing';\r\n\r\n  return error ? (\r\n    <p className={css.error}>\r\n      {listingNotFound ? (\r\n        <FormattedMessage id=\"CheckoutPage.listingNotFoundError\" />\r\n      ) : noTransactionProcessAlias ? (\r\n        <FormattedMessage id=\"CheckoutPageWithInquiryProcess.initiateInquiryErrorNoProcess\" />\r\n      ) : (\r\n        <FormattedMessage id=\"CheckoutPageWithInquiryProcess.initiateInquiryError\" />\r\n      )}\r\n    </p>\r\n  ) : null;\r\n};\r\n\r\nconst handleSubmit = (submitting, setSubmitting, props) => values => {\r\n  if (submitting) {\r\n    return;\r\n  }\r\n  setSubmitting(true);\r\n\r\n  const {\r\n    history,\r\n    config,\r\n    routeConfiguration,\r\n    pageData,\r\n    processName,\r\n    onInquiryWithoutPayment,\r\n    onSubmitCallback,\r\n  } = props;\r\n\r\n  const { inquiryMessage } = values;\r\n\r\n  const { listingType, transactionProcessAlias, unitType } =\r\n    pageData?.listing?.attributes?.publicData || {};\r\n\r\n  const process = processName ? getProcess(processName) : null;\r\n  const transitions = process.transitions;\r\n  const transition = transitions.INQUIRE_WITHOUT_PAYMENT;\r\n\r\n  // These are the inquiry parameters for the (one and only) transition\r\n  const inquiryParams = {\r\n    listingId: pageData?.listing?.id,\r\n    protectedData: {\r\n      inquiryMessage,\r\n      ...getTransactionTypeData(listingType, unitType, config),\r\n    },\r\n  };\r\n\r\n  // This makes a single transition directly to the API endpoint\r\n  // (unlike in the payment-related processes, where call is proxied through the server to make privileged transition)\r\n  onInquiryWithoutPayment(inquiryParams, transactionProcessAlias, transition)\r\n    .then(transactionId => {\r\n      setSubmitting(false);\r\n      onSubmitCallback();\r\n\r\n      const orderDetailsPath = pathByRouteName('OrderDetailsPage', routeConfiguration, {\r\n        id: transactionId.uuid,\r\n      });\r\n      history.push(orderDetailsPath);\r\n    })\r\n    .catch(err => {\r\n      console.error(err);\r\n      setSubmitting(false);\r\n    });\r\n};\r\n\r\nexport const CheckoutPageWithInquiryProcess = props => {\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  const {\r\n    scrollingDisabled,\r\n    intl,\r\n    config,\r\n    processName,\r\n    pageData,\r\n    listingTitle,\r\n    title,\r\n    initiateInquiryError,\r\n  } = props;\r\n\r\n  const onSubmit = handleSubmit(submitting, setSubmitting, props);\r\n\r\n  const { listing } = pageData;\r\n  const { price, publicData } = listing?.attributes || {};\r\n  const firstImage = listing?.images?.length > 0 ? listing.images[0] : null;\r\n  const listingTitleLink = (\r\n    <NamedLink\r\n      name=\"ListingPage\"\r\n      params={{ id: listing?.id?.uuid, slug: createSlug(listingTitle) }}\r\n    >\r\n      {listingTitle}\r\n    </NamedLink>\r\n  );\r\n\r\n  const listingType = publicData?.listingType;\r\n  const listingTypeConfigs = config.listing.listingTypes;\r\n  const listingTypeConfig = listingTypeConfigs.find(conf => conf.listingType === listingType);\r\n  const showPrice = displayPrice(listingTypeConfig);\r\n\r\n  return (\r\n    <Page title={title} scrollingDisabled={scrollingDisabled}>\r\n      <CustomTopbar intl={intl} />\r\n      <div className={css.contentContainer}>\r\n        <MobileListingImage\r\n          listingTitle={listingTitle}\r\n          author={listing?.author}\r\n          firstImage={firstImage}\r\n          layoutListingImageConfig={config.layout.listingImage}\r\n        />\r\n        <div className={css.orderFormContainer}>\r\n          <div className={css.headingContainer}>\r\n            <H3 as=\"h1\" className={css.heading}>\r\n              {title}\r\n            </H3>\r\n            <H4 as=\"h2\" className={css.detailsHeadingMobile}>\r\n              <FormattedMessage\r\n                id=\"CheckoutPage.listingTitle\"\r\n                values={{ listingTitle: listingTitleLink }}\r\n              />\r\n\r\n              {showPrice && price ? (\r\n                <>\r\n                  <br />\r\n                  <span className={css.inquiryPrice}>{formatMoney(intl, price)}</span>\r\n                </>\r\n              ) : null}\r\n            </H4>\r\n          </div>\r\n\r\n          <section className={css.paymentContainer}>\r\n            <FinalForm\r\n              onSubmit={onSubmit}\r\n              render={formRenderProps => {\r\n                const {\r\n                  rootClassName,\r\n                  className,\r\n                  submitButtonWrapperClassName,\r\n                  formId,\r\n                  handleSubmit,\r\n                  inProgress,\r\n                  authorDisplayName,\r\n                } = formRenderProps;\r\n\r\n                const classes = classNames(rootClassName || css.root, className);\r\n                const submitInProgress = inProgress;\r\n                const submitDisabled = submitInProgress;\r\n\r\n                return (\r\n                  <Form\r\n                    className={classes}\r\n                    onSubmit={handleSubmit}\r\n                    enforcePagePreloadFor=\"OrderDetailsPage\"\r\n                  >\r\n                    <div className={css.section}>\r\n                      <Heading as=\"h4\" rootClassName={css.sectionHeading}>\r\n                        <FormattedMessage\r\n                          id=\"CheckoutPageWithInquiryProcess.messageLabel\"\r\n                          values={{ authorDisplayName }}\r\n                        />\r\n                      </Heading>\r\n\r\n                      <FieldTextInput\r\n                        className={css.fieldInquiryMessage}\r\n                        type=\"textarea\"\r\n                        name=\"inquiryMessage\"\r\n                        id={formId ? `${formId}.message` : 'message'}\r\n                        placeholder={intl.formatMessage(\r\n                          {\r\n                            id: 'CheckoutPageWithInquiryProcess.messagePlaceholder',\r\n                          },\r\n                          { authorDisplayName }\r\n                        )}\r\n                        validate={validators.requiredAndNonEmptyString(\r\n                          intl.formatMessage({\r\n                            id: 'CheckoutPageWithInquiryProcess.messageRequired',\r\n                          })\r\n                        )}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className={submitButtonWrapperClassName}>\r\n                      <ErrorMessage error={initiateInquiryError} />\r\n                      <PrimaryButton\r\n                        type=\"submit\"\r\n                        inProgress={submitInProgress}\r\n                        disabled={submitDisabled}\r\n                      >\r\n                        <FormattedMessage id=\"CheckoutPageWithInquiryProcess.submitButtonText\" />\r\n                      </PrimaryButton>\r\n                    </div>\r\n                  </Form>\r\n                );\r\n              }}\r\n            />\r\n          </section>\r\n        </div>\r\n\r\n        <DetailsSideCard\r\n          listing={listing}\r\n          listingTitle={listingTitle}\r\n          author={listing?.author}\r\n          firstImage={firstImage}\r\n          layoutListingImageConfig={config.layout.listingImage}\r\n          processName={processName}\r\n          showPrice={showPrice && !!price}\r\n          intl={intl}\r\n        />\r\n      </div>\r\n    </Page>\r\n  );\r\n};\r\n\r\nCheckoutPageWithInquiryProcess.propTypes = {\r\n  showPrice: true,\r\n};\r\n\r\nCheckoutPageWithInquiryProcess.propTypes = {\r\n  scrollingDisabled: bool.isRequired,\r\n  pageData: shape({\r\n    listing: propTypes.listing.isRequired,\r\n    transaction: propTypes.transaction,\r\n    orderData: object,\r\n  }).isRequired,\r\n  processName: string.isRequired,\r\n  listingTitle: node.isRequired,\r\n  title: node.isRequired,\r\n  showPrice: bool,\r\n\r\n  // from useIntl\r\n  intl: intlShape.isRequired,\r\n\r\n  // from useConfiguration\r\n  config: object.isRequired,\r\n};\r\n\r\nexport default CheckoutPageWithInquiryProcess;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useIntl } from 'react-intl';\r\n\r\n// Import contexts and util modules\r\nimport { useConfiguration } from '../../context/configurationContext';\r\nimport { useRouteConfiguration } from '../../context/routeConfigurationContext';\r\nimport { userDisplayNameAsString } from '../../util/data';\r\nimport { INQUIRY_PROCESS_NAME, resolveLatestProcessName } from '../../transactions/transaction';\r\n\r\n// Import global thunk functions\r\nimport { isScrollingDisabled } from '../../ducks/ui.duck';\r\nimport { confirmCardPayment, retrievePaymentIntent } from '../../ducks/stripe.duck';\r\nimport { savePaymentMethod } from '../../ducks/paymentMethods.duck';\r\n\r\n// Import shared components\r\nimport { NamedRedirect, Page } from '../../components';\r\n\r\n// Session helpers file needs to be imported before CheckoutPageWithPayment and CheckoutPageWithInquiryProcess\r\nimport { storeData, clearData, handlePageData } from './CheckoutPageSessionHelpers';\r\n\r\n// Import modules from this directory\r\nimport {\r\n  initiateOrder,\r\n  setInitialValues,\r\n  speculateTransaction,\r\n  stripeCustomer,\r\n  confirmPayment,\r\n  sendMessage,\r\n  initiateInquiryWithoutPayment,\r\n} from './CheckoutPage.duck';\r\n\r\nimport CustomTopbar from './CustomTopbar';\r\nimport CheckoutPageWithPayment, {\r\n  loadInitialDataForStripePayments,\r\n} from './CheckoutPageWithPayment';\r\nimport CheckoutPageWithInquiryProcess from './CheckoutPageWithInquiryProcess';\r\n\r\nconst STORAGE_KEY = 'CheckoutPage';\r\n\r\nconst onSubmitCallback = () => {\r\n  clearData(STORAGE_KEY);\r\n};\r\n\r\nconst getProcessName = pageData => {\r\n  const { transaction, listing } = pageData || {};\r\n  const processName = transaction?.id\r\n    ? transaction?.attributes?.processName\r\n    : listing?.id\r\n    ? listing?.attributes?.publicData?.transactionProcessAlias?.split('/')[0]\r\n    : null;\r\n  return resolveLatestProcessName(processName);\r\n};\r\n\r\nconst EnhancedCheckoutPage = props => {\r\n  const [pageData, setPageData] = useState({});\r\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\r\n  const config = useConfiguration();\r\n  const routeConfiguration = useRouteConfiguration();\r\n  const intl = useIntl();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const {\r\n      orderData,\r\n      listing,\r\n      transaction,\r\n      fetchSpeculatedTransaction,\r\n      fetchStripeCustomer,\r\n    } = props;\r\n    const initialData = { orderData, listing, transaction };\r\n    const data = handlePageData(initialData, STORAGE_KEY, history);\r\n    setPageData(data || {});\r\n    setIsDataLoaded(true);\r\n\r\n    // This is for processes using payments with Stripe integration\r\n    if (getProcessName(data) !== INQUIRY_PROCESS_NAME) {\r\n      // Fetch StripeCustomer and speculateTransition for transactions that include Stripe payments\r\n      loadInitialDataForStripePayments({\r\n        pageData: data || {},\r\n        fetchSpeculatedTransaction,\r\n        fetchStripeCustomer,\r\n        config,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const {\r\n    currentUser,\r\n    params,\r\n    scrollingDisabled,\r\n    speculateTransactionInProgress,\r\n    onInquiryWithoutPayment,\r\n  } = props;\r\n  const processName = getProcessName(pageData);\r\n  const isInquiryProcess = processName === INQUIRY_PROCESS_NAME;\r\n\r\n  // Handle redirection to ListingPage, if this is own listing or if required data is not available\r\n  const listing = pageData?.listing;\r\n  const isOwnListing = currentUser?.id && listing?.author?.id?.uuid === currentUser?.id?.uuid;\r\n  const hasRequiredData = !!(listing?.id && listing?.author?.id && processName);\r\n  const shouldRedirect = isDataLoaded && !(hasRequiredData && !isOwnListing);\r\n\r\n  // Redirect back to ListingPage if data is missing.\r\n  // Redirection must happen before any data format error is thrown (e.g. wrong currency)\r\n  if (shouldRedirect) {\r\n    // eslint-disable-next-line no-console\r\n    console.error('Missing or invalid data for checkout, redirecting back to listing page.', {\r\n      listing,\r\n    });\r\n    return <NamedRedirect name=\"ListingPage\" params={params} />;\r\n  }\r\n\r\n  const listingTitle = listing?.attributes?.title;\r\n  const authorDisplayName = userDisplayNameAsString(listing?.author, '');\r\n  const title = processName\r\n    ? intl.formatMessage(\r\n        { id: `CheckoutPage.${processName}.title` },\r\n        { listingTitle, authorDisplayName }\r\n      )\r\n    : 'Checkout page is loading data';\r\n\r\n  return processName && isInquiryProcess ? (\r\n    <CheckoutPageWithInquiryProcess\r\n      config={config}\r\n      routeConfiguration={routeConfiguration}\r\n      intl={intl}\r\n      history={history}\r\n      processName={processName}\r\n      pageData={pageData}\r\n      listingTitle={listingTitle}\r\n      title={title}\r\n      onInquiryWithoutPayment={onInquiryWithoutPayment}\r\n      onSubmitCallback={onSubmitCallback}\r\n      {...props}\r\n    />\r\n  ) : processName && !isInquiryProcess && !speculateTransactionInProgress ? (\r\n    <CheckoutPageWithPayment\r\n      config={config}\r\n      routeConfiguration={routeConfiguration}\r\n      intl={intl}\r\n      history={history}\r\n      processName={processName}\r\n      sessionStorageKey={STORAGE_KEY}\r\n      pageData={pageData}\r\n      setPageData={setPageData}\r\n      listingTitle={listingTitle}\r\n      title={title}\r\n      onSubmitCallback={onSubmitCallback}\r\n      {...props}\r\n    />\r\n  ) : (\r\n    <Page title={title} scrollingDisabled={scrollingDisabled}>\r\n      <CustomTopbar intl={intl} />\r\n    </Page>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const {\r\n    listing,\r\n    orderData,\r\n    stripeCustomerFetched,\r\n    speculateTransactionInProgress,\r\n    speculateTransactionError,\r\n    speculatedTransaction,\r\n    transaction,\r\n    initiateInquiryError,\r\n    initiateOrderError,\r\n    confirmPaymentError,\r\n  } = state.CheckoutPage;\r\n  const { currentUser } = state.user;\r\n  const { confirmCardPaymentError, paymentIntent, retrievePaymentIntentError } = state.stripe;\r\n  return {\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n    currentUser,\r\n    stripeCustomerFetched,\r\n    orderData,\r\n    speculateTransactionInProgress,\r\n    speculateTransactionError,\r\n    speculatedTransaction,\r\n    transaction,\r\n    listing,\r\n    initiateInquiryError,\r\n    initiateOrderError,\r\n    confirmCardPaymentError,\r\n    confirmPaymentError,\r\n    paymentIntent,\r\n    retrievePaymentIntentError,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  dispatch,\r\n  fetchSpeculatedTransaction: (params, processAlias, txId, transitionName, isPrivileged) =>\r\n    dispatch(speculateTransaction(params, processAlias, txId, transitionName, isPrivileged)),\r\n  fetchStripeCustomer: () => dispatch(stripeCustomer()),\r\n  onInquiryWithoutPayment: (params, processAlias, transitionName) =>\r\n    dispatch(initiateInquiryWithoutPayment(params, processAlias, transitionName)),\r\n  onInitiateOrder: (params, processAlias, transactionId, transitionName, isPrivileged) =>\r\n    dispatch(initiateOrder(params, processAlias, transactionId, transitionName, isPrivileged)),\r\n  onRetrievePaymentIntent: params => dispatch(retrievePaymentIntent(params)),\r\n  onConfirmCardPayment: params => dispatch(confirmCardPayment(params)),\r\n  onConfirmPayment: (transactionId, transitionName, transitionParams) =>\r\n    dispatch(confirmPayment(transactionId, transitionName, transitionParams)),\r\n  onSendMessage: params => dispatch(sendMessage(params)),\r\n  onSavePaymentMethod: (stripeCustomer, stripePaymentMethodId) =>\r\n    dispatch(savePaymentMethod(stripeCustomer, stripePaymentMethodId)),\r\n});\r\n\r\nconst CheckoutPage = compose(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )\r\n)(EnhancedCheckoutPage);\r\n\r\nCheckoutPage.setInitialValues = (initialValues, saveToSessionStorage = false) => {\r\n  if (saveToSessionStorage) {\r\n    const { listing, orderData } = initialValues;\r\n    storeData(orderData, listing, null, STORAGE_KEY);\r\n  }\r\n\r\n  return setInitialValues(initialValues);\r\n};\r\n\r\nCheckoutPage.displayName = 'CheckoutPage';\r\n\r\nexport default CheckoutPage;\r\n"],"names":["UUID","Money","sdkTypes","validateProperties","obj","validPropTypes","reduce","Object","entries","acc","_ref","prop","fn","prototype","hasOwnProperty","call","storeData","orderData","listing","transaction","storageKey","window","sessionStorage","data","storedAt","Date","replacer","k","v","this","date","_serializedType","Decimal","decimal","storableData","JSON","stringify","setItem","storedData","checkoutPageData","getItem","reviver","parse","bookingDates","isPotentiallyIncludedBookingDatesValid","bookingStart","d","bookingEnd","isValidBookingDates","isFreshlySaved","isAfterDate","subtractTime","isTransactionValid","process","_transaction$attribut","processName","attributes","getProcess","e","console","error","id","type","values","transitions","includes","lastTransition","isValidTransaction","isStoredDataValid","price","isValidListing","CustomTopbar","props","isMobile","setIsMobile","useState","useEffect","mediaQueryList","matchMedia","updateIsMobile","matches","addEventListener","removeEventListener","className","rootClassName","intl","classes","classNames","css","topbar","React","LinkedLogo","layout","alt","formatMessage","defaultProps","getTransactionTypeData","listingType","unitTypeInPublicData","config","listingTypeConfig","listingTypes","find","lt","alias","unitType","rest","transactionType","getBillingDetails","formValues","currentUser","_currentUser$attribut","name","addressLine1","addressLine2","postal","city","state","country","addressMaybe","address","line1","line2","postal_code","email","hasDefaultPaymentMethod","stripeCustomerFetched","_currentUser$stripeCu","_currentUser$stripeCu2","_currentUser$stripeCu3","_currentUser$stripeCu4","stripeCustomer","stripeCustomerId","defaultPaymentMethod","hasPaymentExpired","existingTransaction","getState","states","PAYMENT_EXPIRED","PENDING_PAYMENT","minutesBetween","lastTransitionedAt","hasTransactionPassedPendingPayment","tx","hasPassedState","persistTransaction","order","pageData","setPageData","sessionStorageKey","DetailsSideCard","_firstImage$attribute","_listing$id","listingTitle","author","firstImage","layoutListingImageConfig","speculateTransactionErrorMessage","showPrice","breakdown","publicData","aspectWidth","aspectHeight","variantPrefix","variants","keys","filter","startsWith","detailsContainerDesktop","AspectRatioWrapper","width","height","detailsAspectWrapper","ResponsiveImage","rootForImage","image","listingDetailsWrapper","avatarWrapper","AvatarMedium","user","disableProfileLink","detailsHeadings","H4","as","NamedLink","params","uuid","slug","createSlug","priceContainer","formatMoney","perUnit","FormattedMessage","orderBreakdownHeader","H6","orderBreakdownTitle","concat","totalDivider","listingImageMobile","avatarMobile","priceBreakdownContainer","STRIPE_PI_USER_ACTIONS_DONE_STATUSES","PAY_AND_SAVE_FOR_LATER_USE","USE_SAVED_CARD","getOrderParams","shippingDetails","optionalPaymentParams","_pageData$orderData","_pageData$orderData2","_pageData$listing","_pageData$listing$att","_pageData$listing2","_pageData$orderData3","quantity","quantityMaybe","deliveryMethod","deliveryMethodMaybe","protectedDataMaybe","protectedData","listingId","loadInitialDataForStripePayments","fetchSpeculatedTransaction","fetchStripeCustomer","fetchSpeculatedTransactionIfNeeded","orderParams","_tx$attributes","_pageDataListing$attr","_pageDataListing$attr2","_pageDataListing$attr3","_pageData$listing3","pageDataListing","transactionProcessAlias","split","_pageData$listing$att2","_tx$attributes2","processAlias","transactionId","requestTransition","INQUIRE","REQUEST_PAYMENT_AFTER_INQUIRY","REQUEST_PAYMENT","isPrivileged","handleSubmit","stripe","submitting","setSubmitting","history","routeConfiguration","speculatedTransaction","paymentIntent","dispatch","onInitiateOrder","onConfirmCardPayment","onConfirmPayment","onSendMessage","onSavePaymentMethod","onSubmitCallback","card","message","paymentMethod","selectedPaymentMethod","saveAfterOnetimePayment","saveAfterOnetimePaymentRaw","selectedPaymentFlow","paymentFlow","Array","isArray","length","hasDefaultPaymentMethodSaved","stripePaymentMethodId","hasPaymentIntentUserActionsDone","status","requestPaymentParams","billingDetails","isPaymentFlowUseSavedCard","isPaymentFlowPayAndSaveCard","recipientName","recipientPhoneNumber","recipientAddressLine1","recipientAddressLine2","recipientPostal","recipientCity","recipientState","recipientCountry","phoneNumber","postalCode","getShippingDetailsMaybe","processCheckoutWithPayment","extraPaymentParams","storedTx","ensureTransaction","ensuredStripeCustomer","ensureStripeCustomer","createdPaymentIntent","applyAsync","val","then","_len","arguments","funcs","_key","x","Promise","resolve","composeAsync","fnParams","_storedTx$attributes$","_storedTx$attributes","hasPaymentIntents","stripePaymentIntents","orderPromise","_order$attributes","_order$attributes$pro","Error","stripePaymentIntentClientSecret","default","stripeElementMaybe","paymentParams","payment_method","billing_details","orderId","_storedTx$attributes2","transitionName","CONFIRM_PAYMENT","response","errors","paymentMethodSaved","catch","handlePaymentIntentCreation","setupPaymentMethodForSaving","messageSuccess","initialMessageFailedToTransaction","orderDetailsPath","pathByRouteName","setOrderPageInitialValues","initialValues","routes","findRouteByRouteName","setInitialValues","savePaymentMethodFailed","push","err","CheckoutPageWithPayment","_existingTransaction$","_existingTransaction$2","_listing$attributes","_listing$attributes$a","_listing$attributes2","_listing$attributes2$","_listing$attributes3","_listing$attributes3$","_tx$booking","_tx$attributes$lineIt","_tx$attributes3","_tx$attributes3$lineI","_listing$images","_existingTransaction$3","_listing$author","_listing$author$attri","_listing$author$attri2","_listing$attributes4","_listing$attributes4$","setStripe","scrollingDisabled","speculateTransactionError","speculatedTransactionMaybe","initiateOrderError","confirmPaymentError","confirmCardPaymentError","retrievePaymentIntentError","title","listingNotFound","isTransactionInitiateListingNotFoundError","lineItems","timeZone","availabilityPlan","timezone","dateType","LINE_ITEM_HOUR","DATE_TYPE_DATETIME","DATE_TYPE_DATE","txBookingMaybe","booking","OrderBreakdown","assign","orderBreakdown","userRole","currency","marketplaceName","totalPrice","getFormattedTotalPrice","payinTotal","isPaymentExpired","showPaymentForm","images","errorMessages","getErrorMessages","listingLink","listingNotFoundErrorMessage","initiateOrderErrorMessage","speculateErrorMessage","isAmountTooLowError","isTransactionInitiateAmountTooLowError","isChargeDisabledError","isTransactionChargeDisabledError","stripeErrors","transactionInitiateOrderStripeErrors","isTransactionInitiateBookingTimeNotAvailableError","isTransitionQuantityInfoMissingError","isTransactionInitiateListingInsufficientStockError","noAccountMsg","indexOf","stripeErrorsAsString","join","isTooManyRequestsError","isTransactionInitiShwcseissingStripeAccountError","isTransactionZeroPaymentError","listingNotFoundErrorMessageParagraph","notFoundError","initiateOrderErrorMessageParagraph","orderError","speculateErrorMessageParagraph","speculateTransactionErrorMessageParagraph","speculateError","retrievePaymentIntentErrorMessageParagraph","paymentExpiredMessage","retrievePaymentIntentErrorMessage","showInitialMessageInput","tr","transition","userName","profile","firstName","lastName","initalValuesForStripePayment","askShippingDetails","Page","contentContainer","MobileListingImage","listingImage","orderFormContainer","headingContainer","H3","heading","detailsHeadingMobile","MobileOrderBreakdown","paymentContainer","StripePaymentForm","paymentForm","onSubmit","inProgress","formId","authorDisplayName","displayName","hasHandledCardPayment","loadingData","onStripeInitialized","onRetrievePaymentIntent","_tx$attributes$protec","_tx$attributes$protec2","showPickUplocation","listingLocation","location","locale","localization","stripePublishableKey","publishableKey","isBooking","isBookingProcessAlias","isFuzzyLocation","maps","fuzzy","enabled","isInquiryProcess","ErrorMessage","noTransactionProcessAlias","initiateInquiryError","onInquiryWithoutPayment","inquiryMessage","INQUIRE_WITHOUT_PAYMENT","listingTitleLink","conf","displayPrice","inquiryPrice","FinalForm","render","formRenderProps","submitButtonWrapperClassName","root","submitInProgress","submitDisabled","Form","enforcePagePreloadFor","section","Heading","sectionHeading","FieldTextInput","fieldInquiryMessage","placeholder","validate","validators","PrimaryButton","disabled","STORAGE_KEY","removeItem","getProcessName","_listing$attributes$p","_listing$attributes$p2","resolveLatestProcessName","CheckoutPage","compose","connect","speculateTransactionInProgress","isScrollingDisabled","txId","speculateTransaction","initiateInquiryWithoutPayment","initiateOrder","retrievePaymentIntent","confirmCardPayment","transitionParams","confirmPayment","sendMessage","savePaymentMethod","_listing$author$id","_currentUser$id","_listing$author2","isDataLoaded","setIsDataLoaded","useConfiguration","useRouteConfiguration","useIntl","useHistory","handlePageData","_ref2","hasNavigatedThroughLink","action","hasDataInProps","INQUIRY_PROCESS_NAME","isOwnListing","hasRequiredData","NamedRedirect","userDisplayNameAsString","CheckoutPageWithInquiryProcess","saveToSessionStorage","undefined"],"sourceRoot":""}