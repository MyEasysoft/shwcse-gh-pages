{"version":3,"file":"static/js/PasswordResetPage.b1beff38.chunk.js","mappings":"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","sources":["webpack://app/./src/containers/PasswordResetPage/PasswordResetForm/PasswordResetForm.module.css?d653","containers/PasswordResetPage/PasswordResetForm/PasswordResetForm.js","webpack://app/./src/containers/PasswordResetPage/PasswordResetPage.module.css?2080","containers/PasswordResetPage/PasswordResetPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PasswordResetForm_root__5dO6G\",\"password\":\"PasswordResetForm_password__PlTy9 marketplaceModalPasswordMargins\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { Form as FinalForm } from 'react-final-form';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport * as validators from '../../../util/validators';\r\n\r\nimport { Form, PrimaryButton, FieldTextInput } from '../../../components';\r\n\r\nimport css from './PasswordResetForm.module.css';\r\n\r\nconst PasswordResetFormComponent = props => (\r\n  <FinalForm\r\n    {...props}\r\n    render={fieldRenderProps => {\r\n      const {\r\n        rootClassName,\r\n        className,\r\n        formId,\r\n        handleSubmit,\r\n        inProgress,\r\n        intl,\r\n        invalid,\r\n      } = fieldRenderProps;\r\n\r\n      // password\r\n      const passwordLabel = intl.formatMessage({\r\n        id: 'PasswordResetForm.passwordLabel',\r\n      });\r\n      const passwordPlaceholder = intl.formatMessage({\r\n        id: 'PasswordResetForm.passwordPlaceholder',\r\n      });\r\n      const passwordRequiredMessage = intl.formatMessage({\r\n        id: 'PasswordResetForm.passwordRequired',\r\n      });\r\n      const passwordMinLengthMessage = intl.formatMessage(\r\n        {\r\n          id: 'PasswordResetForm.passwordTooShort',\r\n        },\r\n        {\r\n          minLength: validators.PASSWORD_MIN_LENGTH,\r\n        }\r\n      );\r\n      const passwordMaxLengthMessage = intl.formatMessage(\r\n        {\r\n          id: 'PasswordResetForm.passwordTooLong',\r\n        },\r\n        {\r\n          maxLength: validators.PASSWORD_MAX_LENGTH,\r\n        }\r\n      );\r\n      const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\r\n      const passwordMinLength = validators.minLength(\r\n        passwordMinLengthMessage,\r\n        validators.PASSWORD_MIN_LENGTH\r\n      );\r\n      const passwordMaxLength = validators.maxLength(\r\n        passwordMaxLengthMessage,\r\n        validators.PASSWORD_MAX_LENGTH\r\n      );\r\n\r\n      const classes = classNames(rootClassName || css.root, className);\r\n\r\n      const submitInProgress = inProgress;\r\n      const submitDisabled = invalid || submitInProgress;\r\n\r\n      return (\r\n        <Form className={classes} onSubmit={handleSubmit}>\r\n          <FieldTextInput\r\n            className={css.password}\r\n            type=\"password\"\r\n            id={formId ? `${formId}.password` : 'password'}\r\n            name=\"password\"\r\n            autoComplete=\"new-password\"\r\n            label={passwordLabel}\r\n            placeholder={passwordPlaceholder}\r\n            validate={validators.composeValidators(\r\n              passwordRequired,\r\n              passwordMinLength,\r\n              passwordMaxLength\r\n            )}\r\n          />\r\n          <PrimaryButton type=\"submit\" inProgress={submitInProgress} disabled={submitDisabled}>\r\n            <FormattedMessage id=\"PasswordResetForm.submitButtonText\" />\r\n          </PrimaryButton>\r\n        </Form>\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\nPasswordResetFormComponent.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  inProgress: false,\r\n  formId: null,\r\n};\r\n\r\nconst { string, bool } = PropTypes;\r\n\r\nPasswordResetFormComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  inProgress: bool,\r\n  intl: intlShape.isRequired,\r\n  formId: string,\r\n};\r\n\r\nconst PasswordResetForm = compose(injectIntl)(PasswordResetFormComponent);\r\nPasswordResetForm.displayName = 'PasswordResetForm';\r\n\r\nexport default PasswordResetForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"layoutWrapperMain\":\"PasswordResetPage_layoutWrapperMain__EhpEI\",\"root\":\"PasswordResetPage_root__ReRKn\",\"contentContainer\":\"PasswordResetPage_contentContainer__6CYex marketplaceModalRootStyles\",\"content\":\"PasswordResetPage_content__5uB+4 marketplaceModalBaseStyles\",\"form\":\"PasswordResetPage_form__D1euJ marketplaceModalFormRootStyles\",\"error\":\"PasswordResetPage_error__WnOoD marketplaceModalPasswordMargins\",\"modalTitle\":\"PasswordResetPage_modalTitle__w8RIp marketplaceModalTitleStyles\",\"modalMessage\":\"PasswordResetPage_modalMessage__sMQBW marketplaceModalParagraphStyles\",\"email\":\"PasswordResetPage_email__0Ysan\",\"helperLink\":\"PasswordResetPage_helperLink__512lv marketplaceModalHelperLink\",\"helperText\":\"PasswordResetPage_helperText__LSz0h marketplaceModalHelperText\",\"submitButton\":\"PasswordResetPage_submitButton__fv3kD buttonPrimary\",\"modalIcon\":\"PasswordResetPage_modalIcon__iGr8t marketplaceModalIconStyles\"};","import React, { useState } from 'react';\r\nimport { bool, func, shape, string } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport { useConfiguration } from '../../context/configurationContext';\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\r\nimport { propTypes } from '../../util/types';\r\nimport { parse } from '../../util/urlHelpers';\r\nimport { isScrollingDisabled } from '../../ducks/ui.duck';\r\n\r\nimport {\r\n  Heading,\r\n  Page,\r\n  NamedLink,\r\n  IconKeys,\r\n  IconKeysSuccess,\r\n  ResponsiveBackgroundImageContainer,\r\n  LayoutSingleColumn,\r\n} from '../../components';\r\n\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\nimport FooterContainer from '../../containers/FooterContainer/FooterContainer';\r\n\r\nimport PasswordResetForm from './PasswordResetForm/PasswordResetForm';\r\n\r\nimport { resetPassword } from './PasswordResetPage.duck';\r\nimport css from './PasswordResetPage.module.css';\r\n\r\nconst parseUrlParams = location => {\r\n  const params = parse(location.search);\r\n  const { t: token, e: email } = params;\r\n  return { token, email };\r\n};\r\n\r\nconst ParamsMissingContent = () => {\r\n  const recoveryLink = (\r\n    <NamedLink name=\"PasswordRecoveryPage\">\r\n      <FormattedMessage id=\"PasswordResetPage.recoveryLinkText\" />\r\n    </NamedLink>\r\n  );\r\n  return (\r\n    <div className={css.content}>\r\n      <p>\r\n        <FormattedMessage id=\"PasswordResetPage.invalidUrlParams\" values={{ recoveryLink }} />\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ResetFormContent = props => {\r\n  const { handleSubmit, resetPasswordInProgress, resetPasswordError } = props;\r\n  return (\r\n    <div className={css.content}>\r\n      <IconKeys className={css.modalIcon} />\r\n      <Heading as=\"h1\" rootClassName={css.modalTitle}>\r\n        <FormattedMessage id=\"PasswordResetPage.mainHeading\" />\r\n      </Heading>\r\n      <p className={css.modalMessage}>\r\n        <FormattedMessage id=\"PasswordResetPage.helpText\" />\r\n      </p>\r\n      {resetPasswordError ? (\r\n        <p className={css.error}>\r\n          <FormattedMessage id=\"PasswordResetPage.resetFailed\" />\r\n        </p>\r\n      ) : null}\r\n      <PasswordResetForm\r\n        className={css.form}\r\n        onSubmit={handleSubmit}\r\n        inProgress={resetPasswordInProgress}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ResetDoneContent = () => {\r\n  return (\r\n    <div className={css.content}>\r\n      <IconKeysSuccess className={css.modalIcon} />\r\n      <Heading as=\"h1\" rootClassName={css.modalTitle}>\r\n        <FormattedMessage id=\"PasswordResetPage.passwordChangedHeading\" />\r\n      </Heading>\r\n      <p className={css.modalMessage}>\r\n        <FormattedMessage id=\"PasswordResetPage.passwordChangedHelpText\" />\r\n      </p>\r\n      <NamedLink name=\"LoginPage\" className={css.submitButton}>\r\n        <FormattedMessage id=\"PasswordResetPage.loginButtonText\" />\r\n      </NamedLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const PasswordResetPageComponent = props => {\r\n  const [state, setState] = useState({ newPasswordSubmitted: false });\r\n  const config = useConfiguration();\r\n  const {\r\n    intl,\r\n    scrollingDisabled,\r\n    location,\r\n    resetPasswordInProgress,\r\n    resetPasswordError,\r\n    onSubmitPassword,\r\n  } = props;\r\n\r\n  const { token, email } = parseUrlParams(location);\r\n  const hasParams = !!(token && email);\r\n  const isPasswordSubmitted = state.newPasswordSubmitted && !resetPasswordError;\r\n\r\n  const handleSubmit = values => {\r\n    const { password } = values;\r\n    setState({ newPasswordSubmitted: false });\r\n    onSubmitPassword(email, token, password).then(() => {\r\n      setState({ newPasswordSubmitted: true });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Page\r\n      title={intl.formatMessage({\r\n        id: 'PasswordResetPage.title',\r\n      })}\r\n      scrollingDisabled={scrollingDisabled}\r\n      referrer=\"origin\"\r\n    >\r\n      <LayoutSingleColumn\r\n        mainColumnClassName={css.layoutWrapperMain}\r\n        topbar={<TopbarContainer />}\r\n        footer={<FooterContainer />}\r\n      >\r\n        <ResponsiveBackgroundImageContainer\r\n          className={css.root}\r\n          childrenWrapperClassName={css.contentContainer}\r\n          as=\"section\"\r\n          image={config.branding.brandImage}\r\n          sizes=\"100%\"\r\n          useOverlay\r\n        >\r\n          {!hasParams ? (\r\n            <ParamsMissingContent />\r\n          ) : isPasswordSubmitted ? (\r\n            <ResetDoneContent />\r\n          ) : (\r\n            <ResetFormContent\r\n              handleSubmit={handleSubmit}\r\n              resetPasswordInProgress={resetPasswordInProgress}\r\n              resetPasswordError={resetPasswordError}\r\n            />\r\n          )}\r\n        </ResponsiveBackgroundImageContainer>\r\n      </LayoutSingleColumn>\r\n    </Page>\r\n  );\r\n};\r\n\r\nPasswordResetPageComponent.defaultProps = {\r\n  resetPasswordError: null,\r\n};\r\n\r\nPasswordResetPageComponent.propTypes = {\r\n  scrollingDisabled: bool.isRequired,\r\n  resetPasswordInProgress: bool.isRequired,\r\n  resetPasswordError: propTypes.error,\r\n  onSubmitPassword: func.isRequired,\r\n\r\n  // from withRouter\r\n  location: shape({\r\n    search: string,\r\n  }).isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const { resetPasswordInProgress, resetPasswordError } = state.PasswordResetPage;\r\n  return {\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n    resetPasswordInProgress,\r\n    resetPasswordError,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmitPassword: (email, token, password) => dispatch(resetPassword(email, token, password)),\r\n});\r\n\r\n// Note: it is important that the withRouter HOC is **outside** the\r\n// connect HOC, otherwise React Router won't rerender any Route\r\n// components since connect implements a shouldComponentUpdate\r\n// lifecycle hook.\r\n//\r\n// See: https://github.com/ReactTraining/react-router/issues/4671\r\nconst PasswordResetPage = compose(\r\n  withRouter,\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  ),\r\n  injectIntl\r\n)(PasswordResetPageComponent);\r\n\r\nexport default PasswordResetPage;\r\n"],"names":["PasswordResetFormComponent","props","React","FinalForm","Object","assign","render","fieldRenderProps","rootClassName","className","formId","handleSubmit","inProgress","intl","invalid","passwordLabel","formatMessage","id","passwordPlaceholder","passwordRequiredMessage","passwordMinLengthMessage","minLength","validators","passwordMaxLengthMessage","maxLength","passwordRequired","passwordMinLength","passwordMaxLength","classes","classNames","css","submitInProgress","submitDisabled","Form","onSubmit","FieldTextInput","type","concat","name","autoComplete","label","placeholder","validate","PrimaryButton","disabled","FormattedMessage","defaultProps","string","bool","PropTypes","PasswordResetForm","compose","injectIntl","displayName","ParamsMissingContent","recoveryLink","NamedLink","values","ResetFormContent","resetPasswordInProgress","resetPasswordError","IconKeys","Heading","as","ResetDoneContent","IconKeysSuccess","PasswordResetPageComponent","state","setState","useState","newPasswordSubmitted","config","useConfiguration","scrollingDisabled","location","onSubmitPassword","token","email","params","parse","search","t","e","parseUrlParams","hasParams","isPasswordSubmitted","Page","title","referrer","LayoutSingleColumn","mainColumnClassName","topbar","TopbarContainer","footer","FooterContainer","ResponsiveBackgroundImageContainer","childrenWrapperClassName","image","branding","brandImage","sizes","useOverlay","password","then","withRouter","connect","PasswordResetPage","isScrollingDisabled","dispatch","resetPassword"],"sourceRoot":""}