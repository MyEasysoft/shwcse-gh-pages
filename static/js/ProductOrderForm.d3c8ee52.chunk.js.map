{"version":3,"file":"static/js/ProductOrderForm.d3c8ee52.chunk.js","mappings":"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","sources":["components/OrderPanel/EstimatedCustomerBreakdownMaybe.js","webpack://app/./src/components/OrderPanel/ProductOrderForm/ProductOrderForm.module.css?0eec","components/OrderPanel/ProductOrderForm/ProductOrderForm.js"],"sourcesContent":["/**\r\n * Booking breakdown estimation\r\n *\r\n * Transactions have payment information that can be shown with the\r\n * OrderBreakdown component. However, when selecting booking\r\n * details, there is no transaction object present and we have to\r\n * estimate the breakdown of the transaction without data from the\r\n * API.\r\n *\r\n * If the payment process of a customized marketplace is something\r\n * else than simply daily or nightly bookings, the estimation will\r\n * most likely need some changes.\r\n *\r\n * To customize the estimation, first change the BookingDatesForm to\r\n * collect all booking information from the user (in addition to the\r\n * default date pickers), and provide that data to the\r\n * EstimatedBreakdownMaybe components. You can then make customization\r\n * within this file to create a fake transaction object that\r\n * calculates the breakdown information correctly according to the\r\n * process.\r\n *\r\n * In the future, the optimal scenario would be to use the same\r\n * transactions.initiateSpeculative API endpoint as the CheckoutPage\r\n * is using to get the breakdown information from the API, but\r\n * currently the API doesn't support that for logged out users, and we\r\n * are forced to estimate the information here.\r\n */\r\nimport React from 'react';\r\nimport Decimal from 'decimal.js';\r\n\r\nimport { types as sdkTypes } from '../../util/sdkLoader';\r\nimport { FormattedMessage } from '../../util/reactIntl';\r\nimport {\r\n  DATE_TYPE_DATE,\r\n  LINE_ITEM_DAY,\r\n  LINE_ITEM_NIGHT,\r\n  LINE_ITEM_HOUR,\r\n  LISTING_UNIT_TYPES,\r\n  DATE_TYPE_DATETIME,\r\n} from '../../util/types';\r\nimport { unitDivisor, convertMoneyToNumber, convertUnitToSubUnit } from '../../util/currency';\r\nimport { getProcess, TX_TRANSITION_ACTOR_CUSTOMER } from '../../transactions/transaction';\r\n\r\nimport { OrderBreakdown } from '../../components';\r\n\r\nimport css from './OrderPanel.module.css';\r\n\r\nconst { Money, UUID } = sdkTypes;\r\n\r\nconst estimatedTotalPrice = (lineItems, marketplaceCurrency) => {\r\n  const numericTotalPrice = lineItems.reduce((sum, lineItem) => {\r\n    const numericPrice = convertMoneyToNumber(lineItem.lineTotal);\r\n    return new Decimal(numericPrice).add(sum);\r\n  }, new Decimal(0));\r\n\r\n  // All the lineItems should have same currency so we can use the first one to check that\r\n  // In case there are no lineItems we use currency from config.js as default\r\n  const currency =\r\n    lineItems[0] && lineItems[0].unitPrice ? lineItems[0].unitPrice.currency : marketplaceCurrency;\r\n\r\n  return new Money(\r\n    convertUnitToSubUnit(numericTotalPrice.toNumber(), unitDivisor(currency)),\r\n    currency\r\n  );\r\n};\r\n\r\nconst estimatedBooking = (bookingStart, bookingEnd, lineItemUnitType, timeZone = 'Etc/UTC') => {\r\n  const duration = { start: bookingStart, end: bookingEnd };\r\n\r\n  return {\r\n    id: new UUID('estimated-booking'),\r\n    type: 'booking',\r\n    attributes: {\r\n      ...duration,\r\n    },\r\n  };\r\n};\r\n\r\n// When we cannot speculatively initiate a transaction (i.e. logged\r\n// out), we must estimate the transaction for booking breakdown. This function creates\r\n// an estimated transaction object for that use case.\r\n//\r\n// We need to use the Template's backend to calculate the correct line items through thransactionLineItems\r\n// endpoint so that they can be passed to this estimated transaction.\r\nconst estimatedCustomerTransaction = (\r\n  lineItems,\r\n  bookingStart,\r\n  bookingEnd,\r\n  lineItemUnitType,\r\n  timeZone,\r\n  process,\r\n  processName,\r\n  marketplaceCurrency\r\n) => {\r\n  const transitions = process?.transitions;\r\n  const now = new Date();\r\n  const customerLineItems = lineItems.filter(item => item.includeFor.includes('customer'));\r\n  const providerLineItems = lineItems.filter(item => item.includeFor.includes('provider'));\r\n  const payinTotal = estimatedTotalPrice(customerLineItems, marketplaceCurrency);\r\n  const payoutTotal = estimatedTotalPrice(providerLineItems, marketplaceCurrency);\r\n\r\n  const bookingMaybe =\r\n    bookingStart && bookingEnd\r\n      ? { booking: estimatedBooking(bookingStart, bookingEnd, lineItemUnitType, timeZone) }\r\n      : {};\r\n\r\n  return {\r\n    id: new UUID('estimated-transaction'),\r\n    type: 'transaction',\r\n    attributes: {\r\n      createdAt: now,\r\n      processName,\r\n      lastTransitionedAt: now,\r\n      lastTransition: transitions.REQUEST_PAYMENT,\r\n      payinTotal,\r\n      payoutTotal,\r\n      lineItems: customerLineItems,\r\n      transitions: [\r\n        {\r\n          createdAt: now,\r\n          by: TX_TRANSITION_ACTOR_CUSTOMER,\r\n          transition: transitions.REQUEST_PAYMENT,\r\n        },\r\n      ],\r\n    },\r\n    ...bookingMaybe,\r\n  };\r\n};\r\n\r\nconst EstimatedCustomerBreakdownMaybe = props => {\r\n  const { breakdownData = {}, lineItems, timeZone, currency, marketplaceName, processName } = props;\r\n  const { startDate, endDate } = breakdownData;\r\n\r\n  let process = null;\r\n  try {\r\n    process = getProcess(processName);\r\n  } catch (e) {\r\n    return (\r\n      <div className={css.error}>\r\n        <FormattedMessage id=\"OrderPanel.unknownTransactionProcess\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const unitLineItem = lineItems?.find(\r\n    item => LISTING_UNIT_TYPES.includes(item.code) && !item.reversal\r\n  );\r\n  const lineItemUnitType = unitLineItem?.code;\r\n  const shouldHaveBooking = [LINE_ITEM_DAY, LINE_ITEM_NIGHT].includes(lineItemUnitType);\r\n  const hasLineItems = lineItems && lineItems.length > 0;\r\n  const hasRequiredBookingData = !shouldHaveBooking || (startDate && endDate);\r\n  const dateType = lineItemUnitType === LINE_ITEM_HOUR ? DATE_TYPE_DATETIME : DATE_TYPE_DATE;\r\n  const tx =\r\n    hasLineItems && hasRequiredBookingData\r\n      ? estimatedCustomerTransaction(\r\n          lineItems,\r\n          startDate,\r\n          endDate,\r\n          lineItemUnitType,\r\n          timeZone,\r\n          process,\r\n          processName,\r\n          currency\r\n        )\r\n      : null;\r\n\r\n  return tx ? (\r\n    <OrderBreakdown\r\n      className={css.receipt}\r\n      userRole=\"customer\"\r\n      transaction={tx}\r\n      booking={tx.booking}\r\n      dateType={dateType}\r\n      timeZone={timeZone}\r\n      currency={currency}\r\n      marketplaceName={marketplaceName}\r\n    />\r\n  ) : null;\r\n};\r\n\r\nexport default EstimatedCustomerBreakdownMaybe;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"bookingBreakdownTitle\":\"ProductOrderForm_bookingBreakdownTitle__epmbq\",\"totalDivider\":\"ProductOrderForm_totalDivider__x1b-R\",\"quantityField\":\"ProductOrderForm_quantityField__SB1jH\",\"deliveryField\":\"ProductOrderForm_deliveryField__hsRoF\",\"singleDeliveryMethodLabel\":\"ProductOrderForm_singleDeliveryMethodLabel__Jm4QI label\",\"singleDeliveryMethodSelected\":\"ProductOrderForm_singleDeliveryMethodSelected__ML6x7\",\"breakdownWrapper\":\"ProductOrderForm_breakdownWrapper__Pvcv5\",\"submitButton\":\"ProductOrderForm_submitButton__PvTZR\",\"finePrint\":\"ProductOrderForm_finePrint__LxKZ- marketplaceTinyFontStyles\",\"error\":\"ProductOrderForm_error__1Fy1Z h4\"};","import React, { useEffect, useState } from 'react';\r\nimport { bool, func, number, string } from 'prop-types';\r\nimport { Form as FinalForm, FormSpy } from 'react-final-form';\r\n\r\nimport { FormattedMessage, useIntl } from '../../../util/reactIntl';\r\nimport { propTypes } from '../../../util/types';\r\nimport { numberAtLeast, required } from '../../../util/validators';\r\nimport { PURCHASE_PROCESS_NAME } from '../../../transactions/transaction';\r\n\r\nimport {\r\n  Form,\r\n  FieldSelect,\r\n  FieldTextInput,\r\n  InlineTextButton,\r\n  PrimaryButton,\r\n  H3,\r\n  H6,\r\n} from '../../../components';\r\n\r\nimport EstimatedCustomerBreakdownMaybe from '../EstimatedCustomerBreakdownMaybe';\r\n\r\nimport css from './ProductOrderForm.module.css';\r\n\r\n// Browsers can't render huge number of select options.\r\n// (stock is shown inside select element)\r\n// Note: input element could allow ordering bigger quantities\r\nconst MAX_QUANTITY_FOR_DROPDOWN = 100;\r\n\r\nconst handleFetchLineItems = ({\r\n  quantity,\r\n  deliveryMethod,\r\n  displayDeliveryMethod,\r\n  listingId,\r\n  isOwnListing,\r\n  fetchLineItemsInProgress,\r\n  onFetchTransactionLineItems,\r\n}) => {\r\n  const stockReservationQuantity = Number.parseInt(quantity, 10);\r\n  const deliveryMethodMaybe = deliveryMethod ? { deliveryMethod } : {};\r\n  const isBrowser = typeof window !== 'undefined';\r\n  if (\r\n    isBrowser &&\r\n    stockReservationQuantity &&\r\n    (!displayDeliveryMethod || deliveryMethod) &&\r\n    !fetchLineItemsInProgress\r\n  ) {\r\n    onFetchTransactionLineItems({\r\n      orderData: { stockReservationQuantity, ...deliveryMethodMaybe },\r\n      listingId,\r\n      isOwnListing,\r\n    });\r\n  }\r\n};\r\n\r\nconst DeliveryMethodMaybe = props => {\r\n  const {\r\n    displayDeliveryMethod,\r\n    hasMultipleDeliveryMethods,\r\n    deliveryMethod,\r\n    hasStock,\r\n    formId,\r\n    intl,\r\n  } = props;\r\n  const showDeliveryMethodSelector = displayDeliveryMethod && hasMultipleDeliveryMethods;\r\n  const showSingleDeliveryMethod = displayDeliveryMethod && deliveryMethod;\r\n  return !hasStock ? null : showDeliveryMethodSelector ? (\r\n    <FieldSelect\r\n      id={`${formId}.deliveryMethod`}\r\n      className={css.deliveryField}\r\n      name=\"deliveryMethod\"\r\n      label={intl.formatMessage({ id: 'ProductOrderForm.deliveryMethodLabel' })}\r\n      validate={required(intl.formatMessage({ id: 'ProductOrderForm.deliveryMethodRequired' }))}\r\n    >\r\n      <option disabled value=\"\">\r\n        {intl.formatMessage({ id: 'ProductOrderForm.selectDeliveryMethodOption' })}\r\n      </option>\r\n      <option value={'pickup'}>\r\n        {intl.formatMessage({ id: 'ProductOrderForm.pickupOption' })}\r\n      </option>\r\n      <option value={'shipping'}>\r\n        {intl.formatMessage({ id: 'ProductOrderForm.shippingOption' })}\r\n      </option>\r\n    </FieldSelect>\r\n  ) : showSingleDeliveryMethod ? (\r\n    <div className={css.deliveryField}>\r\n      <H3 rootClassName={css.singleDeliveryMethodLabel}>\r\n        {intl.formatMessage({ id: 'ProductOrderForm.deliveryMethodLabel' })}\r\n      </H3>\r\n      <p className={css.singleDeliveryMethodSelected}>\r\n        {deliveryMethod === 'shipping'\r\n          ? intl.formatMessage({ id: 'ProductOrderForm.shippingOption' })\r\n          : intl.formatMessage({ id: 'ProductOrderForm.pickupOption' })}\r\n      </p>\r\n      <FieldTextInput\r\n        id={`${formId}.deliveryMethod`}\r\n        className={css.deliveryField}\r\n        name=\"deliveryMethod\"\r\n        type=\"hidden\"\r\n      />\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nconst renderForm = formRenderProps => {\r\n  const [mounted, setMounted] = useState(false);\r\n  const {\r\n    // FormRenderProps from final-form\r\n    handleSubmit,\r\n    form: formApi,\r\n\r\n    // Custom props passed to the form component\r\n    intl,\r\n    formId,\r\n    currentStock,\r\n    allowOrdersOfMultipleItems,\r\n    hasMultipleDeliveryMethods,\r\n    displayDeliveryMethod,\r\n    listingId,\r\n    isOwnListing,\r\n    onFetchTransactionLineItems,\r\n    onContactUser,\r\n    lineItems,\r\n    fetchLineItemsInProgress,\r\n    fetchLineItemsError,\r\n    price,\r\n    payoutDetailsWarning,\r\n    marketplaceName,\r\n    values,\r\n  } = formRenderProps;\r\n\r\n  // Note: don't add custom logic before useEffect\r\n  useEffect(() => {\r\n    setMounted(true);\r\n\r\n    // Side-effect: fetch line-items after mounting if possible\r\n    const { quantity, deliveryMethod } = values;\r\n    if (quantity && !formRenderProps.hasMultipleDeliveryMethods) {\r\n      handleFetchLineItems({\r\n        quantity,\r\n        deliveryMethod,\r\n        displayDeliveryMethod,\r\n        listingId,\r\n        isOwnListing,\r\n        fetchLineItemsInProgress,\r\n        onFetchTransactionLineItems,\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  // If form values change, update line-items for the order breakdown\r\n  const handleOnChange = formValues => {\r\n    const { quantity, deliveryMethod } = formValues.values;\r\n    if (mounted) {\r\n      handleFetchLineItems({\r\n        quantity,\r\n        deliveryMethod,\r\n        listingId,\r\n        isOwnListing,\r\n        fetchLineItemsInProgress,\r\n        onFetchTransactionLineItems,\r\n      });\r\n    }\r\n  };\r\n\r\n  // In case quantity and deliveryMethod are missing focus on that select-input.\r\n  // Otherwise continue with the default handleSubmit function.\r\n  const handleFormSubmit = e => {\r\n    const { quantity, deliveryMethod } = values || {};\r\n    if (!quantity || quantity < 1) {\r\n      e.preventDefault();\r\n      // Blur event will show validator message\r\n      formApi.blur('quantity');\r\n      formApi.focus('quantity');\r\n    } else if (displayDeliveryMethod && !deliveryMethod) {\r\n      e.preventDefault();\r\n      // Blur event will show validator message\r\n      formApi.blur('deliveryMethod');\r\n      formApi.focus('deliveryMethod');\r\n    } else {\r\n      handleSubmit(e);\r\n    }\r\n  };\r\n\r\n  const breakdownData = {};\r\n  const showBreakdown =\r\n    breakdownData && lineItems && !fetchLineItemsInProgress && !fetchLineItemsError;\r\n\r\n  const showContactUser = typeof onContactUser === 'function';\r\n\r\n  const onClickContactUser = e => {\r\n    e.preventDefault();\r\n    onContactUser();\r\n  };\r\n\r\n  const contactSellerLink = (\r\n    <InlineTextButton onClick={onClickContactUser}>\r\n      <FormattedMessage id=\"ProductOrderForm.finePrintNoStockLinkText\" />\r\n    </InlineTextButton>\r\n  );\r\n  const quantityRequiredMsg = intl.formatMessage({ id: 'ProductOrderForm.quantityRequired' });\r\n\r\n  // Listing is out of stock if currentStock is zero.\r\n  // Undefined/null stock means that stock has never been set.\r\n  const hasNoStockLeft = typeof currentStock != null && currentStock === 0;\r\n  const hasStock = currentStock && currentStock > 0;\r\n  const hasOneItemLeft = currentStock === 1;\r\n  const selectableStock =\r\n    currentStock > MAX_QUANTITY_FOR_DROPDOWN ? MAX_QUANTITY_FOR_DROPDOWN : currentStock;\r\n  const quantities = hasStock ? [...Array(selectableStock).keys()].map(i => i + 1) : [];\r\n\r\n  const submitInProgress = fetchLineItemsInProgress;\r\n  const submitDisabled = !hasStock;\r\n\r\n  return (\r\n    <Form onSubmit={handleFormSubmit}>\r\n      <FormSpy subscription={{ values: true }} onChange={handleOnChange} />\r\n      {hasNoStockLeft ? null : hasOneItemLeft || !allowOrdersOfMultipleItems ? (\r\n        <FieldTextInput\r\n          id={`${formId}.quantity`}\r\n          className={css.quantityField}\r\n          name=\"quantity\"\r\n          type=\"hidden\"\r\n          validate={numberAtLeast(quantityRequiredMsg, 1)}\r\n        />\r\n      ) : (\r\n        <FieldSelect\r\n          id={`${formId}.quantity`}\r\n          className={css.quantityField}\r\n          name=\"quantity\"\r\n          disabled={!hasStock}\r\n          label={intl.formatMessage({ id: 'ProductOrderForm.quantityLabel' })}\r\n          validate={numberAtLeast(quantityRequiredMsg, 1)}\r\n        >\r\n          <option disabled value=\"\">\r\n            {intl.formatMessage({ id: 'ProductOrderForm.selectQuantityOption' })}\r\n          </option>\r\n          {quantities.map(quantity => (\r\n            <option key={quantity} value={quantity}>\r\n              {intl.formatMessage({ id: 'ProductOrderForm.quantityOption' }, { quantity })}\r\n            </option>\r\n          ))}\r\n        </FieldSelect>\r\n      )}\r\n\r\n      <DeliveryMethodMaybe\r\n        displayDeliveryMethod={displayDeliveryMethod}\r\n        hasMultipleDeliveryMethods={hasMultipleDeliveryMethods}\r\n        deliveryMethod={values?.deliveryMethod}\r\n        hasStock={hasStock}\r\n        formId={formId}\r\n        intl={intl}\r\n      />\r\n\r\n      {showBreakdown ? (\r\n        <div className={css.breakdownWrapper}>\r\n          <H6 as=\"h3\" className={css.bookingBreakdownTitle}>\r\n            <FormattedMessage id=\"ProductOrderForm.breakdownTitle\" />\r\n          </H6>\r\n          <hr className={css.totalDivider} />\r\n          <EstimatedCustomerBreakdownMaybe\r\n            breakdownData={breakdownData}\r\n            lineItems={lineItems}\r\n            currency={price.currency}\r\n            marketplaceName={marketplaceName}\r\n            processName={PURCHASE_PROCESS_NAME}\r\n          />\r\n        </div>\r\n      ) : null}\r\n\r\n      <div className={css.submitButton}>\r\n        <PrimaryButton type=\"submit\" inProgress={submitInProgress} disabled={submitDisabled}>\r\n          {hasStock ? (\r\n            <FormattedMessage id=\"ProductOrderForm.ctaButton\" />\r\n          ) : (\r\n            <FormattedMessage id=\"ProductOrderForm.ctaButtonNoStock\" />\r\n          )}\r\n        </PrimaryButton>\r\n      </div>\r\n      <p className={css.finePrint}>\r\n        {payoutDetailsWarning ? (\r\n          payoutDetailsWarning\r\n        ) : hasStock && isOwnListing ? (\r\n          <FormattedMessage id=\"ProductOrderForm.ownListing\" />\r\n        ) : hasStock ? (\r\n          <FormattedMessage id=\"ProductOrderForm.finePrint\" />\r\n        ) : showContactUser ? (\r\n          <FormattedMessage id=\"ProductOrderForm.finePrintNoStock\" values={{ contactSellerLink }} />\r\n        ) : null}\r\n      </p>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst ProductOrderForm = props => {\r\n  const intl = useIntl();\r\n  const {\r\n    price,\r\n    currentStock,\r\n    pickupEnabled,\r\n    shippingEnabled,\r\n    displayDeliveryMethod,\r\n    allowOrdersOfMultipleItems,\r\n  } = props;\r\n\r\n  // Should not happen for listings that go through EditListingWizard.\r\n  // However, this might happen for imported listings.\r\n  if (displayDeliveryMethod && !pickupEnabled && !shippingEnabled) {\r\n    return (\r\n      <p className={css.error}>\r\n        <FormattedMessage id=\"ProductOrderForm.noDeliveryMethodSet\" />\r\n      </p>\r\n    );\r\n  }\r\n\r\n  const hasOneItemLeft = currentStock && currentStock === 1;\r\n  const hasOneItemMode = !allowOrdersOfMultipleItems && currentStock > 0;\r\n  const quantityMaybe = hasOneItemLeft || hasOneItemMode ? { quantity: '1' } : {};\r\n  const singleDeliveryMethodAvailableMaybe =\r\n    shippingEnabled && !pickupEnabled\r\n      ? { deliveryMethod: 'shipping' }\r\n      : !shippingEnabled && pickupEnabled\r\n      ? { deliveryMethod: 'pickup' }\r\n      : {};\r\n  const hasMultipleDeliveryMethods = pickupEnabled && shippingEnabled;\r\n  const initialValues = { ...quantityMaybe, ...singleDeliveryMethodAvailableMaybe };\r\n\r\n  return (\r\n    <FinalForm\r\n      initialValues={initialValues}\r\n      hasMultipleDeliveryMethods={hasMultipleDeliveryMethods}\r\n      displayDeliveryMethod={displayDeliveryMethod}\r\n      {...props}\r\n      intl={intl}\r\n      render={renderForm}\r\n    />\r\n  );\r\n};\r\n\r\nProductOrderForm.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  price: null,\r\n  currentStock: null,\r\n  listingId: null,\r\n  isOwnListing: false,\r\n  pickupEnabled: false,\r\n  shippingEnabled: false,\r\n  displayDeliveryMethod: false,\r\n  lineItems: null,\r\n  fetchLineItemsError: null,\r\n};\r\n\r\nProductOrderForm.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n\r\n  marketplaceName: string.isRequired,\r\n\r\n  // form\r\n  formId: string.isRequired,\r\n  onSubmit: func.isRequired,\r\n\r\n  // listing\r\n  listingId: propTypes.uuid,\r\n  price: propTypes.money,\r\n  currentStock: number,\r\n  isOwnListing: bool,\r\n  pickupEnabled: bool,\r\n  shippingEnabled: bool,\r\n  displayDeliveryMethod: bool,\r\n\r\n  // line items\r\n  lineItems: propTypes.lineItems,\r\n  onFetchTransactionLineItems: func.isRequired,\r\n  fetchLineItemsInProgress: bool.isRequired,\r\n  fetchLineItemsError: propTypes.error,\r\n\r\n  // other\r\n  onContactUser: func,\r\n};\r\n\r\nexport default ProductOrderForm;\r\n"],"names":["Money","UUID","sdkTypes","estimatedTotalPrice","lineItems","marketplaceCurrency","numericTotalPrice","reduce","sum","lineItem","numericPrice","convertMoneyToNumber","lineTotal","Decimal","add","currency","unitPrice","convertUnitToSubUnit","toNumber","unitDivisor","estimatedBooking","bookingStart","bookingEnd","lineItemUnitType","duration","start","end","id","type","attributes","props","breakdownData","timeZone","marketplaceName","processName","startDate","endDate","process","getProcess","e","React","className","css","error","FormattedMessage","unitLineItem","find","item","LISTING_UNIT_TYPES","includes","code","reversal","shouldHaveBooking","LINE_ITEM_DAY","LINE_ITEM_NIGHT","hasLineItems","length","hasRequiredBookingData","dateType","LINE_ITEM_HOUR","DATE_TYPE_DATETIME","DATE_TYPE_DATE","tx","estimatedCustomerTransaction","transitions","now","Date","customerLineItems","filter","includeFor","providerLineItems","payinTotal","payoutTotal","bookingMaybe","booking","createdAt","lastTransitionedAt","lastTransition","REQUEST_PAYMENT","by","TX_TRANSITION_ACTOR_CUSTOMER","transition","OrderBreakdown","receipt","userRole","transaction","handleFetchLineItems","_ref","quantity","deliveryMethod","displayDeliveryMethod","listingId","isOwnListing","fetchLineItemsInProgress","onFetchTransactionLineItems","stockReservationQuantity","Number","parseInt","window","orderData","DeliveryMethodMaybe","hasMultipleDeliveryMethods","hasStock","formId","intl","showSingleDeliveryMethod","FieldSelect","concat","name","label","formatMessage","validate","required","disabled","value","H3","rootClassName","FieldTextInput","renderForm","formRenderProps","mounted","setMounted","useState","handleSubmit","form","formApi","currentStock","allowOrdersOfMultipleItems","onContactUser","fetchLineItemsError","price","payoutDetailsWarning","values","useEffect","showBreakdown","showContactUser","contactSellerLink","InlineTextButton","onClick","preventDefault","quantityRequiredMsg","hasNoStockLeft","hasOneItemLeft","quantities","Array","keys","map","i","submitInProgress","submitDisabled","Form","onSubmit","blur","focus","FormSpy","subscription","onChange","formValues","numberAtLeast","key","H6","as","EstimatedCustomerBreakdownMaybe","PURCHASE_PROCESS_NAME","PrimaryButton","inProgress","ProductOrderForm","useIntl","pickupEnabled","shippingEnabled","initialValues","FinalForm","Object","assign","render","defaultProps"],"sourceRoot":""}