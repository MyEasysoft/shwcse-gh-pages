{"version":3,"file":"static/js/EditListingPage.4202761d.chunk.js","mappings":"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","sources":["containers/EditListingPage/EditListingWizard/EditListingAvailabilityPanel/EditListingAvailabilityPlanForm/index.js","containers/EditListingPage/EditListingWizard/EditListingAvailabilityPanel/EditListingAvailabilityExceptionForm/index.js","webpack://app/./src/containers/EditListingPage/EditListingWizard/EditListingAvailabilityPanel/WeeklyCalendar/WeekPicker.module.css?526f","containers/EditListingPage/EditListingWizard/EditListingAvailabilityPanel/WeeklyCalendar/WeekPicker.js","webpack://app/./src/containers/EditListingPage/EditListingWizard/EditListingAvailabilityPanel/WeeklyCalendar/WeeklyCalendar.module.css?9e66","containers/EditListingPage/EditListingWizard/EditListingAvailabilityPanel/WeeklyCalendar/WeeklyCalendar.js","webpack://app/./src/containers/EditListingPage/EditListingWizard/EditListingAvailabilityPanel/EditListingAvailabilityPanel.module.css?782a","containers/EditListingPage/EditListingWizard/EditListingAvailabilityPanel/EditListingAvailabilityPanel.js","containers/EditListingPage/EditListingWizard/EditListingDetailsPanel/ErrorMessage.js","webpack://app/./src/containers/EditListingPage/EditListingWizard/EditListingDetailsPanel/EditListingDetailsPanel.module.css?5e33","containers/EditListingPage/EditListingWizard/EditListingDetailsPanel/EditListingDetailsPanel.js","webpack://app/./src/containers/EditListingPage/EditListingWizard/EditListingDeliveryPanel/EditListingDeliveryPanel.module.css?eeca","containers/EditListingPage/EditListingWizard/EditListingDeliveryPanel/EditListingDeliveryPanel.js","webpack://app/./src/containers/EditListingPage/EditListingWizard/EditListingLocationPanel/EditListingLocationPanel.module.css?d57e","containers/EditListingPage/EditListingWizard/EditListingLocationPanel/EditListingLocationPanel.js","webpack://app/./src/containers/EditListingPage/EditListingWizard/EditListingPhotosPanel/EditListingPhotosPanel.module.css?b21f","containers/EditListingPage/EditListingWizard/EditListingPhotosPanel/EditListingPhotosPanel.js","webpack://app/./src/containers/EditListingPage/EditListingWizard/EditListingPricingPanel/EditListingPricingPanel.module.css?d2c0","containers/EditListingPage/EditListingWizard/EditListingPricingPanel/EditListingPricingPanel.js","webpack://app/./src/containers/EditListingPage/EditListingWizard/EditListingPricingAndStockPanel/EditListingPricingAndStockPanel.module.css?cfbe","containers/EditListingPage/EditListingWizard/EditListingPricingAndStockPanel/EditListingPricingAndStockPanel.js","webpack://app/./src/containers/EditListingPage/EditListingWizard/EditListingWizardTab.module.css?5bdc","containers/EditListingPage/EditListingWizard/EditListingWizardTab.js","containers/EditListingPage/EditListingWizard/EditListingWizard.js","webpack://app/./src/containers/EditListingPage/EditListingPage.module.css?feb4","containers/EditListingPage/EditListingPage.js"],"sourcesContent":["import EditListingAvailabilityPlanForm from './EditListingAvailabilityPlanForm';\r\nexport default EditListingAvailabilityPlanForm;\r\n","import EditListingAvailabilityExceptionForm from './EditListingAvailabilityExceptionForm';\r\nexport default EditListingAvailabilityExceptionForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WeekPicker_root__ZSkPB\",\"label\":\"WeekPicker_label__OGVee\",\"popup\":\"WeekPicker_popup__NYAWJ\",\"isOpen\":\"WeekPicker_isOpen__tf6+k\"};","import React, { useState } from 'react';\r\nimport { Form as FinalForm } from 'react-final-form';\r\nimport classNames from 'classnames';\r\n\r\nimport { getStartOf, initialVisibleMonth } from '../../../../../util/dates';\r\nimport {\r\n  endOfAvailabilityExceptionRange,\r\n  getStartOfNextMonth,\r\n  getStartOfPrevMonth,\r\n} from '../availability.helpers';\r\n\r\nimport {\r\n  FieldDateRangeController,\r\n  Form,\r\n  InlineTextButton,\r\n  OutsideClickHandler,\r\n} from '../../../../../components';\r\n\r\nimport Next from '../NextArrow';\r\nimport Prev from '../PrevArrow';\r\n\r\nimport css from './WeekPicker.module.css';\r\n\r\nconst KEY_CODE_ESCAPE = 27;\r\nconst TODAY = new Date();\r\n\r\nconst PickerForm = props => {\r\n  return (\r\n    <FinalForm\r\n      {...props}\r\n      onSubmit={() => null}\r\n      render={formRenderProps => {\r\n        const { handleSubmit, children } = formRenderProps;\r\n\r\n        return (\r\n          <Form onSubmit={handleSubmit} tabIndex=\"0\">\r\n            <div>{children}</div>\r\n          </Form>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst handleKeyDown = setIsOpen => e => {\r\n  // Gather all escape presses to close menu\r\n  if (e.keyCode === KEY_CODE_ESCAPE) {\r\n    setIsOpen(false);\r\n  }\r\n};\r\n\r\nconst WeekPicker = props => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [currentMonth, setCurrentMonth] = useState(initialVisibleMonth(props.date, props.timeZone));\r\n\r\n  const {\r\n    rootClassName,\r\n    className,\r\n    label,\r\n    date,\r\n    onDateChange,\r\n    timeZone,\r\n    initialValues,\r\n    ...rest\r\n  } = props;\r\n  const onMonthClick = startOfMonth => {\r\n    setCurrentMonth(startOfMonth);\r\n  };\r\n  const classes = classNames(rootClassName || css.root, className);\r\n  const popupClasses = classNames(css.popup, { [css.isOpen]: isOpen });\r\n\r\n  return (\r\n    <OutsideClickHandler onOutsideClick={() => setIsOpen(false)}>\r\n      <div className={classes} onKeyDown={handleKeyDown(setIsOpen)}>\r\n        <InlineTextButton className={css.label} onClick={() => setIsOpen(prevState => !prevState)}>\r\n          {label}\r\n        </InlineTextButton>\r\n        <div className={popupClasses}>\r\n          {isOpen ? (\r\n            <PickerForm initialValues={initialValues}>\r\n              <FieldDateRangeController\r\n                name=\"dates\"\r\n                minimumNights={6}\r\n                onChange={({ startDate, endDate }) => {\r\n                  onDateChange(startDate);\r\n                  setIsOpen(false);\r\n                }}\r\n                initialVisibleMonth={initialVisibleMonth(date, timeZone)}\r\n                onPrevMonthClick={() => onMonthClick(getStartOfPrevMonth(currentMonth, timeZone))}\r\n                onNextMonthClick={() => onMonthClick(getStartOfNextMonth(currentMonth, timeZone))}\r\n                navNext={\r\n                  <Next\r\n                    showUntilDate={endOfAvailabilityExceptionRange(timeZone, TODAY)}\r\n                    startOfNextRange={getStartOfNextMonth(currentMonth, timeZone)}\r\n                  />\r\n                }\r\n                navPrev={\r\n                  <Prev\r\n                    showUntilDate={getStartOf(TODAY, 'month', timeZone)}\r\n                    startOfPrevRange={getStartOfPrevMonth(currentMonth, timeZone)}\r\n                  />\r\n                }\r\n                {...rest}\r\n              />\r\n            </PickerForm>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </OutsideClickHandler>\r\n  );\r\n};\r\n\r\nexport default WeekPicker;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"titleWrapper\":\"WeeklyCalendar_titleWrapper__Fjty2\",\"weekPicker\":\"WeeklyCalendar_weekPicker__NRv+g marketplaceSearchFilterSublabelFontStyles\",\"sectionTitle\":\"WeeklyCalendar_sectionTitle__ckdbM marketplaceSearchFilterSublabelFontStyles\",\"weekPickerLabel\":\"WeeklyCalendar_weekPickerLabel__5WGN8 marketplaceSearchFilterSublabelFontStyles\",\"weekRange\":\"WeeklyCalendar_weekRange__SAdar\",\"rangePart\":\"WeeklyCalendar_rangePart__vZ5LK\",\"weekPickerIcon\":\"WeeklyCalendar_weekPickerIcon__jA3Nb\",\"navigation\":\"WeeklyCalendar_navigation__v0+aW\",\"button\":\"WeeklyCalendar_button__hibIs\",\"prev\":\"WeeklyCalendar_prev__SZqD9 WeeklyCalendar_button__hibIs\",\"next\":\"WeeklyCalendar_next__8XEcD WeeklyCalendar_button__hibIs\",\"grid\":\"WeeklyCalendar_grid__WoQVz\",\"dateLabelContainer\":\"WeeklyCalendar_dateLabelContainer__evegH\",\"dateLabel\":\"WeeklyCalendar_dateLabel__k8anz p\",\"dateAndMonth\":\"WeeklyCalendar_dateAndMonth__qTPq8 h5\",\"blockedDateLabel\":\"WeeklyCalendar_blockedDateLabel__HFN1R\",\"info\":\"WeeklyCalendar_info__fIcxo\",\"planEntries\":\"WeeklyCalendar_planEntries__wuVuH\",\"exceptionsContainer\":\"WeeklyCalendar_exceptionsContainer__KMG06\",\"exceptionsTitle\":\"WeeklyCalendar_exceptionsTitle__k94Q+ marketplaceSmallFontStyles\",\"exceptionsSubtitle\":\"WeeklyCalendar_exceptionsSubtitle__UbcJe marketplaceTinyFontStyles\",\"timeRange\":\"WeeklyCalendar_timeRange__FhSKf marketplaceTinyFontStyles\",\"availabilityDot\":\"WeeklyCalendar_availabilityDot__BSDar\",\"isAvailable\":\"WeeklyCalendar_isAvailable__BGcPL\",\"planEntry\":\"WeeklyCalendar_planEntry__hIYUo\",\"deleteIconWrapper\":\"WeeklyCalendar_deleteIconWrapper__5w8Q6\",\"deleteIcon\":\"WeeklyCalendar_deleteIcon__+PI3f\",\"deleteButton\":\"WeeklyCalendar_deleteButton__izPaD\",\"exception\":\"WeeklyCalendar_exception__m3UsM\",\"date\":\"WeeklyCalendar_date__u-E9u marketplaceTabNavHorizontalFontStyles\",\"blockedDate\":\"WeeklyCalendar_blockedDate__W0RYd\"};","import React, { useEffect, useState } from 'react';\r\nimport { arrayOf, bool, func, number, object, shape, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n// Import configs and util modules\r\nimport appSettings from '../../../../../config/settings';\r\nimport { FormattedDate, FormattedMessage, useIntl } from '../../../../../util/reactIntl';\r\nimport {\r\n  getStartOf,\r\n  getStartOfWeek,\r\n  getMomentFromDate,\r\n  getStartOfWeekAsMoment,\r\n  getEndOfWeekAsMoment,\r\n  isInRange,\r\n  parseDateFromISO8601,\r\n  parseDateTimeString,\r\n  stringifyDateToISO8601,\r\n} from '../../../../../util/dates';\r\nimport { availabilityPerDate } from '../../../../../util/generators';\r\nimport { createResourceLocatorString } from '../../../../../util/routes';\r\nimport { DATE_TYPE_DATE, DATE_TYPE_TIME, propTypes } from '../../../../../util/types';\r\n\r\n// Import shared components\r\nimport {\r\n  Heading,\r\n  H4,\r\n  IconArrowHead,\r\n  IconDelete,\r\n  IconSpinner,\r\n  TimeRange,\r\n} from '../../../../../components';\r\n\r\nimport {\r\n  endOfAvailabilityExceptionRange,\r\n  getStartOfNextWeek,\r\n  getStartOfPrevWeek,\r\n  handleWeekClick,\r\n} from '../availability.helpers';\r\n\r\nimport Next from '../NextArrow';\r\nimport Prev from '../PrevArrow';\r\nimport WeekPicker from './WeekPicker';\r\nimport css from './WeeklyCalendar.module.css';\r\n\r\nconst TODAY = new Date();\r\n\r\n/////////////\r\n// Weekday //\r\n/////////////\r\n\r\nconst parseLocalizedTime = (date, timeString, timeZone) => {\r\n  const dateString = stringifyDateToISO8601(date, timeZone);\r\n  return parseDateTimeString(`${dateString} ${timeString}`, timeZone);\r\n};\r\n\r\nconst getEndTimeAsDate = (date, endTime, isDaily, timeZone) => {\r\n  const endTimeAsDate =\r\n    endTime == '00:00' && !isDaily\r\n      ? getStartOf(date, 'day', timeZone, 1, 'days')\r\n      : parseLocalizedTime(date, endTime, timeZone);\r\n  return endTimeAsDate;\r\n};\r\n\r\n// A UI component that renders weekday and date on a given time zone:\r\n//   Monday\r\n//   January 9\r\n// It's complement in the grid of WeeklyCalendar is CalendarDate,\r\n// which contains information about availability plan, and exceptions on that date.\r\nconst DateLabel = ({ dateId, hasAvailability, timeZone }) => {\r\n  const date = parseDateFromISO8601(dateId, timeZone);\r\n  return (\r\n    <div\r\n      className={classNames(css.dateLabelContainer, { [css.blockedDateLabel]: !hasAvailability })}\r\n    >\r\n      <H4 className={classNames(css.dateLabel)}>\r\n        <FormattedDate value={date} weekday=\"long\" timeZone={timeZone} />\r\n        <br />\r\n        <span className={css.dateAndMonth}>\r\n          <FormattedDate value={date} month=\"long\" day=\"numeric\" timeZone={timeZone} />\r\n        </span>\r\n      </H4>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Component that renders an entry in the availability plan (weekly schedule)\r\nconst PlanEntry = ({ date, entry, useFullDays, isDaily, timeZone, intl, ...rest }) => {\r\n  const isAvailable = entry.seats > 0;\r\n  const availabilityInfo = isAvailable ? (\r\n    <FormattedMessage id=\"EditListingAvailabilityPanel.WeeklyCalendar.available\" />\r\n  ) : (\r\n    <FormattedMessage id=\"EditListingAvailabilityPanel.WeeklyCalendar.notAvailable\" />\r\n  );\r\n\r\n  return (\r\n    <div className={css.planEntry} {...rest}>\r\n      <div\r\n        className={classNames(css.availabilityDot, {\r\n          [css.isAvailable]: entry.seats > 0,\r\n        })}\r\n      />\r\n      {useFullDays ? (\r\n        availabilityInfo\r\n      ) : (\r\n        <TimeRange\r\n          className={css.timeRange}\r\n          startDate={parseLocalizedTime(date, entry.startTime, timeZone)}\r\n          endDate={getEndTimeAsDate(date, entry.endTime, isDaily, timeZone)}\r\n          dateType={useFullDays ? DATE_TYPE_DATE : DATE_TYPE_TIME}\r\n          timeZone={timeZone}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Component that renders an exception that touches the given date in the WeeklyCalendar\r\nconst ExceptionEntry = ({\r\n  exception,\r\n  useFullDays,\r\n  isDaily,\r\n  timeZone,\r\n  onDeleteAvailabilityException,\r\n}) => {\r\n  const millisecondBeforeEndTime = new Date(exception.attributes.end.getTime() - 1);\r\n  const rangeEnd = isDaily ? millisecondBeforeEndTime : exception.attributes.end;\r\n  return (\r\n    <div className={css.exception}>\r\n      <div\r\n        className={classNames(css.availabilityDot, {\r\n          [css.isAvailable]: exception.attributes.seats > 0,\r\n        })}\r\n      />\r\n      <TimeRange\r\n        className={css.timeRange}\r\n        startDate={exception.attributes.start}\r\n        endDate={rangeEnd}\r\n        dateType={useFullDays ? DATE_TYPE_DATE : DATE_TYPE_TIME}\r\n        timeZone={timeZone}\r\n      />\r\n      <button\r\n        className={css.deleteButton}\r\n        onClick={() => onDeleteAvailabilityException({ id: exception.id })}\r\n      >\r\n        <span className={css.deleteIconWrapper}>\r\n          <IconDelete rootClassName={css.deleteIcon} />\r\n        </span>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Component that renders all the ExceptionEntry components that allow availability (seats > 0)\r\nconst AvailableExceptionsInfo = ({\r\n  availableExceptions,\r\n  useFullDays,\r\n  isDaily,\r\n  timeZone,\r\n  onDeleteAvailabilityException,\r\n}) => {\r\n  const hasAvailableExceptions = availableExceptions.length > 0;\r\n  return hasAvailableExceptions ? (\r\n    <>\r\n      <Heading as=\"h6\" rootClassName={css.exceptionsSubtitle}>\r\n        <FormattedMessage id=\"EditListingAvailabilityPanel.WeeklyCalendar.available\" />\r\n      </Heading>\r\n      {availableExceptions.map(exception => {\r\n        return (\r\n          <ExceptionEntry\r\n            key={exception.id.uuid}\r\n            exception={exception}\r\n            timeZone={timeZone}\r\n            useFullDays={useFullDays}\r\n            isDaily={isDaily}\r\n            onDeleteAvailabilityException={onDeleteAvailabilityException}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  ) : null;\r\n};\r\n\r\n// Component that renders all the ExceptionEntry components that blocks availability (seats === 0)\r\nconst NotAvailableExceptionsInfo = ({\r\n  blockingExceptions,\r\n  useFullDays,\r\n  isDaily,\r\n  timeZone,\r\n  onDeleteAvailabilityException,\r\n}) => {\r\n  const hasBlockingExceptions = blockingExceptions.length > 0;\r\n  return hasBlockingExceptions ? (\r\n    <>\r\n      <Heading as=\"h6\" rootClassName={css.exceptionsSubtitle}>\r\n        <FormattedMessage id=\"EditListingAvailabilityPanel.WeeklyCalendar.notAvailable\" />\r\n      </Heading>\r\n      {blockingExceptions.map(exception => {\r\n        return (\r\n          <ExceptionEntry\r\n            key={exception.id.uuid}\r\n            exception={exception}\r\n            timeZone={timeZone}\r\n            useFullDays={useFullDays}\r\n            isDaily={isDaily}\r\n            onDeleteAvailabilityException={onDeleteAvailabilityException}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  ) : null;\r\n};\r\n\r\n// The calendar date info (related to <DateLabel>)\r\nconst CalendarDate = props => {\r\n  const intl = useIntl();\r\n  const {\r\n    availabilityData,\r\n    hasAvailability,\r\n    isDaily,\r\n    useFullDays,\r\n    onDeleteAvailabilityException,\r\n    fetchExceptionsInProgress,\r\n    fetchExceptionsError,\r\n    timeZone,\r\n  } = props;\r\n  const hasPlanEntries = availabilityData?.planEntries?.length > 0;\r\n  const hasExceptions = availabilityData?.exceptions?.length > 0;\r\n  const availableExceptions = availabilityData.exceptions.filter(e => e.attributes.seats > 0);\r\n  const blockingExceptions = availabilityData.exceptions.filter(e => e.attributes.seats === 0);\r\n  const date = parseDateFromISO8601(availabilityData?.id, timeZone);\r\n\r\n  return (\r\n    <div className={classNames(css.date, { [css.blockedDate]: !hasAvailability })}>\r\n      <div className={css.info}>\r\n        {hasPlanEntries ? (\r\n          <div className={css.planEntries}>\r\n            {availabilityData.planEntries.map((e, i) => {\r\n              return (\r\n                <PlanEntry\r\n                  key={`entry${i}`}\r\n                  date={date}\r\n                  entry={e}\r\n                  timeZone={timeZone}\r\n                  isDaily={isDaily}\r\n                  useFullDays={useFullDays}\r\n                  intl={intl}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        ) : null}\r\n        {hasExceptions || fetchExceptionsError ? (\r\n          <div className={css.exceptionsContainer}>\r\n            <Heading\r\n              as=\"h5\"\r\n              rootClassName={css.exceptionsTitle}\r\n              title=\"Exceptions overwrite weekly schedule\"\r\n            >\r\n              <FormattedMessage id=\"EditListingAvailabilityPanel.WeeklyCalendar.exceptions\" />\r\n            </Heading>\r\n            {fetchExceptionsInProgress ? (\r\n              <IconSpinner />\r\n            ) : fetchExceptionsError ? (\r\n              <FormattedMessage id=\"EditListingAvailabilityPanel.WeeklyCalendar.fetchExceptionsError\" />\r\n            ) : (\r\n              <>\r\n                <AvailableExceptionsInfo\r\n                  availableExceptions={availableExceptions}\r\n                  useFullDays={useFullDays}\r\n                  isDaily={isDaily}\r\n                  timeZone={timeZone}\r\n                  onDeleteAvailabilityException={onDeleteAvailabilityException}\r\n                />\r\n                <NotAvailableExceptionsInfo\r\n                  blockingExceptions={blockingExceptions}\r\n                  useFullDays={useFullDays}\r\n                  isDaily={isDaily}\r\n                  timeZone={timeZone}\r\n                  onDeleteAvailabilityException={onDeleteAvailabilityException}\r\n                />\r\n              </>\r\n            )}\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n/////////////////////\r\n// WeeklyCalendar //\r\n/////////////////////\r\n\r\nconst getStartOfSelectedWeek = ({ locationSearch, timeZone, firstDayOfWeek }) => {\r\n  const selectedDate = locationSearch?.d\r\n    ? parseDateFromISO8601(locationSearch.d, timeZone)\r\n    : new Date();\r\n  return getStartOfWeek(selectedDate, timeZone, firstDayOfWeek);\r\n};\r\n\r\n// Formatted week range for the label of WeekPicker component\r\nconst FormattedWeekRange = ({ currentWeek, endOfCurrentWeek, timeZone, intl }) => {\r\n  const formattingOptions = { year: 'numeric', month: 'short', day: 'numeric', timeZone };\r\n  const formatted = intl.formatDateTimeRange(currentWeek, endOfCurrentWeek, formattingOptions);\r\n  const dash = '–';\r\n  const breakWordMinLenght = 30;\r\n  const weekRange =\r\n    formatted.length > breakWordMinLenght ? (\r\n      formatted.split(dash).map((rangePartial, i) => (\r\n        <span key={`weekspan${i}`} className={css.rangePart}>\r\n          {rangePartial}\r\n          {i == 0 ? ` ${dash} ` : null}\r\n        </span>\r\n      ))\r\n    ) : (\r\n      <span className={css.rangePart}>{formatted}</span>\r\n    );\r\n  return weekRange;\r\n};\r\n\r\n// WeeklyCalendar shows the weekly data (plan entries & exceptions) on selected week (on given time zone)\r\nconst WeeklyCalendar = props => {\r\n  const [currentWeek, setCurrentWeek] = useState(\r\n    getStartOfSelectedWeek({ ...props, timeZone: props.availabilityPlan.timezone })\r\n  );\r\n  const intl = useIntl();\r\n\r\n  const {\r\n    className,\r\n    rootClassName,\r\n    headerClassName,\r\n    listingId,\r\n    availabilityPlan,\r\n    availabilityExceptions,\r\n    weeklyExceptionQueries,\r\n    isDaily,\r\n    useFullDays,\r\n    onDeleteAvailabilityException,\r\n    onFetchExceptions,\r\n    params,\r\n    firstDayOfWeek,\r\n    routeConfiguration,\r\n    history,\r\n  } = props;\r\n  // Get all the AvailabilityExcetions\r\n  const timeZone = availabilityPlan.timezone;\r\n  const endOfRange = endOfAvailabilityExceptionRange(timeZone, new Date());\r\n  const thisWeek = getStartOfWeek(TODAY, timeZone, firstDayOfWeek);\r\n  const endOfCurrentWeek = getStartOf(currentWeek, 'day', timeZone, 6, 'days');\r\n  const nextWeek = getStartOf(currentWeek, 'day', timeZone, 7, 'days');\r\n  const availableDates = availabilityPerDate(\r\n    currentWeek,\r\n    nextWeek,\r\n    availabilityPlan,\r\n    availabilityExceptions\r\n  );\r\n  const currentWeekId = stringifyDateToISO8601(currentWeek, timeZone);\r\n  const { fetchExceptionsInProgress, fetchExceptionsError } =\r\n    weeklyExceptionQueries[currentWeekId] || {};\r\n\r\n  useEffect(() => {\r\n    // Redirect if the current week is not in year's range\r\n    if (!isInRange(currentWeek, thisWeek, endOfRange, 'day', timeZone)) {\r\n      setCurrentWeek(thisWeek);\r\n      const redirectTo = createResourceLocatorString(\r\n        'EditListingPage',\r\n        routeConfiguration,\r\n        params,\r\n        {}\r\n      );\r\n      history.replace(redirectTo);\r\n    }\r\n  }, [currentWeek]);\r\n\r\n  useEffect(() => {\r\n    // On development mode, print also range info if \"verbose\" flag is true.\r\n    if (appSettings.dev && appSettings.verbose && fetchExceptionsInProgress === false) {\r\n      const formatRange = (start, end, available, timeZone) => {\r\n        const formattingOptions = { hour: 'numeric', minute: 'numeric', timeZone };\r\n        const formattedStart = intl.formatDate(start, formattingOptions);\r\n        const formattedEnd = intl.formatDate(end, formattingOptions);\r\n        const availabilityEmoji = available ? '✅' : '🚫';\r\n        console.log('          ', availabilityEmoji, formattedStart, ' - ', formattedEnd);\r\n      };\r\n\r\n      console.log('\\n\\n%cDaily availability ranges:', 'font-weight: bold;');\r\n      Object.keys(availableDates).forEach(d => {\r\n        const weekday = intl.formatDate(availableDates[d]?.ranges?.[0]?.start, { weekday: 'long' });\r\n        console.log(`\\n${d} ${weekday}`);\r\n        availableDates[d].ranges.map(r => {\r\n          formatRange(r.start, r.end, r.seats > 0, timeZone);\r\n        });\r\n      });\r\n    }\r\n  }, [currentWeek, fetchExceptionsInProgress]);\r\n\r\n  const daysOfWeekStrings = Object.keys(availableDates);\r\n  const weekClickParams = {\r\n    currentWeek,\r\n    setCurrentWeek,\r\n    weeklyExceptionQueries,\r\n    listingId,\r\n    timeZone,\r\n    onFetchExceptions,\r\n    firstDayOfWeek,\r\n  };\r\n  const onWeekClick = handleWeekClick(weekClickParams);\r\n\r\n  const classes = classNames(rootClassName || css.root, className);\r\n\r\n  return (\r\n    <section className={classes}>\r\n      <header className={headerClassName}>\r\n        <div className={css.titleWrapper}>\r\n          <Heading as=\"h2\" className={css.sectionTitle}>\r\n            <FormattedMessage id=\"EditListingAvailabilityPanel.WeeklyCalendar.scheduleTitle\" />\r\n          </Heading>\r\n          <WeekPicker\r\n            className={css.weekPicker}\r\n            label={\r\n              <div className={css.weekPickerLabel}>\r\n                <span className={css.weekRange}>\r\n                  <FormattedWeekRange\r\n                    currentWeek={currentWeek}\r\n                    endOfCurrentWeek={endOfCurrentWeek}\r\n                    timeZone={timeZone}\r\n                    intl={intl}\r\n                  />\r\n                </span>\r\n                <span className={css.weekPickerIcon}>\r\n                  <IconArrowHead size=\"small\" direction=\"down\" />\r\n                </span>\r\n              </div>\r\n            }\r\n            initialValues={{ dates: { startDate: currentWeek, endDate: endOfCurrentWeek } }}\r\n            firstDayOfWeek={firstDayOfWeek}\r\n            date={getMomentFromDate(currentWeek)}\r\n            onDateChange={date => {\r\n              const updatedDate = getStartOfWeek(date, timeZone, firstDayOfWeek);\r\n              setCurrentWeek(updatedDate);\r\n              const redirectTo = createResourceLocatorString(\r\n                'EditListingPage',\r\n                routeConfiguration,\r\n                params,\r\n                { d: stringifyDateToISO8601(updatedDate) }\r\n              );\r\n              history.replace(redirectTo);\r\n            }}\r\n            startDateOffset={day => getStartOfWeekAsMoment(day, timeZone, firstDayOfWeek)}\r\n            endDateOffset={day => getEndOfWeekAsMoment(day, timeZone, firstDayOfWeek)}\r\n            onFocusChange={({ focused }) => setWeekPickerFocused(focused)}\r\n            isOutsideRange={day => !isInRange(day, thisWeek, endOfRange, 'day', timeZone)}\r\n            timeZone={timeZone}\r\n          />\r\n        </div>\r\n        <div className={css.navigation}>\r\n          <Prev\r\n            className={css.prev}\r\n            onClick={() => onWeekClick(getStartOfPrevWeek)}\r\n            showUntilDate={thisWeek}\r\n            startOfPrevRange={getStartOfPrevWeek(currentWeek, timeZone, firstDayOfWeek)}\r\n            size=\"big\"\r\n          />\r\n          <Next\r\n            className={css.next}\r\n            onClick={() => onWeekClick(getStartOfNextWeek)}\r\n            showUntilDate={endOfAvailabilityExceptionRange(timeZone, TODAY)}\r\n            startOfNextRange={getStartOfNextWeek(currentWeek, timeZone, firstDayOfWeek)}\r\n            size=\"big\"\r\n          />\r\n        </div>\r\n      </header>\r\n\r\n      <div className={css.grid}>\r\n        {daysOfWeekStrings.reduce((all, dayString) => {\r\n          const availabilityData = availableDates[dayString];\r\n          const hasAvailability = availabilityData.hasAvailability;\r\n\r\n          all.push(\r\n            <DateLabel\r\n              key={`label_${availabilityData?.id}`}\r\n              dateId={availabilityData?.id}\r\n              hasAvailability={hasAvailability}\r\n              timeZone={timeZone}\r\n            />\r\n          );\r\n          all.push(\r\n            <CalendarDate\r\n              key={dayString}\r\n              availabilityData={availabilityData}\r\n              hasAvailability={hasAvailability}\r\n              onDeleteAvailabilityException={onDeleteAvailabilityException}\r\n              isDaily={isDaily}\r\n              useFullDays={useFullDays}\r\n              timeZone={timeZone}\r\n              fetchExceptionsInProgress={fetchExceptionsInProgress}\r\n              fetchExceptionsError={fetchExceptionsError}\r\n            />\r\n          );\r\n          return all;\r\n        }, [])}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nWeeklyCalendar.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  headerClassName: null,\r\n  locationSearch: null,\r\n  availabilityExceptions: [],\r\n  firstDayOfWeek: 0,\r\n};\r\n\r\nWeeklyCalendar.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  headerClassName: string,\r\n  locationSearch: shape({\r\n    d: string,\r\n  }),\r\n  listingId: propTypes.uuid.isRequired,\r\n  availabilityPlan: propTypes.availabilityPlan.isRequired,\r\n  availabilityExceptions: arrayOf(propTypes.availabilityException),\r\n  weeklyExceptionQueries: object.isRequired,\r\n  isDaily: bool.isRequired,\r\n  useFullDays: bool.isRequired,\r\n  onDeleteAvailabilityException: func.isRequired,\r\n  onFetchExceptions: func.isRequired,\r\n  params: object.isRequired, // path params\r\n  firstDayOfWeek: number,\r\n  routeConfiguration: arrayOf(propTypes.route).isRequired,\r\n  history: shape({\r\n    replace: func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default WeeklyCalendar;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"EditListingAvailabilityPanel_root__FcrAt\",\"sectionHeader\":\"EditListingAvailabilityPanel_sectionHeader__sxUD-\",\"planInfo\":\"EditListingAvailabilityPanel_planInfo__HnaDL\",\"section\":\"EditListingAvailabilityPanel_section__-LQKz\",\"editPlanButton\":\"EditListingAvailabilityPanel_editPlanButton__0Mwhr\",\"addExceptionButton\":\"EditListingAvailabilityPanel_addExceptionButton__HYYI9 h4\",\"goToNextTabButton\":\"EditListingAvailabilityPanel_goToNextTabButton__zu6Z9\",\"modalContainer\":\"EditListingAvailabilityPanel_modalContainer__dlvoN marketplaceModalBaseStyles\",\"error\":\"EditListingAvailabilityPanel_error__pZEtQ\"};","import React, { useState } from 'react';\r\nimport { arrayOf, bool, func, object, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n// Import configs and util modules\r\nimport { FormattedMessage } from '../../../../util/reactIntl';\r\nimport { getDefaultTimeZoneOnBrowser, timestampToDate } from '../../../../util/dates';\r\nimport { LISTING_STATE_DRAFT, propTypes } from '../../../../util/types';\r\nimport { DAY, isFullDay } from '../../../../transactions/transaction';\r\n\r\n// Import shared components\r\nimport { Button, H3, InlineTextButton, ListingLink, Modal } from '../../../../components';\r\n\r\n// Import modules from this directory\r\nimport EditListingAvailabilityPlanForm from './EditListingAvailabilityPlanForm';\r\nimport EditListingAvailabilityExceptionForm from './EditListingAvailabilityExceptionForm';\r\nimport WeeklyCalendar from './WeeklyCalendar/WeeklyCalendar';\r\n\r\nimport css from './EditListingAvailabilityPanel.module.css';\r\n\r\n// This is the order of days as JavaScript understands them\r\n// The number returned by \"new Date().getDay()\" refers to day of week starting from sunday.\r\nconst WEEKDAYS = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\r\n\r\n// This is the order of days as JavaScript understands them\r\n// The number returned by \"new Date().getDay()\" refers to day of week starting from sunday.\r\nconst rotateDays = (days, startOfWeek) => {\r\n  return startOfWeek === 0 ? days : days.slice(startOfWeek).concat(days.slice(0, startOfWeek));\r\n};\r\n\r\nconst defaultTimeZone = () =>\r\n  typeof window !== 'undefined' ? getDefaultTimeZoneOnBrowser() : 'Etc/UTC';\r\n\r\n///////////////////////////////////////////////////\r\n// EditListingAvailabilityExceptionPanel - utils //\r\n///////////////////////////////////////////////////\r\n\r\n// Create initial entry mapping for form's initial values\r\nconst createEntryDayGroups = (entries = {}) => {\r\n  // Collect info about which days are active in the availability plan form:\r\n  let activePlanDays = [];\r\n  return entries.reduce((groupedEntries, entry) => {\r\n    const { startTime, endTime: endHour, dayOfWeek } = entry;\r\n    const dayGroup = groupedEntries[dayOfWeek] || [];\r\n    activePlanDays = activePlanDays.includes(dayOfWeek)\r\n      ? activePlanDays\r\n      : [...activePlanDays, dayOfWeek];\r\n    return {\r\n      ...groupedEntries,\r\n      [dayOfWeek]: [\r\n        ...dayGroup,\r\n        {\r\n          startTime,\r\n          endTime: endHour === '00:00' ? '24:00' : endHour,\r\n        },\r\n      ],\r\n      activePlanDays,\r\n    };\r\n  }, {});\r\n};\r\n\r\n// Create initial values\r\nconst createInitialValues = availabilityPlan => {\r\n  const { timezone, entries } = availabilityPlan || {};\r\n  const tz = timezone || defaultTimeZone();\r\n  return {\r\n    timezone: tz,\r\n    ...createEntryDayGroups(entries),\r\n  };\r\n};\r\n\r\n// Create entries from submit values\r\nconst createEntriesFromSubmitValues = values =>\r\n  WEEKDAYS.reduce((allEntries, dayOfWeek) => {\r\n    const dayValues = values[dayOfWeek] || [];\r\n    const dayEntries = dayValues.map(dayValue => {\r\n      const { startTime, endTime } = dayValue;\r\n      // Note: This template doesn't support seats yet.\r\n      return startTime && endTime\r\n        ? {\r\n            dayOfWeek,\r\n            seats: 1,\r\n            startTime,\r\n            endTime: endTime === '24:00' ? '00:00' : endTime,\r\n          }\r\n        : null;\r\n    });\r\n\r\n    return allEntries.concat(dayEntries.filter(e => !!e));\r\n  }, []);\r\n\r\n// Create availabilityPlan from submit values\r\nconst createAvailabilityPlan = values => ({\r\n  availabilityPlan: {\r\n    type: 'availability-plan/time',\r\n    timezone: values.timezone,\r\n    entries: createEntriesFromSubmitValues(values),\r\n  },\r\n});\r\n\r\n//////////////////////////////////\r\n// EditListingAvailabilityPanel //\r\n//////////////////////////////////\r\nconst EditListingAvailabilityPanel = props => {\r\n  const {\r\n    className,\r\n    rootClassName,\r\n    params,\r\n    locationSearch,\r\n    listing,\r\n    monthlyExceptionQueries,\r\n    weeklyExceptionQueries,\r\n    allExceptions,\r\n    onAddAvailabilityException,\r\n    onDeleteAvailabilityException,\r\n    disabled,\r\n    ready,\r\n    onFetchExceptions,\r\n    onSubmit,\r\n    onManageDisableScrolling,\r\n    onNextTab,\r\n    submitButtonText,\r\n    updateInProgress,\r\n    errors,\r\n    config,\r\n    routeConfiguration,\r\n    history,\r\n  } = props;\r\n  // Hooks\r\n  const [isEditPlanModalOpen, setIsEditPlanModalOpen] = useState(false);\r\n  const [isEditExceptionsModalOpen, setIsEditExceptionsModalOpen] = useState(false);\r\n  const [valuesFromLastSubmit, setValuesFromLastSubmit] = useState(null);\r\n\r\n  const firstDayOfWeek = config.localization.firstDayOfWeek;\r\n  const classes = classNames(rootClassName || css.root, className);\r\n  const listingAttributes = listing?.attributes;\r\n  const unitType = listingAttributes?.publicData?.unitType;\r\n  const useFullDays = isFullDay(unitType);\r\n  const hasAvailabilityPlan = !!listingAttributes?.availabilityPlan;\r\n  const isPublished = listing?.id && listingAttributes?.state !== LISTING_STATE_DRAFT;\r\n  const defaultAvailabilityPlan = {\r\n    type: 'availability-plan/time',\r\n    timezone: defaultTimeZone(),\r\n    entries: [\r\n      // { dayOfWeek: 'mon', startTime: '09:00', endTime: '17:00', seats: 1 },\r\n      // { dayOfWeek: 'tue', startTime: '09:00', endTime: '17:00', seats: 1 },\r\n      // { dayOfWeek: 'wed', startTime: '09:00', endTime: '17:00', seats: 1 },\r\n      // { dayOfWeek: 'thu', startTime: '09:00', endTime: '17:00', seats: 1 },\r\n      // { dayOfWeek: 'fri', startTime: '09:00', endTime: '17:00', seats: 1 },\r\n      // { dayOfWeek: 'sat', startTime: '09:00', endTime: '17:00', seats: 1 },\r\n      // { dayOfWeek: 'sun', startTime: '09:00', endTime: '17:00', seats: 1 },\r\n    ],\r\n  };\r\n  const availabilityPlan = listingAttributes?.availabilityPlan || defaultAvailabilityPlan;\r\n  const initialValues = valuesFromLastSubmit\r\n    ? valuesFromLastSubmit\r\n    : createInitialValues(availabilityPlan);\r\n\r\n  const handleSubmit = values => {\r\n    setValuesFromLastSubmit(values);\r\n\r\n    // Final Form can wait for Promises to return.\r\n    return onSubmit(createAvailabilityPlan(values))\r\n      .then(() => {\r\n        setIsEditPlanModalOpen(false);\r\n      })\r\n      .catch(e => {\r\n        // Don't close modal if there was an error\r\n      });\r\n  };\r\n\r\n  const sortedAvailabilityExceptions = allExceptions;\r\n\r\n  // Save exception click handler\r\n  const saveException = values => {\r\n    const { availability, exceptionStartTime, exceptionEndTime, exceptionRange } = values;\r\n\r\n    // TODO: add proper seat handling\r\n    const seats = availability === 'available' ? 1 : 0;\r\n\r\n    // Exception date/time range is given through FieldDateRangeInput or\r\n    // separate time fields.\r\n    const range = useFullDays\r\n      ? {\r\n          start: exceptionRange?.startDate,\r\n          end: exceptionRange?.endDate,\r\n        }\r\n      : {\r\n          start: timestampToDate(exceptionStartTime),\r\n          end: timestampToDate(exceptionEndTime),\r\n        };\r\n\r\n    const params = {\r\n      listingId: listing.id,\r\n      seats,\r\n      ...range,\r\n    };\r\n\r\n    return onAddAvailabilityException(params)\r\n      .then(() => {\r\n        setIsEditExceptionsModalOpen(false);\r\n      })\r\n      .catch(e => {\r\n        // Don't close modal if there was an error\r\n      });\r\n  };\r\n\r\n  return (\r\n    <main className={classes}>\r\n      <H3 as=\"h1\">\r\n        {isPublished ? (\r\n          <FormattedMessage\r\n            id=\"EditListingAvailabilityPanel.title\"\r\n            values={{ listingTitle: <ListingLink listing={listing} />, lineBreak: <br /> }}\r\n          />\r\n        ) : (\r\n          <FormattedMessage\r\n            id=\"EditListingAvailabilityPanel.createListingTitle\"\r\n            values={{ lineBreak: <br /> }}\r\n          />\r\n        )}\r\n      </H3>\r\n\r\n      <div className={css.planInfo}>\r\n        {!hasAvailabilityPlan ? (\r\n          <p>\r\n            <FormattedMessage id=\"EditListingAvailabilityPanel.availabilityPlanInfo\" />\r\n          </p>\r\n        ) : null}\r\n\r\n        <InlineTextButton\r\n          className={css.editPlanButton}\r\n          onClick={() => setIsEditPlanModalOpen(true)}\r\n        >\r\n          {hasAvailabilityPlan ? (\r\n            <FormattedMessage id=\"EditListingAvailabilityPanel.editAvailabilityPlan\" />\r\n          ) : (\r\n            <FormattedMessage id=\"EditListingAvailabilityPanel.setAvailabilityPlan\" />\r\n          )}\r\n        </InlineTextButton>\r\n      </div>\r\n\r\n      {hasAvailabilityPlan ? (\r\n        <>\r\n          <WeeklyCalendar\r\n            className={css.section}\r\n            headerClassName={css.sectionHeader}\r\n            listingId={listing.id}\r\n            availabilityPlan={availabilityPlan}\r\n            availabilityExceptions={sortedAvailabilityExceptions}\r\n            weeklyExceptionQueries={weeklyExceptionQueries}\r\n            isDaily={unitType === DAY}\r\n            useFullDays={useFullDays}\r\n            onDeleteAvailabilityException={onDeleteAvailabilityException}\r\n            onFetchExceptions={onFetchExceptions}\r\n            params={params}\r\n            locationSearch={locationSearch}\r\n            firstDayOfWeek={firstDayOfWeek}\r\n            routeConfiguration={routeConfiguration}\r\n            history={history}\r\n          />\r\n\r\n          <section className={css.section}>\r\n            <InlineTextButton\r\n              className={css.addExceptionButton}\r\n              onClick={() => setIsEditExceptionsModalOpen(true)}\r\n              disabled={disabled || !hasAvailabilityPlan}\r\n              ready={ready}\r\n            >\r\n              <FormattedMessage id=\"EditListingAvailabilityPanel.addException\" />\r\n            </InlineTextButton>\r\n          </section>\r\n        </>\r\n      ) : null}\r\n\r\n      {errors.showListingsError ? (\r\n        <p className={css.error}>\r\n          <FormattedMessage id=\"EditListingAvailabilityPanel.showListingFailed\" />\r\n        </p>\r\n      ) : null}\r\n\r\n      {!isPublished ? (\r\n        <Button\r\n          className={css.goToNextTabButton}\r\n          onClick={onNextTab}\r\n          disabled={!hasAvailabilityPlan}\r\n        >\r\n          {submitButtonText}\r\n        </Button>\r\n      ) : null}\r\n\r\n      {onManageDisableScrolling && isEditPlanModalOpen ? (\r\n        <Modal\r\n          id=\"EditAvailabilityPlan\"\r\n          isOpen={isEditPlanModalOpen}\r\n          onClose={() => setIsEditPlanModalOpen(false)}\r\n          onManageDisableScrolling={onManageDisableScrolling}\r\n          containerClassName={css.modalContainer}\r\n          usePortal\r\n        >\r\n          <EditListingAvailabilityPlanForm\r\n            formId=\"EditListingAvailabilityPlanForm\"\r\n            listingTitle={listingAttributes?.title}\r\n            availabilityPlan={availabilityPlan}\r\n            weekdays={rotateDays(WEEKDAYS, firstDayOfWeek)}\r\n            useFullDays={useFullDays}\r\n            onSubmit={handleSubmit}\r\n            initialValues={initialValues}\r\n            inProgress={updateInProgress}\r\n            fetchErrors={errors}\r\n          />\r\n        </Modal>\r\n      ) : null}\r\n\r\n      {onManageDisableScrolling && isEditExceptionsModalOpen ? (\r\n        <Modal\r\n          id=\"EditAvailabilityExceptions\"\r\n          isOpen={isEditExceptionsModalOpen}\r\n          onClose={() => setIsEditExceptionsModalOpen(false)}\r\n          onManageDisableScrolling={onManageDisableScrolling}\r\n          containerClassName={css.modalContainer}\r\n          usePortal\r\n        >\r\n          <EditListingAvailabilityExceptionForm\r\n            formId=\"EditListingAvailabilityExceptionForm\"\r\n            listingId={listing.id}\r\n            allExceptions={allExceptions}\r\n            monthlyExceptionQueries={monthlyExceptionQueries}\r\n            fetchErrors={errors}\r\n            onFetchExceptions={onFetchExceptions}\r\n            onSubmit={saveException}\r\n            timeZone={availabilityPlan.timezone}\r\n            isDaily={unitType === DAY}\r\n            updateInProgress={updateInProgress}\r\n            useFullDays={useFullDays}\r\n          />\r\n        </Modal>\r\n      ) : null}\r\n    </main>\r\n  );\r\n};\r\n\r\nEditListingAvailabilityPanel.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n  listing: null,\r\n  monthlyExceptionQueries: null,\r\n  weeklyExceptionQueries: null,\r\n  allExceptions: [],\r\n};\r\n\r\nEditListingAvailabilityPanel.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n\r\n  // We cannot use propTypes.listing since the listing might be a draft.\r\n  listing: object,\r\n  disabled: bool.isRequired,\r\n  ready: bool.isRequired,\r\n  monthlyExceptionQueries: object,\r\n  weeklyExceptionQueries: object,\r\n  allExceptions: arrayOf(propTypes.availabilityException),\r\n  onAddAvailabilityException: func.isRequired,\r\n  onDeleteAvailabilityException: func.isRequired,\r\n  onSubmit: func.isRequired,\r\n  onManageDisableScrolling: func.isRequired,\r\n  onNextTab: func.isRequired,\r\n  submitButtonText: string.isRequired,\r\n  updateInProgress: bool.isRequired,\r\n  errors: object.isRequired,\r\n};\r\n\r\nexport default EditListingAvailabilityPanel;\r\n","import React from 'react';\r\n\r\nimport { FormattedMessage } from '../../../../util/reactIntl';\r\n\r\nimport { H2 } from '../../../../components';\r\n\r\n/**\r\n * Error messages (e.g. invalidExistingListingType and noListingTypesSet)\r\n * @param {object} props\r\n * @returns JSX element containing the error message\r\n */\r\nconst ErrorMessage = props => {\r\n  const { invalidExistingListingType, noListingTypesSet, marketplaceName } = props;\r\n  return invalidExistingListingType ? (\r\n    <div>\r\n      <H2>\r\n        <FormattedMessage id=\"EditListingDetailsPanel.invalidListingTypeSetTitle\" />\r\n      </H2>\r\n      <p>\r\n        <FormattedMessage\r\n          id=\"EditListingDetailsPanel.invalidListingTypeSetDescription\"\r\n          values={{ marketplaceName }}\r\n        />\r\n      </p>\r\n    </div>\r\n  ) : noListingTypesSet ? (\r\n    <div>\r\n      <H2>\r\n        <FormattedMessage id=\"EditListingDetailsPanel.noListingTypeSetTitle\" />\r\n      </H2>\r\n      <p>\r\n        <FormattedMessage id=\"EditListingDetailsPanel.noListingTypeSetDescription\" />\r\n      </p>\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nexport default ErrorMessage;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"EditListingDetailsPanel_root__n+H4T\",\"form\":\"EditListingDetailsPanel_form__3jMRF\"};","import React from 'react';\r\nimport { bool, func, object, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n// Import util modules\r\nimport { FormattedMessage } from '../../../../util/reactIntl';\r\nimport { EXTENDED_DATA_SCHEMA_TYPES, LISTING_STATE_DRAFT } from '../../../../util/types';\r\nimport { isBookingProcessAlias } from '../../../../transactions/transaction';\r\n\r\n// Import shared components\r\nimport { H3, ListingLink } from '../../../../components';\r\n\r\n// Import modules from this directory\r\nimport ErrorMessage from './ErrorMessage';\r\nimport EditListingDetailsForm from './EditListingDetailsForm';\r\nimport css from './EditListingDetailsPanel.module.css';\r\n\r\n/**\r\n * Get listing configuration. For existing listings, it is stored to publicData.\r\n * For new listings, the data needs to be figured out from listingTypes configuration.\r\n *\r\n * In the latter case, we select first type in the array. However, EditListingDetailsForm component\r\n * gets 'selectableListingTypes' prop, which it uses to provide a way to make selection,\r\n * if multiple listing types are available.\r\n *\r\n * @param {Array} listingTypes\r\n * @param {Object} existingListingTypeInfo\r\n * @returns an object containing mainly information that can be stored to publicData.\r\n */\r\nconst getTransactionInfo = (listingTypes, existingListingTypeInfo = {}, inlcudeLabel = false) => {\r\n  const { listingType, transactionProcessAlias, unitType } = existingListingTypeInfo;\r\n\r\n  if (listingType && transactionProcessAlias && unitType) {\r\n    return { listingType, transactionProcessAlias, unitType };\r\n  } else if (listingTypes.length === 1) {\r\n    const { listingType: type, label, transactionType } = listingTypes[0];\r\n    const { alias, unitType: configUnitType } = transactionType;\r\n    const labelMaybe = inlcudeLabel ? { label: label || type } : {};\r\n    return {\r\n      listingType: type,\r\n      transactionProcessAlias: alias,\r\n      unitType: configUnitType,\r\n      ...labelMaybe,\r\n    };\r\n  }\r\n  return {};\r\n};\r\n\r\n/**\r\n * Check if listingType has already been set.\r\n *\r\n * If listing type (incl. process & unitType) has been set, we won't allow change to it.\r\n * It's possible to make it editable, but it becomes somewhat complex to modify following panels,\r\n * for the different process. (E.g. adjusting stock vs booking availability settings,\r\n * if process has been changed for existing listing.)\r\n *\r\n * @param {Object} publicData JSON-like data stored to listing entity.\r\n * @returns object literal with to keys: { hasExistingListingType, existingListingTypeInfo }\r\n */\r\nconst hasSetListingType = publicData => {\r\n  const { listingType, transactionProcessAlias, unitType } = publicData;\r\n  const existingListingTypeInfo = { listingType, transactionProcessAlias, unitType };\r\n\r\n  return {\r\n    hasExistingListingType: !!listingType && !!transactionProcessAlias && !!unitType,\r\n    existingListingTypeInfo,\r\n  };\r\n};\r\n\r\n/**\r\n * Pick extended data fields from given form data.\r\n * Picking is based on extended data configuration for the listing and target scope and listing type.\r\n *\r\n * This expects submit data to be namespaced (e.g. 'pub_') and it returns the field without that namespace.\r\n * This function is used when form submit values are restructured for the actual API endpoint.\r\n *\r\n * Note: This returns null for those fields that are managed by configuration, but don't match target listing type.\r\n *       These might exists if provider swaps between listing types before saving the draft listing.\r\n *\r\n * @param {Object} data values to look through against listingConfig.js and util/configHelpers.js\r\n * @param {String} targetScope Check that the scope of extended data the config matches\r\n * @param {String} targetListingType Check that the extended data is relevant for this listing type.\r\n * @param {Object} listingFieldConfigs an extended data configurtions for listing fields.\r\n * @returns Array of picked extended data fields from submitted data.\r\n */\r\nconst pickListingFieldsData = (data, targetScope, targetListingType, listingFieldConfigs) => {\r\n  return listingFieldConfigs.reduce((fields, field) => {\r\n    const { key, includeForListingTypes, scope = 'public', schemaType } = field || {};\r\n    const namespacePrefix = scope === 'public' ? `pub_` : `priv_`;\r\n    const namespacedKey = `${namespacePrefix}${key}`;\r\n\r\n    const isKnownSchemaType = EXTENDED_DATA_SCHEMA_TYPES.includes(schemaType);\r\n    const isTargetScope = scope === targetScope;\r\n    const isTargetListingType =\r\n      includeForListingTypes == null || includeForListingTypes.includes(targetListingType);\r\n\r\n    if (isKnownSchemaType && isTargetScope && isTargetListingType) {\r\n      const fieldValue = data[namespacedKey] || null;\r\n      return { ...fields, [key]: fieldValue };\r\n    } else if (isKnownSchemaType && isTargetScope && !isTargetListingType) {\r\n      // Note: this clears extra custom fields\r\n      // These might exists if provider swaps between listing types before saving the draft listing.\r\n      return { ...fields, [key]: null };\r\n    }\r\n    return fields;\r\n  }, {});\r\n};\r\n\r\n/**\r\n * Pick extended data fields from given extended data of the listing entity.\r\n * Picking is based on extended data configuration for the listing and target scope and listing type.\r\n *\r\n * This returns namespaced (e.g. 'pub_') initial values for the form.\r\n *\r\n * @param {Object} data extended data values to look through against listingConfig.js and util/configHelpers.js\r\n * @param {String} targetScope Check that the scope of extended data the config matches\r\n * @param {String} targetListingType Check that the extended data is relevant for this listing type.\r\n * @param {Object} listingFieldConfigs an extended data configurtions for listing fields.\r\n * @returns Array of picked extended data fields\r\n */\r\nconst initialValuesForListingFields = (\r\n  data,\r\n  targetScope,\r\n  targetListingType,\r\n  listingFieldConfigs\r\n) => {\r\n  return listingFieldConfigs.reduce((fields, field) => {\r\n    const { key, includeForListingTypes, scope = 'public', schemaType } = field || {};\r\n    const namespacePrefix = scope === 'public' ? `pub_` : `priv_`;\r\n    const namespacedKey = `${namespacePrefix}${key}`;\r\n\r\n    const isKnownSchemaType = EXTENDED_DATA_SCHEMA_TYPES.includes(schemaType);\r\n    const isTargetScope = scope === targetScope;\r\n    const isTargetListingType =\r\n      includeForListingTypes == null || includeForListingTypes.includes(targetListingType);\r\n\r\n    if (isKnownSchemaType && isTargetScope && isTargetListingType) {\r\n      const fieldValue = data[key] || null;\r\n      return { ...fields, [namespacedKey]: fieldValue };\r\n    }\r\n    return fields;\r\n  }, {});\r\n};\r\n\r\n/**\r\n * If listing represents something else than a bookable listing, we set availability-plan to seats=0.\r\n * Note: this is a performance improvement since the API is backwards compatible.\r\n *\r\n * @param {string} processAlias selected for this listing\r\n * @returns availabilityPlan without any seats available for the listing\r\n */\r\nconst setNoAvailabilityForUnbookableListings = processAlias => {\r\n  return isBookingProcessAlias(processAlias)\r\n    ? {}\r\n    : {\r\n        availabilityPlan: {\r\n          type: 'availability-plan/time',\r\n          timezone: 'Etc/UTC',\r\n          entries: [\r\n            // Note: \"no entries\" is the same as seats=0 for every entry.\r\n            // { dayOfWeek: 'mon', startTime: '00:00', endTime: '00:00', seats: 0 },\r\n            // { dayOfWeek: 'tue', startTime: '00:00', endTime: '00:00', seats: 0 },\r\n            // { dayOfWeek: 'wed', startTime: '00:00', endTime: '00:00', seats: 0 },\r\n            // { dayOfWeek: 'thu', startTime: '00:00', endTime: '00:00', seats: 0 },\r\n            // { dayOfWeek: 'fri', startTime: '00:00', endTime: '00:00', seats: 0 },\r\n            // { dayOfWeek: 'sat', startTime: '00:00', endTime: '00:00', seats: 0 },\r\n            // { dayOfWeek: 'sun', startTime: '00:00', endTime: '00:00', seats: 0 },\r\n          ],\r\n        },\r\n      };\r\n};\r\n\r\n/**\r\n * Get initialValues for the form. This function includes\r\n * title, description, listingType, transactionProcessAlias, unitType,\r\n * and those publicData & privateData fields that are configured through\r\n * config.listing.listingFields.\r\n *\r\n * @param {object} props\r\n * @param {object} existingListingTypeInfo info saved to listing's publicData\r\n * @param {object} listingTypes app's configured types (presets for listings)\r\n * @param {object} listingFieldsConfig those extended data fields that are part of configurations\r\n * @returns initialValues object for the form\r\n */\r\nconst getInitialValues = (props, existingListingTypeInfo, listingTypes, listingFieldsConfig) => {\r\n  const { description, title, publicData, privateData } = props?.listing?.attributes || {};\r\n  const { listingType } = publicData;\r\n\r\n  // Initial values for the form\r\n  return {\r\n    title,\r\n    description,\r\n    // Transaction type info: listingType, transactionProcessAlias, unitType\r\n    ...getTransactionInfo(listingTypes, existingListingTypeInfo),\r\n    ...initialValuesForListingFields(publicData, 'public', listingType, listingFieldsConfig),\r\n    ...initialValuesForListingFields(privateData, 'private', listingType, listingFieldsConfig),\r\n  };\r\n};\r\n\r\nconst EditListingDetailsPanel = props => {\r\n  const {\r\n    className,\r\n    rootClassName,\r\n    listing,\r\n    disabled,\r\n    ready,\r\n    onSubmit,\r\n    onListingTypeChange,\r\n    submitButtonText,\r\n    panelUpdated,\r\n    updateInProgress,\r\n    errors,\r\n    config,\r\n  } = props;\r\n\r\n  const classes = classNames(rootClassName || css.root, className);\r\n  const { publicData, state } = listing?.attributes || {};\r\n  const listingTypes = config.listing.listingTypes;\r\n  const listingFieldsConfig = config.listing.listingFields;\r\n\r\n  const { hasExistingListingType, existingListingTypeInfo } = hasSetListingType(publicData);\r\n  const hasValidExistingListingType =\r\n    hasExistingListingType &&\r\n    !!listingTypes.find(conf => {\r\n      const listinTypesMatch = conf.listingType === existingListingTypeInfo.listingType;\r\n      const unitTypesMatch = conf.transactionType?.unitType === existingListingTypeInfo.unitType;\r\n      return listinTypesMatch && unitTypesMatch;\r\n    });\r\n\r\n  const initialValues = getInitialValues(\r\n    props,\r\n    existingListingTypeInfo,\r\n    listingTypes,\r\n    listingFieldsConfig\r\n  );\r\n\r\n  const noListingTypesSet = listingTypes?.length === 0;\r\n  const hasListingTypesSet = listingTypes?.length > 0;\r\n  const canShowEditListingDetailsForm =\r\n    hasListingTypesSet && (!hasExistingListingType || hasValidExistingListingType);\r\n  const isPublished = listing?.id && state !== LISTING_STATE_DRAFT;\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <H3 as=\"h1\">\r\n        {isPublished ? (\r\n          <FormattedMessage\r\n            id=\"EditListingDetailsPanel.title\"\r\n            values={{ listingTitle: <ListingLink listing={listing} />, lineBreak: <br /> }}\r\n          />\r\n        ) : (\r\n          <FormattedMessage\r\n            id=\"EditListingDetailsPanel.createListingTitle\"\r\n            values={{ lineBreak: <br /> }}\r\n          />\r\n        )}\r\n      </H3>\r\n\r\n      {canShowEditListingDetailsForm ? (\r\n        <EditListingDetailsForm\r\n          className={css.form}\r\n          initialValues={initialValues}\r\n          saveActionMsg={submitButtonText}\r\n          onSubmit={values => {\r\n            const {\r\n              title,\r\n              description,\r\n              listingType,\r\n              transactionProcessAlias,\r\n              unitType,\r\n              ...rest\r\n            } = values;\r\n\r\n            // New values for listing attributes\r\n            const updateValues = {\r\n              title: title.trim(),\r\n              description,\r\n              publicData: {\r\n                listingType,\r\n                transactionProcessAlias,\r\n                unitType,\r\n                ...pickListingFieldsData(rest, 'public', listingType, listingFieldsConfig),\r\n              },\r\n              privateData: pickListingFieldsData(rest, 'private', listingType, listingFieldsConfig),\r\n              ...setNoAvailabilityForUnbookableListings(transactionProcessAlias),\r\n            };\r\n\r\n            onSubmit(updateValues);\r\n          }}\r\n          selectableListingTypes={listingTypes.map(conf => getTransactionInfo([conf], {}, true))}\r\n          hasExistingListingType={hasExistingListingType}\r\n          onListingTypeChange={onListingTypeChange}\r\n          listingFieldsConfig={listingFieldsConfig}\r\n          marketplaceCurrency={config.currency}\r\n          disabled={disabled}\r\n          ready={ready}\r\n          updated={panelUpdated}\r\n          updateInProgress={updateInProgress}\r\n          fetchErrors={errors}\r\n          autoFocus\r\n        />\r\n      ) : (\r\n        <ErrorMessage\r\n          marketplaceName={config.marketplaceName}\r\n          noListingTypesSet={noListingTypesSet}\r\n          invalidExistingListingType={!hasValidExistingListingType}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nEditListingDetailsPanel.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n  errors: null,\r\n  listing: null,\r\n};\r\n\r\nEditListingDetailsPanel.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n\r\n  // We cannot use propTypes.listing since the listing might be a draft.\r\n  listing: object,\r\n\r\n  disabled: bool.isRequired,\r\n  ready: bool.isRequired,\r\n  onSubmit: func.isRequired,\r\n  onListingTypeChange: func.isRequired,\r\n  submitButtonText: string.isRequired,\r\n  panelUpdated: bool.isRequired,\r\n  updateInProgress: bool.isRequired,\r\n  errors: object.isRequired,\r\n};\r\n\r\nexport default EditListingDetailsPanel;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"EditListingDeliveryPanel_root__6QYfp\",\"form\":\"EditListingDeliveryPanel_form__k7M+0\",\"priceCurrencyInvalid\":\"EditListingDeliveryPanel_priceCurrencyInvalid__Lt1Hw\"};","import React, { useState } from 'react';\r\nimport { func, object, string, bool } from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n// Import configs and util modules\r\nimport { FormattedMessage } from '../../../../util/reactIntl';\r\nimport { LISTING_STATE_DRAFT, STOCK_MULTIPLE_ITEMS } from '../../../../util/types';\r\nimport { displayDeliveryPickup, displayDeliveryShipping } from '../../../../util/configHelpers';\r\nimport { types as sdkTypes } from '../../../../util/sdkLoader';\r\n\r\n// Import shared components\r\nimport { H3, ListingLink } from '../../../../components';\r\n\r\n// Import modules from this directory\r\nimport EditListingDeliveryForm from './EditListingDeliveryForm';\r\nimport css from './EditListingDeliveryPanel.module.css';\r\n\r\nconst { Money } = sdkTypes;\r\n\r\nconst getInitialValues = props => {\r\n  const { listing, listingTypes, marketplaceCurrency } = props;\r\n  const { geolocation, publicData, price } = listing?.attributes || {};\r\n\r\n  const listingType = listing?.attributes?.publicData?.listingType;\r\n  const listingTypeConfig = listingTypes.find(conf => conf.listingType === listingType);\r\n  const displayShipping = displayDeliveryShipping(listingTypeConfig);\r\n  const displayPickup = displayDeliveryPickup(listingTypeConfig);\r\n  const displayMultipleDelivery = displayShipping && displayPickup;\r\n\r\n  // Only render current search if full place object is available in the URL params\r\n  // TODO bounds are missing - those need to be queried directly from Google Places\r\n  const locationFieldsPresent = publicData?.location?.address && geolocation;\r\n  const location = publicData?.location || {};\r\n  const { address, building } = location;\r\n  const {\r\n    shippingEnabled,\r\n    pickupEnabled,\r\n    shippingPriceInSubunitsOneItem,\r\n    shippingPriceInSubunitsAdditionalItems,\r\n  } = publicData;\r\n  const deliveryOptions = [];\r\n\r\n  if (shippingEnabled || (!displayMultipleDelivery && displayShipping)) {\r\n    deliveryOptions.push('shipping');\r\n  }\r\n  if (pickupEnabled || (!displayMultipleDelivery && displayPickup)) {\r\n    deliveryOptions.push('pickup');\r\n  }\r\n\r\n  const currency = price?.currency || marketplaceCurrency;\r\n  const shippingOneItemAsMoney =\r\n    shippingPriceInSubunitsOneItem != null\r\n      ? new Money(shippingPriceInSubunitsOneItem, currency)\r\n      : null;\r\n  const shippingAdditionalItemsAsMoney =\r\n    shippingPriceInSubunitsAdditionalItems != null\r\n      ? new Money(shippingPriceInSubunitsAdditionalItems, currency)\r\n      : null;\r\n\r\n  // Initial values for the form\r\n  return {\r\n    building,\r\n    location: locationFieldsPresent\r\n      ? {\r\n          search: address,\r\n          selectedPlace: { address, origin: geolocation },\r\n        }\r\n      : { search: undefined, selectedPlace: undefined },\r\n    deliveryOptions,\r\n    shippingPriceInSubunitsOneItem: shippingOneItemAsMoney,\r\n    shippingPriceInSubunitsAdditionalItems: shippingAdditionalItemsAsMoney,\r\n  };\r\n};\r\n\r\nconst EditListingDeliveryPanel = props => {\r\n  // State is needed since LocationAutocompleteInput doesn't have internal state\r\n  // and therefore re-rendering would overwrite the values during XHR call.\r\n  const [state, setState] = useState({ initialValues: getInitialValues(props) });\r\n\r\n  const {\r\n    className,\r\n    rootClassName,\r\n    listing,\r\n    listingTypes,\r\n    marketplaceCurrency,\r\n    disabled,\r\n    ready,\r\n    onSubmit,\r\n    submitButtonText,\r\n    panelUpdated,\r\n    updateInProgress,\r\n    errors,\r\n  } = props;\r\n\r\n  const classes = classNames(rootClassName || css.root, className);\r\n  const isPublished = listing?.id && listing?.attributes.state !== LISTING_STATE_DRAFT;\r\n  const priceCurrencyValid = listing?.attributes?.price?.currency === marketplaceCurrency;\r\n  const listingType = listing?.attributes?.publicData?.listingType;\r\n  const listingTypeConfig = listingTypes.find(conf => conf.listingType === listingType);\r\n  const hasStockInUse = listingTypeConfig.stockType === STOCK_MULTIPLE_ITEMS;\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <H3 as=\"h1\">\r\n        {isPublished ? (\r\n          <FormattedMessage\r\n            id=\"EditListingDeliveryPanel.title\"\r\n            values={{ listingTitle: <ListingLink listing={listing} />, lineBreak: <br /> }}\r\n          />\r\n        ) : (\r\n          <FormattedMessage\r\n            id=\"EditListingDeliveryPanel.createListingTitle\"\r\n            values={{ lineBreak: <br /> }}\r\n          />\r\n        )}\r\n      </H3>\r\n      {priceCurrencyValid ? (\r\n        <EditListingDeliveryForm\r\n          className={css.form}\r\n          initialValues={state.initialValues}\r\n          onSubmit={values => {\r\n            const {\r\n              building = '',\r\n              location,\r\n              shippingPriceInSubunitsOneItem,\r\n              shippingPriceInSubunitsAdditionalItems,\r\n              deliveryOptions,\r\n            } = values;\r\n\r\n            const shippingEnabled = deliveryOptions.includes('shipping');\r\n            const pickupEnabled = deliveryOptions.includes('pickup');\r\n            const address = location?.selectedPlace?.address || null;\r\n            const origin = location?.selectedPlace?.origin || null;\r\n\r\n            const pickupDataMaybe =\r\n              pickupEnabled && address ? { location: { address, building } } : {};\r\n\r\n            const shippingDataMaybe =\r\n              shippingEnabled && shippingPriceInSubunitsOneItem != null\r\n                ? {\r\n                    // Note: we only save the \"amount\" because currency should not differ from listing's price.\r\n                    // Money is always dealt in subunits (e.g. cents) to avoid float calculations.\r\n                    shippingPriceInSubunitsOneItem: shippingPriceInSubunitsOneItem.amount,\r\n                    shippingPriceInSubunitsAdditionalItems:\r\n                      shippingPriceInSubunitsAdditionalItems?.amount,\r\n                  }\r\n                : {};\r\n\r\n            // New values for listing attributes\r\n            const updateValues = {\r\n              geolocation: origin,\r\n              publicData: {\r\n                pickupEnabled,\r\n                ...pickupDataMaybe,\r\n                shippingEnabled,\r\n                ...shippingDataMaybe,\r\n              },\r\n            };\r\n\r\n            // Save the initialValues to state\r\n            // LocationAutocompleteInput doesn't have internal state\r\n            // and therefore re-rendering would overwrite the values during XHR call.\r\n            setState({\r\n              initialValues: {\r\n                building,\r\n                location: { search: address, selectedPlace: { address, origin } },\r\n                shippingPriceInSubunitsOneItem,\r\n                shippingPriceInSubunitsAdditionalItems,\r\n                deliveryOptions,\r\n              },\r\n            });\r\n            onSubmit(updateValues);\r\n          }}\r\n          listingTypeConfig={listingTypeConfig}\r\n          marketplaceCurrency={marketplaceCurrency}\r\n          hasStockInUse={hasStockInUse}\r\n          saveActionMsg={submitButtonText}\r\n          disabled={disabled}\r\n          ready={ready}\r\n          updated={panelUpdated}\r\n          updateInProgress={updateInProgress}\r\n          fetchErrors={errors}\r\n          autoFocus\r\n        />\r\n      ) : (\r\n        <div className={css.priceCurrencyInvalid}>\r\n          <FormattedMessage id=\"EditListingPricingPanel.listingPriceCurrencyInvalid\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nEditListingDeliveryPanel.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n  listing: null,\r\n};\r\n\r\nEditListingDeliveryPanel.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n\r\n  // We cannot use propTypes.listing since the listing might be a draft.\r\n  listing: object,\r\n  marketplaceCurrency: string.isRequired,\r\n\r\n  disabled: bool.isRequired,\r\n  ready: bool.isRequired,\r\n  onSubmit: func.isRequired,\r\n  submitButtonText: string.isRequired,\r\n  panelUpdated: bool.isRequired,\r\n  updateInProgress: bool.isRequired,\r\n  errors: object.isRequired,\r\n};\r\n\r\nexport default EditListingDeliveryPanel;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"EditListingLocationPanel_root__qnU3d\",\"form\":\"EditListingLocationPanel_form__OlMB6\"};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n// Import configs and util modules\r\nimport { FormattedMessage } from '../../../../util/reactIntl';\r\nimport { LISTING_STATE_DRAFT } from '../../../../util/types';\r\n\r\n// Import shared components\r\nimport { H3, ListingLink } from '../../../../components';\r\n\r\n// Import modules from this directory\r\nimport EditListingLocationForm from './EditListingLocationForm';\r\nimport css from './EditListingLocationPanel.module.css';\r\n\r\nconst getInitialValues = props => {\r\n  const { listing } = props;\r\n  const { geolocation, publicData } = listing?.attributes || {};\r\n\r\n  // Only render current search if full place object is available in the URL params\r\n  // TODO bounds are missing - those need to be queried directly from Google Places\r\n  const locationFieldsPresent = publicData?.location?.address && geolocation;\r\n  const location = publicData?.location || {};\r\n  const { address, building } = location;\r\n\r\n  return {\r\n    building,\r\n    location: locationFieldsPresent\r\n      ? {\r\n          search: address,\r\n          selectedPlace: { address, origin: geolocation },\r\n        }\r\n      : null,\r\n  };\r\n};\r\n\r\nconst EditListingLocationPanel = props => {\r\n  // State is needed since LocationAutocompleteInput doesn't have internal state\r\n  // and therefore re-rendering would overwrite the values during XHR call.\r\n  const [state, setState] = useState({ initialValues: getInitialValues(props) });\r\n  const {\r\n    className,\r\n    rootClassName,\r\n    listing,\r\n    disabled,\r\n    ready,\r\n    onSubmit,\r\n    submitButtonText,\r\n    panelUpdated,\r\n    updateInProgress,\r\n    errors,\r\n  } = props;\r\n\r\n  const classes = classNames(rootClassName || css.root, className);\r\n  const isPublished = listing?.id && listing?.attributes.state !== LISTING_STATE_DRAFT;\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <H3 as=\"h1\">\r\n        {isPublished ? (\r\n          <FormattedMessage\r\n            id=\"EditListingLocationPanel.title\"\r\n            values={{ listingTitle: <ListingLink listing={listing} />, lineBreak: <br /> }}\r\n          />\r\n        ) : (\r\n          <FormattedMessage\r\n            id=\"EditListingLocationPanel.createListingTitle\"\r\n            values={{ lineBreak: <br /> }}\r\n          />\r\n        )}\r\n      </H3>\r\n      <EditListingLocationForm\r\n        className={css.form}\r\n        initialValues={state.initialValues}\r\n        onSubmit={values => {\r\n          const { building = '', location } = values;\r\n          const {\r\n            selectedPlace: { address, origin },\r\n          } = location;\r\n\r\n          // New values for listing attributes\r\n          const updateValues = {\r\n            geolocation: origin,\r\n            publicData: {\r\n              location: { address, building },\r\n            },\r\n          };\r\n          // Save the initialValues to state\r\n          // LocationAutocompleteInput doesn't have internal state\r\n          // and therefore re-rendering would overwrite the values during XHR call.\r\n          setState({\r\n            initialValues: {\r\n              building,\r\n              location: { search: address, selectedPlace: { address, origin } },\r\n            },\r\n          });\r\n          onSubmit(updateValues);\r\n        }}\r\n        saveActionMsg={submitButtonText}\r\n        disabled={disabled}\r\n        ready={ready}\r\n        updated={panelUpdated}\r\n        updateInProgress={updateInProgress}\r\n        fetchErrors={errors}\r\n        autoFocus\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst { func, object, string, bool } = PropTypes;\r\n\r\nEditListingLocationPanel.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n  listing: null,\r\n};\r\n\r\nEditListingLocationPanel.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n\r\n  // We cannot use propTypes.listing since the listing might be a draft.\r\n  listing: object,\r\n\r\n  disabled: bool.isRequired,\r\n  ready: bool.isRequired,\r\n  onSubmit: func.isRequired,\r\n  submitButtonText: string.isRequired,\r\n  panelUpdated: bool.isRequired,\r\n  updateInProgress: bool.isRequired,\r\n  errors: object.isRequired,\r\n};\r\n\r\nexport default EditListingLocationPanel;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"EditListingPhotosPanel_root__neabH\",\"form\":\"EditListingPhotosPanel_form__+Kc5b\",\"modalHeaderWrapper\":\"EditListingPhotosPanel_modalHeaderWrapper__XGXf6\",\"modalTitle\":\"EditListingPhotosPanel_modalTitle__VCjBg marketplaceModalTitleStyles\",\"modalMessage\":\"EditListingPhotosPanel_modalMessage__FHgE2 marketplaceModalParagraphStyles\"};","import React from 'react';\r\nimport { array, bool, func, object, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n// Import configs and util modules\r\nimport { FormattedMessage } from '../../../../util/reactIntl';\r\nimport { LISTING_STATE_DRAFT } from '../../../../util/types';\r\n\r\n// Import shared components\r\nimport { H3, ListingLink } from '../../../../components';\r\n\r\n// Import modules from this directory\r\nimport EditListingPhotosForm from './EditListingPhotosForm';\r\nimport css from './EditListingPhotosPanel.module.css';\r\n\r\nconst getInitialValues = params => {\r\n  const { images } = params;\r\n  return { images };\r\n};\r\n\r\nconst EditListingPhotosPanel = props => {\r\n  const {\r\n    className,\r\n    rootClassName,\r\n    errors,\r\n    disabled,\r\n    ready,\r\n    listing,\r\n    onImageUpload,\r\n    submitButtonText,\r\n    panelUpdated,\r\n    updateInProgress,\r\n    onSubmit,\r\n    onRemoveImage,\r\n    listingImageConfig,\r\n  } = props;\r\n\r\n  const rootClass = rootClassName || css.root;\r\n  const classes = classNames(rootClass, className);\r\n  const isPublished = listing?.id && listing?.attributes?.state !== LISTING_STATE_DRAFT;\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <H3 as=\"h1\">\r\n        {isPublished ? (\r\n          <FormattedMessage\r\n            id=\"EditListingPhotosPanel.title\"\r\n            values={{ listingTitle: <ListingLink listing={listing} />, lineBreak: <br /> }}\r\n          />\r\n        ) : (\r\n          <FormattedMessage\r\n            id=\"EditListingPhotosPanel.createListingTitle\"\r\n            values={{ lineBreak: <br /> }}\r\n          />\r\n        )}\r\n      </H3>\r\n      <EditListingPhotosForm\r\n        className={css.form}\r\n        disabled={disabled}\r\n        ready={ready}\r\n        fetchErrors={errors}\r\n        initialValues={getInitialValues(props)}\r\n        onImageUpload={onImageUpload}\r\n        onSubmit={values => {\r\n          const { addImage, ...updateValues } = values;\r\n          onSubmit(updateValues);\r\n        }}\r\n        onRemoveImage={onRemoveImage}\r\n        saveActionMsg={submitButtonText}\r\n        updated={panelUpdated}\r\n        updateInProgress={updateInProgress}\r\n        listingImageConfig={listingImageConfig}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nEditListingPhotosPanel.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n  errors: null,\r\n  images: [],\r\n  listing: null,\r\n};\r\n\r\nEditListingPhotosPanel.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n  errors: object,\r\n  disabled: bool.isRequired,\r\n  ready: bool.isRequired,\r\n  images: array,\r\n\r\n  // We cannot use propTypes.listing since the listing might be a draft.\r\n  listing: object,\r\n\r\n  onImageUpload: func.isRequired,\r\n  onSubmit: func.isRequired,\r\n  submitButtonText: string.isRequired,\r\n  panelUpdated: bool.isRequired,\r\n  updateInProgress: bool.isRequired,\r\n  onRemoveImage: func.isRequired,\r\n  listingImageConfig: object.isRequired,\r\n};\r\n\r\nexport default EditListingPhotosPanel;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"EditListingPricingPanel_root__Jph8a\",\"form\":\"EditListingPricingPanel_form__EC0mp\",\"priceCurrencyInvalid\":\"EditListingPricingPanel_priceCurrencyInvalid__+5vFI\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n// Import configs and util modules\r\nimport { FormattedMessage } from '../../../../util/reactIntl';\r\nimport { LISTING_STATE_DRAFT } from '../../../../util/types';\r\nimport { types as sdkTypes } from '../../../../util/sdkLoader';\r\n\r\n// Import shared components\r\nimport { H3, ListingLink } from '../../../../components';\r\n\r\n// Import modules from this directory\r\nimport EditListingPricingForm from './EditListingPricingForm';\r\nimport css from './EditListingPricingPanel.module.css';\r\n\r\nconst { Money } = sdkTypes;\r\n\r\nconst getInitialValues = params => {\r\n  const { listing } = params;\r\n  const { price } = listing?.attributes || {};\r\n\r\n  return { price };\r\n};\r\n\r\nconst EditListingPricingPanel = props => {\r\n  const {\r\n    className,\r\n    rootClassName,\r\n    listing,\r\n    marketplaceCurrency,\r\n    listingMinimumPriceSubUnits,\r\n    disabled,\r\n    ready,\r\n    onSubmit,\r\n    submitButtonText,\r\n    panelUpdated,\r\n    updateInProgress,\r\n    errors,\r\n  } = props;\r\n\r\n  const classes = classNames(rootClassName || css.root, className);\r\n  const initialValues = getInitialValues(props);\r\n  const isPublished = listing?.id && listing?.attributes?.state !== LISTING_STATE_DRAFT;\r\n  const priceCurrencyValid =\r\n    marketplaceCurrency && initialValues.price instanceof Money\r\n      ? initialValues.price.currency === marketplaceCurrency\r\n      : !!marketplaceCurrency;\r\n  const unitType = listing?.attributes?.publicData?.unitType;\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <H3 as=\"h1\">\r\n        {isPublished ? (\r\n          <FormattedMessage\r\n            id=\"EditListingPricingPanel.title\"\r\n            values={{ listingTitle: <ListingLink listing={listing} />, lineBreak: <br /> }}\r\n          />\r\n        ) : (\r\n          <FormattedMessage\r\n            id=\"EditListingPricingPanel.createListingTitle\"\r\n            values={{ lineBreak: <br /> }}\r\n          />\r\n        )}\r\n      </H3>\r\n      {priceCurrencyValid ? (\r\n        <EditListingPricingForm\r\n          className={css.form}\r\n          initialValues={initialValues}\r\n          onSubmit={values => {\r\n            const { price } = values;\r\n\r\n            // New values for listing attributes\r\n            const updateValues = {\r\n              price,\r\n            };\r\n            onSubmit(updateValues);\r\n          }}\r\n          marketplaceCurrency={marketplaceCurrency}\r\n          unitType={unitType}\r\n          listingMinimumPriceSubUnits={listingMinimumPriceSubUnits}\r\n          saveActionMsg={submitButtonText}\r\n          disabled={disabled}\r\n          ready={ready}\r\n          updated={panelUpdated}\r\n          updateInProgress={updateInProgress}\r\n          fetchErrors={errors}\r\n        />\r\n      ) : (\r\n        <div className={css.priceCurrencyInvalid}>\r\n          <FormattedMessage\r\n            id=\"EditListingPricingPanel.listingPriceCurrencyInvalid\"\r\n            values={{ marketplaceCurrency }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst { func, object, string, bool } = PropTypes;\r\n\r\nEditListingPricingPanel.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n  listing: null,\r\n};\r\n\r\nEditListingPricingPanel.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n\r\n  // We cannot use propTypes.listing since the listing might be a draft.\r\n  listing: object,\r\n\r\n  disabled: bool.isRequired,\r\n  ready: bool.isRequired,\r\n  onSubmit: func.isRequired,\r\n  submitButtonText: string.isRequired,\r\n  panelUpdated: bool.isRequired,\r\n  updateInProgress: bool.isRequired,\r\n  errors: object.isRequired,\r\n};\r\n\r\nexport default EditListingPricingPanel;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"EditListingPricingAndStockPanel_root__uNhR5\",\"form\":\"EditListingPricingAndStockPanel_form__QtEH2\",\"priceCurrencyInvalid\":\"EditListingPricingAndStockPanel_priceCurrencyInvalid__tjzZ1\"};","import React, { useState } from 'react';\r\nimport PropTypes, { arrayOf, number, oneOf, shape } from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n// Import configs and util modules\r\nimport { FormattedMessage } from '../../../../util/reactIntl';\r\nimport { LISTING_STATE_DRAFT, STOCK_INFINITE_ITEMS, STOCK_TYPES } from '../../../../util/types';\r\nimport { types as sdkTypes } from '../../../../util/sdkLoader';\r\n\r\n// Import shared components\r\nimport { H3, ListingLink } from '../../../../components';\r\n\r\n// Import modules from this directory\r\nimport EditListingPricingAndStockForm from './EditListingPricingAndStockForm';\r\nimport css from './EditListingPricingAndStockPanel.module.css';\r\n\r\nconst { Money } = sdkTypes;\r\nconst BILLIARD = 1000000000000000;\r\n\r\nconst getListingTypeConfig = (publicData, listingTypes) => {\r\n  const selectedListingType = publicData.listingType;\r\n  return listingTypes.find(conf => conf.listingType === selectedListingType);\r\n};\r\n\r\nconst getInitialValues = props => {\r\n  const { listing, listingTypes } = props;\r\n  const isPublished = listing?.id && listing?.attributes?.state !== LISTING_STATE_DRAFT;\r\n  const price = listing?.attributes?.price;\r\n  const currentStock = listing?.currentStock;\r\n\r\n  const publicData = listing?.attributes?.publicData;\r\n  const listingTypeConfig = getListingTypeConfig(publicData, listingTypes);\r\n  const hasInfiniteStock = STOCK_INFINITE_ITEMS.includes(listingTypeConfig?.stockType);\r\n\r\n  // The listing resource has a relationship: `currentStock`,\r\n  // which you should include when making API calls.\r\n  // Note: infinite stock is refilled to billiard using \"stockUpdShwcseaybe\"\r\n  const currentStockQuantity = currentStock?.attributes?.quantity;\r\n  const stock =\r\n    currentStockQuantity != null\r\n      ? currentStockQuantity\r\n      : isPublished\r\n      ? 0\r\n      : hasInfiniteStock\r\n      ? BILLIARD\r\n      : 1;\r\n  const stockTypeInfinity = [];\r\n\r\n  return { price, stock, stockTypeInfinity };\r\n};\r\n\r\nconst EditListingPricingAndStockPanel = props => {\r\n  // State is needed since re-rendering would overwrite the values during XHR call.\r\n  const [state, setState] = useState({ initialValues: getInitialValues(props) });\r\n\r\n  const {\r\n    className,\r\n    rootClassName,\r\n    listing,\r\n    marketplaceCurrency,\r\n    listingMinimumPriceSubUnits,\r\n    listingTypes,\r\n    disabled,\r\n    ready,\r\n    onSubmit,\r\n    submitButtonText,\r\n    panelUpdated,\r\n    updateInProgress,\r\n    errors,\r\n  } = props;\r\n\r\n  const classes = classNames(rootClassName || css.root, className);\r\n  const initialValues = state.initialValues;\r\n\r\n  // Form needs to know data from listingType\r\n  const publicData = listing?.attributes?.publicData;\r\n  const unitType = publicData.unitType;\r\n  const listingTypeConfig = getListingTypeConfig(publicData, listingTypes);\r\n\r\n  const hasInfiniteStock = STOCK_INFINITE_ITEMS.includes(listingTypeConfig?.stockType);\r\n\r\n  const isPublished = listing?.id && listing?.attributes?.state !== LISTING_STATE_DRAFT;\r\n  const priceCurrencyValid =\r\n    marketplaceCurrency && initialValues.price instanceof Money\r\n      ? initialValues.price?.currency === marketplaceCurrency\r\n      : !!marketplaceCurrency;\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <H3 as=\"h1\">\r\n        {isPublished ? (\r\n          <FormattedMessage\r\n            id=\"EditListingPricingAndStockPanel.title\"\r\n            values={{ listingTitle: <ListingLink listing={listing} />, lineBreak: <br /> }}\r\n          />\r\n        ) : (\r\n          <FormattedMessage\r\n            id=\"EditListingPricingAndStockPanel.createListingTitle\"\r\n            values={{ lineBreak: <br /> }}\r\n          />\r\n        )}\r\n      </H3>\r\n      {priceCurrencyValid ? (\r\n        <EditListingPricingAndStockForm\r\n          className={css.form}\r\n          initialValues={initialValues}\r\n          onSubmit={values => {\r\n            const { price, stock, stockTypeInfinity } = values;\r\n\r\n            // Update stock only if the value has changed, or stock is infinity in stockType,\r\n            // but not current stock is a small number (might happen with old listings)\r\n            // NOTE: this is going to be used on a separate call to API\r\n            // in EditListingPage.duck.js: sdk.stock.compareAndSet();\r\n\r\n            const hasStockTypeInfinityChecked = stockTypeInfinity?.[0] === 'infinity';\r\n            const hasNoCurrentStock = listing?.currentStock?.attributes?.quantity == null;\r\n            const hasStockQuantityChanged = stock && stock !== initialValues.stock;\r\n            // currentStockQuantity is null or undefined, return null - otherwise use the value\r\n            const oldTotal = hasNoCurrentStock ? null : initialValues.stock;\r\n            const stockUpdShwcseaybe =\r\n              hasInfiniteStock && (hasNoCurrentStock || hasStockTypeInfinityChecked)\r\n                ? {\r\n                    stockUpdate: {\r\n                      oldTotal,\r\n                      newTotal: BILLIARD,\r\n                    },\r\n                  }\r\n                : hasNoCurrentStock || hasStockQuantityChanged\r\n                ? {\r\n                    stockUpdate: {\r\n                      oldTotal,\r\n                      newTotal: stock,\r\n                    },\r\n                  }\r\n                : {};\r\n\r\n            // New values for listing attributes\r\n            const updateValues = {\r\n              price,\r\n              ...stockUpdShwcseaybe,\r\n            };\r\n            // Save the initialValues to state\r\n            // Otherwise, re-rendering would overwrite the values during XHR call.\r\n            setState({\r\n              initialValues: {\r\n                price,\r\n                stock: stockUpdShwcseaybe?.stockUpdate?.newTotal || stock,\r\n                stockTypeInfinity,\r\n              },\r\n            });\r\n            onSubmit(updateValues);\r\n          }}\r\n          listingMinimumPriceSubUnits={listingMinimumPriceSubUnits}\r\n          marketplaceCurrency={marketplaceCurrency}\r\n          listingType={listingTypeConfig}\r\n          unitType={unitType}\r\n          saveActionMsg={submitButtonText}\r\n          disabled={disabled}\r\n          ready={ready}\r\n          updated={panelUpdated}\r\n          updateInProgress={updateInProgress}\r\n          fetchErrors={errors}\r\n        />\r\n      ) : (\r\n        <div className={css.priceCurrencyInvalid}>\r\n          <FormattedMessage\r\n            id=\"EditListingPricingAndStockPanel.listingPriceCurrencyInvalid\"\r\n            values={{ marketplaceCurrency }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst { func, object, string, bool } = PropTypes;\r\n\r\nEditListingPricingAndStockPanel.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n  listing: null,\r\n};\r\n\r\nEditListingPricingAndStockPanel.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n\r\n  // We cannot use propTypes.listing since the listing might be a draft.\r\n  listing: object,\r\n  marketplaceCurrency: string.isRequired,\r\n  listingMinimumPriceSubUnits: number.isRequired,\r\n  listingTypes: arrayOf(\r\n    shape({\r\n      stockType: oneOf(STOCK_TYPES),\r\n    })\r\n  ).isRequired,\r\n\r\n  disabled: bool.isRequired,\r\n  ready: bool.isRequired,\r\n  onSubmit: func.isRequired,\r\n  submitButtonText: string.isRequired,\r\n  panelUpdated: bool.isRequired,\r\n  updateInProgress: bool.isRequired,\r\n  errors: object.isRequired,\r\n};\r\n\r\nexport default EditListingPricingAndStockPanel;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"panel\":\"EditListingWizardTab_panel__91kEt\"};","import React from 'react';\r\nimport PropTypes, { arrayOf } from 'prop-types';\r\n\r\n// Import configs and util modules\r\nimport {\r\n  LISTING_PAGE_PARAM_TYPE_DRAFT,\r\n  LISTING_PAGE_PARAM_TYPE_NEW,\r\n  LISTING_PAGE_PARAM_TYPES,\r\n} from '../../../util/urlHelpers';\r\nimport { ensureListing } from '../../../util/data';\r\nimport { createResourceLocatorString } from '../../../util/routes';\r\nimport { propTypes } from '../../../util/types';\r\n\r\n// Import modules from this directory\r\nimport EditListingAvailabilityPanel from './EditListingAvailabilityPanel/EditListingAvailabilityPanel';\r\nimport EditListingDetailsPanel from './EditListingDetailsPanel/EditListingDetailsPanel';\r\nimport EditListingDeliveryPanel from './EditListingDeliveryPanel/EditListingDeliveryPanel';\r\nimport EditListingLocationPanel from './EditListingLocationPanel/EditListingLocationPanel';\r\nimport EditListingPhotosPanel from './EditListingPhotosPanel/EditListingPhotosPanel';\r\nimport EditListingPricingPanel from './EditListingPricingPanel/EditListingPricingPanel';\r\nimport EditListingPricingAndStockPanel from './EditListingPricingAndStockPanel/EditListingPricingAndStockPanel';\r\n\r\nimport css from './EditListingWizardTab.module.css';\r\n\r\nexport const DETAILS = 'details';\r\nexport const PRICING = 'pricing';\r\nexport const PRICING_AND_STOCK = 'pricing-and-stock';\r\nexport const DELIVERY = 'delivery';\r\nexport const LOCATION = 'location';\r\nexport const AVAILABILITY = 'availability';\r\nexport const PHOTOS = 'photos';\r\n\r\n// EditListingWizardTab component supports these tabs\r\nexport const SUPPORTED_TABS = [\r\n  DETAILS,\r\n  PRICING,\r\n  PRICING_AND_STOCK,\r\n  DELIVERY,\r\n  LOCATION,\r\n  AVAILABILITY,\r\n  PHOTOS,\r\n];\r\n\r\nconst pathParamsToNextTab = (params, tab, marketplaceTabs) => {\r\n  const nextTabIndex = marketplaceTabs.findIndex(s => s === tab) + 1;\r\n  const nextTab =\r\n    nextTabIndex < marketplaceTabs.length\r\n      ? marketplaceTabs[nextTabIndex]\r\n      : marketplaceTabs[marketplaceTabs.length - 1];\r\n  return { ...params, tab: nextTab };\r\n};\r\n\r\n// When user has update draft listing, he should be redirected to next EditListingWizardTab\r\nconst redirectAfterDraftUpdate = (listingId, params, tab, marketplaceTabs, history, routes) => {\r\n  const listingUUID = listingId.uuid;\r\n  const currentPathParams = {\r\n    ...params,\r\n    type: LISTING_PAGE_PARAM_TYPE_DRAFT,\r\n    id: listingUUID,\r\n  };\r\n\r\n  // Replace current \"new\" path to \"draft\" path.\r\n  // Browser's back button should lead to editing current draft instead of creating a new one.\r\n  if (params.type === LISTING_PAGE_PARAM_TYPE_NEW) {\r\n    const draftURI = createResourceLocatorString('EditListingPage', routes, currentPathParams, {});\r\n    history.replace(draftURI);\r\n  }\r\n\r\n  // Redirect to next tab\r\n  const nextPathParams = pathParamsToNextTab(currentPathParams, tab, marketplaceTabs);\r\n  const to = createResourceLocatorString('EditListingPage', routes, nextPathParams, {});\r\n  history.push(to);\r\n};\r\n\r\nconst EditListingWizardTab = props => {\r\n  const {\r\n    tab,\r\n    marketplaceTabs,\r\n    params,\r\n    locationSearch,\r\n    errors,\r\n    fetchInProgress,\r\n    newListingPublished,\r\n    handleCreateFlowTabScrolling,\r\n    handlePublishListing,\r\n    history,\r\n    images,\r\n    listing,\r\n    weeklyExceptionQueries,\r\n    monthlyExceptionQueries,\r\n    allExceptions,\r\n    onFetchExceptions,\r\n    onAddAvailabilityException,\r\n    onDeleteAvailabilityException,\r\n    onUpdateListing,\r\n    onCreateListingDraft,\r\n    onImageUpload,\r\n    onManageDisableScrolling,\r\n    onListingTypeChange,\r\n    onRemoveImage,\r\n    updatedTab,\r\n    updateInProgress,\r\n    tabSubmitButtonText,\r\n    config,\r\n    routeConfiguration,\r\n  } = props;\r\n\r\n  const { type } = params;\r\n  const isNewURI = type === LISTING_PAGE_PARAM_TYPE_NEW;\r\n  const isDraftURI = type === LISTING_PAGE_PARAM_TYPE_DRAFT;\r\n  const isNewListingFlow = isNewURI || isDraftURI;\r\n\r\n  const currentListing = ensureListing(listing);\r\n\r\n  // New listing flow has automatic redirects to new tab on the wizard\r\n  // and the last panel calls publishListing API endpoint.\r\n  const automaticRedirectsForNewListingFlow = (tab, listingId) => {\r\n    if (tab !== marketplaceTabs[marketplaceTabs.length - 1]) {\r\n      // Create listing flow: smooth scrolling polyfill to scroll to correct tab\r\n      handleCreateFlowTabScrolling(false);\r\n\r\n      // After successful saving of draft data, user should be redirected to next tab\r\n      redirectAfterDraftUpdate(\r\n        listingId,\r\n        params,\r\n        tab,\r\n        marketplaceTabs,\r\n        history,\r\n        routeConfiguration\r\n      );\r\n    } else {\r\n      handlePublishListing(listingId);\r\n    }\r\n  };\r\n\r\n  const onCompleteEditListingWizardTab = (tab, updateValues) => {\r\n    const onUpdateListingOrCreateListingDraft = isNewURI\r\n      ? (tab, values) => onCreateListingDraft(values, config)\r\n      : (tab, values) => onUpdateListing(tab, values, config);\r\n\r\n    const updateListingValues = isNewURI\r\n      ? updateValues\r\n      : { ...updateValues, id: currentListing.id };\r\n\r\n    return onUpdateListingOrCreateListingDraft(tab, updateListingValues)\r\n      .then(r => {\r\n        // In Availability tab, the submitted data (plan) is inside a modal\r\n        // We don't redirect provider immediately after plan is set\r\n        if (isNewListingFlow && tab !== AVAILABILITY) {\r\n          const listingId = r.data.data.id;\r\n          automaticRedirectsForNewListingFlow(tab, listingId);\r\n        }\r\n      })\r\n      .catch(e => {\r\n        // No need for extra actions\r\n      });\r\n  };\r\n\r\n  const panelProps = tab => {\r\n    return {\r\n      className: css.panel,\r\n      errors,\r\n      listing,\r\n      panelUpdated: updatedTab === tab,\r\n      params,\r\n      locationSearch,\r\n      updateInProgress,\r\n      // newListingPublished and fetchInProgress are flags for the last wizard tab\r\n      ready: newListingPublished,\r\n      disabled: fetchInProgress,\r\n      submitButtonText: tabSubmitButtonText,\r\n      listingTypes: config.listing.listingTypes,\r\n      onManageDisableScrolling,\r\n      onSubmit: values => {\r\n        return onCompleteEditListingWizardTab(tab, values);\r\n      },\r\n    };\r\n  };\r\n\r\n  // TODO: add missing cases for supported tabs\r\n  switch (tab) {\r\n    case DETAILS: {\r\n      return (\r\n        <EditListingDetailsPanel\r\n          {...panelProps(DETAILS)}\r\n          onListingTypeChange={onListingTypeChange}\r\n          config={config}\r\n        />\r\n      );\r\n    }\r\n    case PRICING_AND_STOCK: {\r\n      return (\r\n        <EditListingPricingAndStockPanel\r\n          {...panelProps(PRICING_AND_STOCK)}\r\n          marketplaceCurrency={config.currency}\r\n          listingMinimumPriceSubUnits={config.listingMinimumPriceSubUnits}\r\n        />\r\n      );\r\n    }\r\n    case PRICING: {\r\n      return (\r\n        <EditListingPricingPanel\r\n          {...panelProps(PRICING)}\r\n          marketplaceCurrency={config.currency}\r\n          listingMinimumPriceSubUnits={config.listingMinimumPriceSubUnits}\r\n        />\r\n      );\r\n    }\r\n    case DELIVERY: {\r\n      return (\r\n        <EditListingDeliveryPanel {...panelProps(DELIVERY)} marketplaceCurrency={config.currency} />\r\n      );\r\n    }\r\n    case LOCATION: {\r\n      return <EditListingLocationPanel {...panelProps(LOCATION)} />;\r\n    }\r\n    case AVAILABILITY: {\r\n      return (\r\n        <EditListingAvailabilityPanel\r\n          allExceptions={allExceptions}\r\n          weeklyExceptionQueries={weeklyExceptionQueries}\r\n          monthlyExceptionQueries={monthlyExceptionQueries}\r\n          onFetchExceptions={onFetchExceptions}\r\n          onAddAvailabilityException={onAddAvailabilityException}\r\n          onDeleteAvailabilityException={onDeleteAvailabilityException}\r\n          onNextTab={() =>\r\n            redirectAfterDraftUpdate(\r\n              listing.id,\r\n              params,\r\n              tab,\r\n              marketplaceTabs,\r\n              history,\r\n              routeConfiguration\r\n            )\r\n          }\r\n          config={config}\r\n          history={history}\r\n          routeConfiguration={routeConfiguration}\r\n          {...panelProps(AVAILABILITY)}\r\n        />\r\n      );\r\n    }\r\n    case PHOTOS: {\r\n      return (\r\n        <EditListingPhotosPanel\r\n          {...panelProps(PHOTOS)}\r\n          listingImageConfig={config.layout.listingImage}\r\n          images={images}\r\n          onImageUpload={onImageUpload}\r\n          onRemoveImage={onRemoveImage}\r\n        />\r\n      );\r\n    }\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nEditListingWizardTab.defaultProps = {\r\n  listing: null,\r\n  updatedTab: null,\r\n};\r\n\r\nconst { array, bool, func, object, oneOf, shape, string } = PropTypes;\r\n\r\nEditListingWizardTab.propTypes = {\r\n  params: shape({\r\n    id: string.isRequired,\r\n    slug: string.isRequired,\r\n    type: oneOf(LISTING_PAGE_PARAM_TYPES).isRequired,\r\n    tab: oneOf(SUPPORTED_TABS).isRequired,\r\n  }).isRequired,\r\n  locationSearch: object,\r\n  errors: shape({\r\n    createListingDraftError: object,\r\n    publishListingError: object,\r\n    updateListingError: object,\r\n    showListingsError: object,\r\n    uploadImageError: object,\r\n  }).isRequired,\r\n  fetchInProgress: bool.isRequired,\r\n  newListingPublished: bool.isRequired,\r\n  history: shape({\r\n    push: func.isRequired,\r\n    replace: func.isRequired,\r\n  }).isRequired,\r\n  images: array.isRequired,\r\n\r\n  // We cannot use propTypes.listing since the listing might be a draft.\r\n  listing: shape({\r\n    attributes: shape({\r\n      publicData: object,\r\n      description: string,\r\n      geolocation: object,\r\n      pricing: object,\r\n      title: string,\r\n    }),\r\n    images: array,\r\n  }),\r\n\r\n  handleCreateFlowTabScrolling: func.isRequired,\r\n  handlePublishListing: func.isRequired,\r\n  onUpdateListing: func.isRequired,\r\n  onCreateListingDraft: func.isRequired,\r\n  onImageUpload: func.isRequired,\r\n  onRemoveImage: func.isRequired,\r\n  onListingTypeChange: func.isRequired,\r\n  updatedTab: string,\r\n  updateInProgress: bool.isRequired,\r\n  config: object.isRequired,\r\n  routeConfiguration: arrayOf(propTypes.route).isRequired,\r\n};\r\n\r\nexport default EditListingWizardTab;\r\n","import React, { Component, useEffect } from 'react';\r\nimport { array, arrayOf, bool, func, number, object, oneOf, shape, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\n// Import configs and util modules\r\nimport { useConfiguration } from '../../../context/configurationContext';\r\nimport { useRouteConfiguration } from '../../../context/routeConfigurationContext';\r\nimport { FormattedMessage, intlShape, useIntl } from '../../../util/reactIntl';\r\nimport {\r\n  displayDeliveryPickup,\r\n  displayDeliveryShipping,\r\n  displayLocation,\r\n  displayPrice,\r\n  requirePayoutDetails,\r\n} from '../../../util/configHelpers';\r\nimport {\r\n  LISTING_PAGE_PARAM_TYPE_DRAFT,\r\n  LISTING_PAGE_PARAM_TYPE_NEW,\r\n  LISTING_PAGE_PARAM_TYPES,\r\n} from '../../../util/urlHelpers';\r\nimport { createResourceLocatorString } from '../../../util/routes';\r\nimport { withViewport } from '../../../util/uiHelpers';\r\nimport {\r\n  SCHEMA_TYPE_ENUM,\r\n  SCHEMA_TYPE_MULTI_ENUM,\r\n  SCHEMA_TYPE_TEXT,\r\n  SCHEMA_TYPE_LONG,\r\n  SCHEMA_TYPE_BOOLEAN,\r\n  propTypes,\r\n} from '../../../util/types';\r\nimport { ensureCurrentUser, ensureListing } from '../../../util/data';\r\nimport {\r\n  INQUIRY_PROCESS_NAME,\r\n  isBookingProcess,\r\n  isPurchaseProcess,\r\n} from '../../../transactions/transaction';\r\n\r\n// Import shared components\r\nimport {\r\n  Heading,\r\n  Modal,\r\n  NamedRedirect,\r\n  Tabs,\r\n  StripeConnectAccountStatusBox,\r\n  StripeConnectAccountForm,\r\n} from '../../../components';\r\n\r\n// Import modules from this directory\r\nimport EditListingWizardTab, {\r\n  DETAILS,\r\n  PRICING,\r\n  PRICING_AND_STOCK,\r\n  DELIVERY,\r\n  LOCATION,\r\n  AVAILABILITY,\r\n  PHOTOS,\r\n} from './EditListingWizardTab';\r\nimport css from './EditListingWizard.module.css';\r\n\r\n// You can reorder these panels.\r\n// Note 1: You need to change save button translations for new listing flow\r\n// Note 2: Ensure that draft listing is created after the first panel\r\n//         and listing publishing happens after last panel.\r\n// Note 3: The first tab creates a draft listing and title is mandatory attribute for it.\r\n//         Details tab asks for \"title\" and is therefore the first tab in the wizard flow.\r\nconst TABS_DETAILS_ONLY = [DETAILS];\r\nconst TABS_PRODUCT = [DETAILS, PRICING_AND_STOCK, DELIVERY, PHOTOS];\r\nconst TABS_BOOKING = [DETAILS, LOCATION, PRICING, AVAILABILITY, PHOTOS];\r\nconst TABS_INQUIRY = [DETAILS, LOCATION, PRICING, PHOTOS];\r\nconst TABS_ALL = [...TABS_PRODUCT, ...TABS_BOOKING, ...TABS_INQUIRY];\r\n\r\n// Tabs are horizontal in small screens\r\nconst MAX_HORIZONTAL_NAV_SCREEN_WIDTH = 1023;\r\n\r\nconst STRIPE_ONBOARDING_RETURN_URL_SUCCESS = 'success';\r\nconst STRIPE_ONBOARDING_RETURN_URL_FAILURE = 'failure';\r\n\r\n// Pick only allowed tabs from the given list\r\nconst getTabs = (processTabs, disallowedTabs) => {\r\n  return disallowedTabs.length > 0\r\n    ? processTabs.filter(tab => !disallowedTabs.includes(tab))\r\n    : processTabs;\r\n};\r\n// Pick only allowed booking tabs (location could be omitted)\r\nconst tabsForBookingProcess = (processTabs, listingTypeConfig) => {\r\n  const disallowedTabs = !displayLocation(listingTypeConfig) ? [LOCATION] : [];\r\n  return getTabs(processTabs, disallowedTabs);\r\n};\r\n// Pick only allowed purchase tabs (delivery could be omitted)\r\nconst tabsForPurchaseProcess = (processTabs, listingTypeConfig) => {\r\n  const isDeliveryDisabled =\r\n    !displayDeliveryPickup(listingTypeConfig) && !displayDeliveryShipping(listingTypeConfig);\r\n  const disallowedTabs = isDeliveryDisabled ? [DELIVERY] : [];\r\n  return getTabs(processTabs, disallowedTabs);\r\n};\r\n// Pick only allowed inquiry tabs (location and pricing could be omitted)\r\nconst tabsForInquiryProcess = (processTabs, listingTypeConfig) => {\r\n  const locationMaybe = !displayLocation(listingTypeConfig) ? [LOCATION] : [];\r\n  const priceMaybe = !displayPrice(listingTypeConfig) ? [PRICING] : [];\r\n  return getTabs(processTabs, [...locationMaybe, ...priceMaybe]);\r\n};\r\n\r\n/**\r\n * Return translations for wizard tab: label and submit button.\r\n *\r\n * @param {Object} intl\r\n * @param {string} tab name of the tab/panel in the wizard\r\n * @param {boolean} isNewListingFlow\r\n * @param {string} processName\r\n */\r\nconst tabLabelAndSubmit = (intl, tab, isNewListingFlow, isPriceDisabled, processName) => {\r\n  const processNameString = isNewListingFlow ? `${processName}.` : '';\r\n  const newOrEdit = isNewListingFlow ? 'new' : 'edit';\r\n\r\n  let labelKey = null;\r\n  let submitButtonKey = null;\r\n  if (tab === DETAILS) {\r\n    labelKey = 'EditListingWizard.tabLabelDetails';\r\n    submitButtonKey = `EditListingWizard.${processNameString}${newOrEdit}.saveDetails`;\r\n  } else if (tab === PRICING) {\r\n    labelKey = 'EditListingWizard.tabLabelPricing';\r\n    submitButtonKey = `EditListingWizard.${processNameString}${newOrEdit}.savePricing`;\r\n  } else if (tab === PRICING_AND_STOCK) {\r\n    labelKey = 'EditListingWizard.tabLabelPricingAndStock';\r\n    submitButtonKey = `EditListingWizard.${processNameString}${newOrEdit}.savePricingAndStock`;\r\n  } else if (tab === DELIVERY) {\r\n    labelKey = 'EditListingWizard.tabLabelDelivery';\r\n    submitButtonKey = `EditListingWizard.${processNameString}${newOrEdit}.saveDelivery`;\r\n  } else if (tab === LOCATION) {\r\n    labelKey = 'EditListingWizard.tabLabelLocation';\r\n    submitButtonKey =\r\n      isPriceDisabled && isNewListingFlow\r\n        ? `EditListingWizard.${processNameString}${newOrEdit}.saveLocationNoPricingTab`\r\n        : `EditListingWizard.${processNameString}${newOrEdit}.saveLocation`;\r\n  } else if (tab === AVAILABILITY) {\r\n    labelKey = 'EditListingWizard.tabLabelAvailability';\r\n    submitButtonKey = `EditListingWizard.${processNameString}${newOrEdit}.saveAvailability`;\r\n  } else if (tab === PHOTOS) {\r\n    labelKey = 'EditListingWizard.tabLabelPhotos';\r\n    submitButtonKey = `EditListingWizard.${processNameString}${newOrEdit}.savePhotos`;\r\n  }\r\n\r\n  return {\r\n    label: intl.formatMessage({ id: labelKey }),\r\n    submitButton: intl.formatMessage({ id: submitButtonKey }),\r\n  };\r\n};\r\n\r\n/**\r\n * Validate listing fields (in extended data) that are included through configListing.js\r\n * This is used to check if listing creation flow can show the \"next\" tab as active.\r\n *\r\n * @param {Object} publicData\r\n * @param {Object} privateData\r\n */\r\nconst hasValidListingFieldsInExtendedData = (publicData, privateData, config) => {\r\n  const isValidField = (fieldConfig, fieldData) => {\r\n    const {\r\n      key,\r\n      includeForListingTypes,\r\n      schemaType,\r\n      enumOptions = [],\r\n      saveConfig = {},\r\n    } = fieldConfig;\r\n\r\n    const schemaOptionKeys = enumOptions.map(o => `${o.option}`);\r\n    const hasValidEnumValue = optionData => {\r\n      return schemaOptionKeys.includes(optionData);\r\n    };\r\n    const hasValidMultiEnumValues = savedOptions => {\r\n      return savedOptions.every(optionData => schemaOptionKeys.includes(optionData));\r\n    };\r\n\r\n    const isRequired =\r\n      !!saveConfig.isRequired &&\r\n      (includeForListingTypes == null || includeForListingTypes.includes(publicData?.listingType));\r\n    if (isRequired) {\r\n      const savedListingField = fieldData[key];\r\n      return schemaType === SCHEMA_TYPE_ENUM\r\n        ? typeof savedListingField === 'string' && hasValidEnumValue(savedListingField)\r\n        : schemaType === SCHEMA_TYPE_MULTI_ENUM\r\n        ? Array.isArray(savedListingField) && hasValidMultiEnumValues(savedListingField)\r\n        : schemaType === SCHEMA_TYPE_TEXT\r\n        ? typeof savedListingField === 'string'\r\n        : schemaType === SCHEMA_TYPE_LONG\r\n        ? typeof savedListingField === 'number' && Number.isInteger(savedListingField)\r\n        : schemaType === SCHEMA_TYPE_BOOLEAN\r\n        ? savedListingField === true || savedListingField === false\r\n        : false;\r\n    }\r\n    return true;\r\n  };\r\n  return config.listing.listingFields.reduce((isValid, fieldConfig) => {\r\n    const data = fieldConfig.scope === 'private' ? privateData : publicData;\r\n    return isValid && isValidField(fieldConfig, data);\r\n  }, true);\r\n};\r\n\r\n/**\r\n * Check if a wizard tab is completed.\r\n *\r\n * @param tab wizard's tab\r\n * @param listing is contains some specific data if tab is completed\r\n *\r\n * @return true if tab / step is completed.\r\n */\r\nconst tabCompleted = (tab, listing, config) => {\r\n  const {\r\n    availabilityPlan,\r\n    description,\r\n    geolocation,\r\n    price,\r\n    title,\r\n    publicData,\r\n    privateData,\r\n  } = listing.attributes;\r\n  const images = listing.images;\r\n  const { listingType, transactionProcessAlias, unitType, shippingEnabled, pickupEnabled } =\r\n    publicData || {};\r\n  const deliveryOptionPicked = publicData && (shippingEnabled || pickupEnabled);\r\n\r\n  switch (tab) {\r\n    case DETAILS:\r\n      return !!(\r\n        description &&\r\n        title &&\r\n        listingType &&\r\n        transactionProcessAlias &&\r\n        unitType &&\r\n        hasValidListingFieldsInExtendedData(publicData, privateData, config)\r\n      );\r\n    case PRICING:\r\n      return !!price;\r\n    case PRICING_AND_STOCK:\r\n      return !!price;\r\n    case DELIVERY:\r\n      return !!deliveryOptionPicked;\r\n    case LOCATION:\r\n      return !!(geolocation && publicData?.location?.address);\r\n    case AVAILABILITY:\r\n      return !!availabilityPlan;\r\n    case PHOTOS:\r\n      return images && images.length > 0;\r\n    default:\r\n      return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Check which wizard tabs are active and which are not yet available. Tab is active if previous\r\n * tab is completed. In edit mode all tabs are active.\r\n *\r\n * @param isNew flag if a new listing is being created or an old one being edited\r\n * @param listing data to be checked\r\n * @param tabs array of tabs used for this listing. These depend on transaction process.\r\n *\r\n * @return object containing activity / editability of different tabs of this wizard\r\n */\r\nconst tabsActive = (isNew, listing, tabs, config) => {\r\n  return tabs.reduce((acc, tab) => {\r\n    const previousTabIndex = tabs.findIndex(t => t === tab) - 1;\r\n    const validTab = previousTabIndex >= 0;\r\n    const hasListingType = !!listing?.attributes?.publicData?.listingType;\r\n    const prevTabComletedInNewFlow = tabCompleted(tabs[previousTabIndex], listing, config);\r\n    const isActive =\r\n      validTab && !isNew ? hasListingType : validTab && isNew ? prevTabComletedInNewFlow : true;\r\n    return { ...acc, [tab]: isActive };\r\n  }, {});\r\n};\r\n\r\nconst scrollToTab = (tabPrefix, tabId) => {\r\n  const el = document.querySelector(`#${tabPrefix}_${tabId}`);\r\n  if (el) {\r\n    el.scrollIntoView({\r\n      block: 'start',\r\n      behavior: 'smooth',\r\n    });\r\n  }\r\n};\r\n\r\n// Create return URL for the Stripe onboarding form\r\nconst createReturnURL = (returnURLType, rootURL, routes, pathParams) => {\r\n  const path = createResourceLocatorString(\r\n    'EditListingStripeOnboardingPage',\r\n    routes,\r\n    { ...pathParams, returnURLType },\r\n    {}\r\n  );\r\n  const root = rootURL.replace(/\\/$/, '');\r\n  return `${root}${path}`;\r\n};\r\n\r\n// Get attribute: stripeAccountData\r\nconst getStripeAccountData = stripeAccount => stripeAccount.attributes.stripeAccountData || null;\r\n\r\n// Get last 4 digits of bank account returned in Stripe account\r\nconst getBankAccountLast4Digits = stripeAccountData =>\r\n  stripeAccountData && stripeAccountData.external_accounts.data.length > 0\r\n    ? stripeAccountData.external_accounts.data[0].last4\r\n    : null;\r\n\r\n// Check if there's requirements on selected type: 'past_due', 'currently_due' etc.\r\nconst hasRequirements = (stripeAccountData, requirementType) =>\r\n  stripeAccountData != null &&\r\n  stripeAccountData.requirements &&\r\n  Array.isArray(stripeAccountData.requirements[requirementType]) &&\r\n  stripeAccountData.requirements[requirementType].length > 0;\r\n\r\n// Redirect user to Stripe's hosted Connect account onboarding form\r\nconst handleGetStripeConnectAccountLinkFn = (getLinkFn, commonParams) => type => () => {\r\n  getLinkFn({ type, ...commonParams })\r\n    .then(url => {\r\n      window.location.href = url;\r\n    })\r\n    .catch(err => console.error(err));\r\n};\r\n\r\nconst RedirectToStripe = ({ redirectFn }) => {\r\n  useEffect(redirectFn('custom_account_verification'), []);\r\n  return <FormattedMessage id=\"EditListingWizard.redirectingToStripe\" />;\r\n};\r\n\r\nconst getListingTypeConfig = (listing, selectedListingType, config) => {\r\n  const existingListingType = listing?.attributes?.publicData?.listingType;\r\n  const validListingTypes = config.listing.listingTypes;\r\n  const hasOnlyOneListingType = validListingTypes?.length === 1;\r\n\r\n  const listingTypeConfig = existingListingType\r\n    ? validListingTypes.find(conf => conf.listingType === existingListingType)\r\n    : selectedListingType\r\n    ? validListingTypes.find(conf => conf.listingType === selectedListingType.listingType)\r\n    : hasOnlyOneListingType\r\n    ? validListingTypes[0]\r\n    : null;\r\n  return listingTypeConfig;\r\n};\r\n\r\n// Create a new or edit listing through EditListingWizard\r\nclass EditListingWizard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Having this info in state would trigger unnecessary rerendering\r\n    this.hasScrolledToTab = false;\r\n\r\n    this.state = {\r\n      draftId: null,\r\n      showPayoutDetails: false,\r\n      selectedListingType: null,\r\n    };\r\n    this.handleCreateFlowTabScrolling = this.handleCreateFlowTabScrolling.bind(this);\r\n    this.handlePublishListing = this.handlePublishListing.bind(this);\r\n    this.handlePayoutModalClose = this.handlePayoutModalClose.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { stripeOnboardingReturnURL } = this.props;\r\n\r\n    if (stripeOnboardingReturnURL != null && !this.showPayoutDetails) {\r\n      this.setState({ showPayoutDetails: true });\r\n    }\r\n  }\r\n\r\n  handleCreateFlowTabScrolling(shouldScroll) {\r\n    this.hasScrolledToTab = shouldScroll;\r\n  }\r\n\r\n  handlePublishListing(id) {\r\n    const { onPublishListingDraft, currentUser, stripeAccount, listing, config } = this.props;\r\n    const processName = listing?.attributes?.publicData?.transactionProcessAlias.split('/')[0];\r\n    const isInquiryProcess = processName === INQUIRY_PROCESS_NAME;\r\n\r\n    const listingTypeConfig = getListingTypeConfig(listing, this.state.selectedListingType, config);\r\n    // Through hosted configs (listingTypeConfig.defaultListingFields?.payoutDetails),\r\n    // it's possible to publish listing without payout details set by provider.\r\n    // Customers can't purchase these listings - but it gives operator opportunity to discuss with providers who fail to do so.\r\n    const isPayoutDetailsRequired = requirePayoutDetails(listingTypeConfig);\r\n\r\n    const stripeConnected = !!currentUser?.stripeAccount?.id;\r\n    const stripeAccountData = stripeConnected ? getStripeAccountData(stripeAccount) : null;\r\n    const stripeRequirementsMissing =\r\n      stripeAccount &&\r\n      (hasRequirements(stripeAccountData, 'past_due') ||\r\n        hasRequirements(stripeAccountData, 'currently_due'));\r\n\r\n    if (\r\n      isInquiryProcess ||\r\n      !isPayoutDetailsRequired ||\r\n      (stripeConnected && !stripeRequirementsMissing)\r\n    ) {\r\n      onPublishListingDraft(id);\r\n    } else {\r\n      this.setState({\r\n        draftId: id,\r\n        showPayoutDetails: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  handlePayoutModalClose() {\r\n    this.setState({ showPayoutDetails: false });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      className,\r\n      rootClassName,\r\n      params,\r\n      listing,\r\n      viewport,\r\n      intl,\r\n      errors,\r\n      fetchInProgress,\r\n      payoutDetailsSaveInProgress,\r\n      payoutDetailsSaved,\r\n      onManageDisableScrolling,\r\n      onPayoutDetailsChange,\r\n      onGetStripeConnectAccountLink,\r\n      getAccountLinkInProgress,\r\n      createStripeAccountError,\r\n      updateStripeAccountError,\r\n      fetchStripeAccountError,\r\n      stripeAccountFetched,\r\n      stripeAccount,\r\n      stripeAccountError,\r\n      stripeAccountLinkError,\r\n      currentUser,\r\n      config,\r\n      routeConfiguration,\r\n      ...rest\r\n    } = this.props;\r\n\r\n    const selectedTab = params.tab;\r\n    const isNewListingFlow = [LISTING_PAGE_PARAM_TYPE_NEW, LISTING_PAGE_PARAM_TYPE_DRAFT].includes(\r\n      params.type\r\n    );\r\n    const rootClasses = rootClassName || css.root;\r\n    const classes = classNames(rootClasses, className);\r\n    const currentListing = ensureListing(listing);\r\n    const savedProcessAlias = currentListing.attributes?.publicData?.transactionProcessAlias;\r\n    const transactionProcessAlias =\r\n      savedProcessAlias || this.state.selectedListingType?.transactionProcessAlias;\r\n\r\n    // NOTE: If the listing has invalid configuration in place,\r\n    // the listing is considered deprecated and we don't allow user to modify the listing anymore.\r\n    // Instead, operator should do that through Console or Integration API.\r\n    const validListingTypes = config.listing.listingTypes;\r\n    const listingTypeConfig = getListingTypeConfig(\r\n      currentListing,\r\n      this.state.selectedListingType,\r\n      config\r\n    );\r\n    const existingListingType = currentListing.attributes?.publicData?.listingType;\r\n    const invalidExistingListingType = existingListingType && !listingTypeConfig;\r\n    // TODO: displayPrice aka config.defaultListingFields?.price with false value is only available with inquiry process\r\n    //       if it's enabled with other processes, translations for \"new\" flow needs to be updated.\r\n    const isPriceDisabled = !displayPrice(listingTypeConfig);\r\n\r\n    // Transaction process alias is used here, because the process defineds whether the listing is supported\r\n    // I.e. old listings might not be supported through listing types, but client app might still support those processes.\r\n    const processName = transactionProcessAlias\r\n      ? transactionProcessAlias.split('/')[0]\r\n      : validListingTypes.length === 1\r\n      ? validListingTypes[0].transactionType.process\r\n      : INQUIRY_PROCESS_NAME;\r\n\r\n    const hasListingTypeSelected =\r\n      existingListingType || this.state.selectedListingType || validListingTypes.length === 1;\r\n\r\n    // For oudated draft listing, we don't show other tabs but the \"details\"\r\n    const tabs =\r\n      isNewListingFlow && (invalidExistingListingType || !hasListingTypeSelected)\r\n        ? TABS_DETAILS_ONLY\r\n        : isBookingProcess(processName)\r\n        ? tabsForBookingProcess(TABS_BOOKING, listingTypeConfig)\r\n        : isPurchaseProcess(processName)\r\n        ? tabsForPurchaseProcess(TABS_PRODUCT, listingTypeConfig)\r\n        : tabsForInquiryProcess(TABS_INQUIRY, listingTypeConfig);\r\n\r\n    // Check if wizard tab is active / linkable.\r\n    // When creating a new listing, we don't allow users to access next tab until the current one is completed.\r\n    const tabsStatus = tabsActive(isNewListingFlow, currentListing, tabs, config);\r\n\r\n    // Redirect user to first tab when encoutering outdated draft listings.\r\n    if (invalidExistingListingType && isNewListingFlow && selectedTab !== tabs[0]) {\r\n      return <NamedRedirect name=\"EditListingPage\" params={{ ...params, tab: tabs[0] }} />;\r\n    }\r\n\r\n    // If selectedTab is not active for listing with valid listing type,\r\n    // redirect to the beginning of wizard\r\n    if (!invalidExistingListingType && !tabsStatus[selectedTab]) {\r\n      const currentTabIndex = tabs.indexOf(selectedTab);\r\n      const nearestActiveTab = tabs\r\n        .slice(0, currentTabIndex)\r\n        .reverse()\r\n        .find(t => tabsStatus[t]);\r\n\r\n      console.log(\r\n        `You tried to access an EditListingWizard tab (${selectedTab}), which was not yet activated.`\r\n      );\r\n      return <NamedRedirect name=\"EditListingPage\" params={{ ...params, tab: nearestActiveTab }} />;\r\n    }\r\n\r\n    const { width } = viewport;\r\n    const hasViewport = width > 0;\r\n    const hasHorizontalTabLayout = hasViewport && width <= MAX_HORIZONTAL_NAV_SCREEN_WIDTH;\r\n    const hasVerticalTabLayout = hasViewport && width > MAX_HORIZONTAL_NAV_SCREEN_WIDTH;\r\n\r\n    // Check if scrollToTab call is needed (tab is not visible on mobile)\r\n    if (hasVerticalTabLayout) {\r\n      this.hasScrolledToTab = true;\r\n    } else if (hasHorizontalTabLayout && !this.hasScrolledToTab) {\r\n      const tabPrefix = id;\r\n      scrollToTab(tabPrefix, selectedTab);\r\n      this.hasScrolledToTab = true;\r\n    }\r\n\r\n    const tabLink = tab => {\r\n      return { name: 'EditListingPage', params: { ...params, tab } };\r\n    };\r\n\r\n    const formDisabled = getAccountLinkInProgress;\r\n    const ensuredCurrentUser = ensureCurrentUser(currentUser);\r\n    const currentUserLoaded = !!ensuredCurrentUser.id;\r\n    const stripeConnected = currentUserLoaded && !!stripeAccount && !!stripeAccount.id;\r\n\r\n    const rootURL = config.marketplaceRootURL;\r\n    const { returnURLType, ...pathParams } = params;\r\n    const successURL = createReturnURL(\r\n      STRIPE_ONBOARDING_RETURN_URL_SUCCESS,\r\n      rootURL,\r\n      routeConfiguration,\r\n      pathParams\r\n    );\r\n    const failureURL = createReturnURL(\r\n      STRIPE_ONBOARDING_RETURN_URL_FAILURE,\r\n      rootURL,\r\n      routeConfiguration,\r\n      pathParams\r\n    );\r\n\r\n    const accountId = stripeConnected ? stripeAccount.id : null;\r\n    const stripeAccountData = stripeConnected ? getStripeAccountData(stripeAccount) : null;\r\n\r\n    const requirementsMissing =\r\n      stripeAccount &&\r\n      (hasRequirements(stripeAccountData, 'past_due') ||\r\n        hasRequirements(stripeAccountData, 'currently_due'));\r\n\r\n    const savedCountry = stripeAccountData ? stripeAccountData.country : null;\r\n\r\n    const handleGetStripeConnectAccountLink = handleGetStripeConnectAccountLinkFn(\r\n      onGetStripeConnectAccountLink,\r\n      {\r\n        accountId,\r\n        successURL,\r\n        failureURL,\r\n      }\r\n    );\r\n\r\n    const returnedNormallyFromStripe = returnURLType === STRIPE_ONBOARDING_RETURN_URL_SUCCESS;\r\n    const returnedAbnormallyFromStripe = returnURLType === STRIPE_ONBOARDING_RETURN_URL_FAILURE;\r\n    const showVerificationNeeded = stripeConnected && requirementsMissing;\r\n\r\n    // Redirect from success URL to basic path for StripePayoutPage\r\n    if (returnedNormallyFromStripe && stripeConnected && !requirementsMissing) {\r\n      return <NamedRedirect name=\"EditListingPage\" params={pathParams} />;\r\n    }\r\n\r\n    return (\r\n      <div className={classes}>\r\n        <Tabs\r\n          rootClassName={css.tabsContainer}\r\n          navRootClassName={css.nav}\r\n          tabRootClassName={css.tab}\r\n        >\r\n          {tabs.map(tab => {\r\n            const tabTranslations = tabLabelAndSubmit(\r\n              intl,\r\n              tab,\r\n              isNewListingFlow,\r\n              isPriceDisabled,\r\n              processName\r\n            );\r\n            return (\r\n              <EditListingWizardTab\r\n                {...rest}\r\n                key={tab}\r\n                tabId={`${id}_${tab}`}\r\n                tabLabel={tabTranslations.label}\r\n                tabSubmitButtonText={tabTranslations.submitButton}\r\n                tabLinkProps={tabLink(tab)}\r\n                selected={selectedTab === tab}\r\n                disabled={isNewListingFlow && !tabsStatus[tab]}\r\n                tab={tab}\r\n                params={params}\r\n                listing={listing}\r\n                marketplaceTabs={tabs}\r\n                errors={errors}\r\n                handleCreateFlowTabScrolling={this.handleCreateFlowTabScrolling}\r\n                handlePublishListing={this.handlePublishListing}\r\n                fetchInProgress={fetchInProgress}\r\n                onListingTypeChange={selectedListingType => this.setState({ selectedListingType })}\r\n                onManageDisableScrolling={onManageDisableScrolling}\r\n                config={config}\r\n                routeConfiguration={routeConfiguration}\r\n              />\r\n            );\r\n          })}\r\n        </Tabs>\r\n        <Modal\r\n          id=\"EditListingWizard.payoutModal\"\r\n          isOpen={this.state.showPayoutDetails}\r\n          onClose={this.handlePayoutModalClose}\r\n          onManageDisableScrolling={onManageDisableScrolling}\r\n          usePortal\r\n        >\r\n          <div className={css.modalPayoutDetailsWrapper}>\r\n            <Heading as=\"h2\" rootClassName={css.modalTitle}>\r\n              <FormattedMessage id=\"EditListingWizard.payoutModalTitleOneMoreThing\" />\r\n              <br />\r\n              <FormattedMessage id=\"EditListingWizard.payoutModalTitlePayoutPreferences\" />\r\n            </Heading>\r\n            {!currentUserLoaded ? (\r\n              <FormattedMessage id=\"StripePayoutPage.loadingData\" />\r\n            ) : returnedAbnormallyFromStripe && !stripeAccountLinkError ? (\r\n              <p className={css.modalMessage}>\r\n                <RedirectToStripe redirectFn={handleGetStripeConnectAccountLink} />\r\n              </p>\r\n            ) : (\r\n              <>\r\n                <p className={css.modalMessage}>\r\n                  <FormattedMessage id=\"EditListingWizard.payoutModalInfo\" />\r\n                </p>\r\n                <StripeConnectAccountForm\r\n                  disabled={formDisabled}\r\n                  inProgress={payoutDetailsSaveInProgress}\r\n                  ready={payoutDetailsSaved}\r\n                  currentUser={ensuredCurrentUser}\r\n                  stripeBankAccountLastDigits={getBankAccountLast4Digits(stripeAccountData)}\r\n                  savedCountry={savedCountry}\r\n                  submitButtonText={intl.formatMessage({\r\n                    id: 'StripePayoutPage.submitButtonText',\r\n                  })}\r\n                  stripeAccountError={stripeAccountError}\r\n                  stripeAccountFetched={stripeAccountFetched}\r\n                  stripeAccountLinkError={stripeAccountLinkError}\r\n                  onChange={onPayoutDetailsChange}\r\n                  onSubmit={rest.onPayoutDetailsSubmit}\r\n                  onGetStripeConnectAccountLink={handleGetStripeConnectAccountLink}\r\n                  stripeConnected={stripeConnected}\r\n                >\r\n                  {stripeConnected && !returnedAbnormallyFromStripe && showVerificationNeeded ? (\r\n                    <StripeConnectAccountStatusBox\r\n                      type=\"verificationNeeded\"\r\n                      inProgress={getAccountLinkInProgress}\r\n                      onGetStripeConnectAccountLink={handleGetStripeConnectAccountLink(\r\n                        'custom_account_verification'\r\n                      )}\r\n                    />\r\n                  ) : stripeConnected && savedCountry && !returnedAbnormallyFromStripe ? (\r\n                    <StripeConnectAccountStatusBox\r\n                      type=\"verificationSuccess\"\r\n                      inProgress={getAccountLinkInProgress}\r\n                      disabled={payoutDetailsSaveInProgress}\r\n                      onGetStripeConnectAccountLink={handleGetStripeConnectAccountLink(\r\n                        'custom_account_update'\r\n                      )}\r\n                    />\r\n                  ) : null}\r\n                </StripeConnectAccountForm>\r\n              </>\r\n            )}\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nEditListingWizard.defaultProps = {\r\n  className: null,\r\n  currentUser: null,\r\n  rootClassName: null,\r\n  listing: null,\r\n  stripeAccount: null,\r\n  stripeAccountFetched: null,\r\n  updateInProgress: false,\r\n  createStripeAccountError: null,\r\n  updateStripeAccountError: null,\r\n  fetchStripeAccountError: null,\r\n  stripeAccountError: null,\r\n  stripeAccountLinkError: null,\r\n};\r\n\r\nEditListingWizard.propTypes = {\r\n  id: string.isRequired,\r\n  className: string,\r\n  currentUser: propTypes.currentUser,\r\n  rootClassName: string,\r\n  params: shape({\r\n    id: string.isRequired,\r\n    slug: string.isRequired,\r\n    type: oneOf(LISTING_PAGE_PARAM_TYPES).isRequired,\r\n    tab: oneOf(TABS_ALL).isRequired,\r\n  }).isRequired,\r\n  stripeAccount: object,\r\n  stripeAccountFetched: bool,\r\n\r\n  // We cannot use propTypes.listing since the listing might be a draft.\r\n  listing: shape({\r\n    attributes: shape({\r\n      publicData: object,\r\n      description: string,\r\n      geolocation: object,\r\n      price: object,\r\n      title: string,\r\n    }),\r\n    images: array,\r\n  }),\r\n\r\n  errors: shape({\r\n    createListingDraftError: object,\r\n    updateListingError: object,\r\n    publishListingError: object,\r\n    showListingsError: object,\r\n    uploadImageError: object,\r\n  }).isRequired,\r\n  createStripeAccountError: propTypes.error,\r\n  updateStripeAccountError: propTypes.error,\r\n  fetchStripeAccountError: propTypes.error,\r\n  stripeAccountError: propTypes.error,\r\n  stripeAccountLinkError: propTypes.error,\r\n\r\n  fetchInProgress: bool.isRequired,\r\n  getAccountLinkInProgress: bool.isRequired,\r\n  payoutDetailsSaveInProgress: bool.isRequired,\r\n  payoutDetailsSaved: bool.isRequired,\r\n  onPayoutDetailsChange: func.isRequired,\r\n  onPayoutDetailsSubmit: func.isRequired,\r\n  onGetStripeConnectAccountLink: func.isRequired,\r\n  onManageDisableScrolling: func.isRequired,\r\n\r\n  // from withViewport\r\n  viewport: shape({\r\n    width: number.isRequired,\r\n    height: number.isRequired,\r\n  }).isRequired,\r\n\r\n  // from useIntl\r\n  intl: intlShape.isRequired,\r\n\r\n  // from useConfiguration\r\n  config: object.isRequired,\r\n\r\n  // from useRouteConfiguration\r\n  routeConfiguration: arrayOf(propTypes.route).isRequired,\r\n};\r\n\r\nconst EnhancedEditListingWizard = props => {\r\n  const config = useConfiguration();\r\n  const routeConfiguration = useRouteConfiguration();\r\n  const intl = useIntl();\r\n  return (\r\n    <EditListingWizard\r\n      config={config}\r\n      routeConfiguration={routeConfiguration}\r\n      intl={intl}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withViewport(EnhancedEditListingWizard);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"mobileTopbar\":\"EditListingPage_mobileTopbar__SbAP0\",\"desktopTopbar\":\"EditListingPage_desktopTopbar__Zii9i\",\"wizard\":\"EditListingPage_wizard__t2Smb\"};","import React from 'react';\r\nimport { bool, func, object, shape, string, oneOf } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\n// Import configs and util modules\r\nimport { intlShape, injectIntl } from '../../util/reactIntl';\r\nimport { types as sdkTypes } from '../../util/sdkLoader';\r\nimport {\r\n  LISTING_PAGE_PARAM_TYPE_DRAFT,\r\n  LISTING_PAGE_PARAM_TYPE_NEW,\r\n  LISTING_PAGE_PARAM_TYPES,\r\n  LISTING_PAGE_PENDING_APPROVAL_VARIANT,\r\n  createSlug,\r\n  parse,\r\n} from '../../util/urlHelpers';\r\nimport { LISTING_STATE_DRAFT, LISTING_STATE_PENDING_APPROVAL, propTypes } from '../../util/types';\r\nimport { ensureOwnListing } from '../../util/data';\r\nimport { getMarketplaceEntities } from '../../ducks/marketplaceData.duck';\r\nimport { manageDisableScrolling, isScrollingDisabled } from '../../ducks/ui.duck';\r\nimport {\r\n  stripeAccountClearError,\r\n  getStripeConnectAccountLink,\r\n} from '../../ducks/stripeConnectAccount.duck';\r\n\r\n// Import shared components\r\nimport { NamedRedirect, Page } from '../../components';\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\n\r\n// Import modules from this directory\r\nimport {\r\n  requestFetchAvailabilityExceptions,\r\n  requestAddAvailabilityException,\r\n  requestDeleteAvailabilityException,\r\n  requestCreateListingDraft,\r\n  requestPublishListingDraft,\r\n  requestUpdateListing,\r\n  requestImageUpload,\r\n  removeListingImage,\r\n  savePayoutDetails,\r\n} from './EditListingPage.duck';\r\nimport EditListingWizard from './EditListingWizard/EditListingWizard';\r\nimport css from './EditListingPage.module.css';\r\n\r\nconst STRIPE_ONBOARDING_RETURN_URL_SUCCESS = 'success';\r\nconst STRIPE_ONBOARDING_RETURN_URL_FAILURE = 'failure';\r\nconst STRIPE_ONBOARDING_RETURN_URL_TYPES = [\r\n  STRIPE_ONBOARDING_RETURN_URL_SUCCESS,\r\n  STRIPE_ONBOARDING_RETURN_URL_FAILURE,\r\n];\r\n\r\nconst { UUID } = sdkTypes;\r\n\r\n// Pick images that are currently attached to listing entity and images that are going to be attached.\r\n// Avoid duplicates and images that should be removed.\r\nconst pickRenderableImages = (\r\n  currentListing,\r\n  uploadedImages,\r\n  uploadedImageIdsInOrder = [],\r\n  removedImageIds = []\r\n) => {\r\n  // Images are passed to EditListingForm so that it can generate thumbnails out of them\r\n  const currentListingImages = currentListing && currentListing.images ? currentListing.images : [];\r\n  // Images not yet connected to the listing\r\n  const unattachedImages = uploadedImageIdsInOrder.map(i => uploadedImages[i]);\r\n  const allImages = currentListingImages.concat(unattachedImages);\r\n\r\n  const pickImagesAndIds = (imgs, img) => {\r\n    const imgId = img.imageId || img.id;\r\n    // Pick only unique images that are not marked to be removed\r\n    const shouldInclude = !imgs.imageIds.includes(imgId) && !removedImageIds.includes(imgId);\r\n    if (shouldInclude) {\r\n      imgs.imageEntities.push(img);\r\n      imgs.imageIds.push(imgId);\r\n    }\r\n    return imgs;\r\n  };\r\n\r\n  // Return array of image entities. Something like: [{ id, imageId, type, attributes }, ...]\r\n  return allImages.reduce(pickImagesAndIds, { imageEntities: [], imageIds: [] }).imageEntities;\r\n};\r\n\r\n// N.B. All the presentational content needs to be extracted to their own components\r\nexport const EditListingPageComponent = props => {\r\n  const {\r\n    currentUser,\r\n    createStripeAccountError,\r\n    fetchInProgress,\r\n    fetchStripeAccountError,\r\n    getOwnListing,\r\n    getAccountLinkError,\r\n    getAccountLinkInProgress,\r\n    history,\r\n    intl,\r\n    onFetchExceptions,\r\n    onAddAvailabilityException,\r\n    onDeleteAvailabilityException,\r\n    onCreateListingDraft,\r\n    onPublishListingDraft,\r\n    onUpdateListing,\r\n    onImageUpload,\r\n    onRemoveListingImage,\r\n    onManageDisableScrolling,\r\n    onPayoutDetailsSubmit,\r\n    onPayoutDetailsChange,\r\n    onGetStripeConnectAccountLink,\r\n    page,\r\n    params,\r\n    location,\r\n    scrollingDisabled,\r\n    stripeAccountFetched,\r\n    stripeAccount,\r\n    updateStripeAccountError,\r\n  } = props;\r\n\r\n  const { id, type, returnURLType } = params;\r\n  const isNewURI = type === LISTING_PAGE_PARAM_TYPE_NEW;\r\n  const isDraftURI = type === LISTING_PAGE_PARAM_TYPE_DRAFT;\r\n  const isNewListingFlow = isNewURI || isDraftURI;\r\n\r\n  const listingId = page.submittedListingId || (id ? new UUID(id) : null);\r\n  const currentListing = ensureOwnListing(getOwnListing(listingId));\r\n  const { state: currentListingState } = currentListing.attributes;\r\n\r\n  const isPastDraft = currentListingState && currentListingState !== LISTING_STATE_DRAFT;\r\n  const shouldRedirect = isNewListingFlow && listingId && isPastDraft;\r\n\r\n  const hasStripeOnboardingDataIfNeeded = returnURLType ? !!(currentUser && currentUser.id) : true;\r\n  const showForm = hasStripeOnboardingDataIfNeeded && (isNewURI || currentListing.id);\r\n\r\n  if (shouldRedirect) {\r\n    const isPendingApproval =\r\n      currentListing && currentListingState === LISTING_STATE_PENDING_APPROVAL;\r\n\r\n    // If page has already listingId (after submit) and current listings exist\r\n    // redirect to listing page\r\n    const listingSlug = currentListing ? createSlug(currentListing.attributes.title) : null;\r\n\r\n    const redirectProps = isPendingApproval\r\n      ? {\r\n          name: 'ListingPageVariant',\r\n          params: {\r\n            id: listingId.uuid,\r\n            slug: listingSlug,\r\n            variant: LISTING_PAGE_PENDING_APPROVAL_VARIANT,\r\n          },\r\n        }\r\n      : {\r\n          name: 'ListingPage',\r\n          params: {\r\n            id: listingId.uuid,\r\n            slug: listingSlug,\r\n          },\r\n        };\r\n\r\n    return <NamedRedirect {...redirectProps} />;\r\n  } else if (showForm) {\r\n    const {\r\n      createListingDraftError = null,\r\n      publishListingError = null,\r\n      updateListingError = null,\r\n      showListingsError = null,\r\n      uploadImageError = null,\r\n      setStockError = null,\r\n      uploadedImages,\r\n      uploadedImagesOrder,\r\n      removedImageIds,\r\n      addExceptionError = null,\r\n      deleteExceptionError = null,\r\n    } = page;\r\n    const errors = {\r\n      createListingDraftError,\r\n      publishListingError,\r\n      updateListingError,\r\n      showListingsError,\r\n      uploadImageError,\r\n      setStockError,\r\n      createStripeAccountError,\r\n      addExceptionError,\r\n      deleteExceptionError,\r\n    };\r\n    // TODO: is this dead code? (shouldRedirect is checked before)\r\n    const newListingPublished =\r\n      isDraftURI && currentListing && currentListingState !== LISTING_STATE_DRAFT;\r\n\r\n    // Show form if user is posting a new listing or editing existing one\r\n    const disableForm = page.redirectToListing && !showListingsError;\r\n    const images = pickRenderableImages(\r\n      currentListing,\r\n      uploadedImages,\r\n      uploadedImagesOrder,\r\n      removedImageIds\r\n    );\r\n\r\n    const title = isNewListingFlow\r\n      ? intl.formatMessage({ id: 'EditListingPage.titleCreateListing' })\r\n      : intl.formatMessage({ id: 'EditListingPage.titleEditListing' });\r\n\r\n    return (\r\n      <Page title={title} scrollingDisabled={scrollingDisabled}>\r\n        <TopbarContainer\r\n          mobileRootClassName={css.mobileTopbar}\r\n          desktopClassName={css.desktopTopbar}\r\n          mobileClassName={css.mobileTopbar}\r\n        />\r\n        <EditListingWizard\r\n          id=\"EditListingWizard\"\r\n          className={css.wizard}\r\n          params={params}\r\n          locationSearch={parse(location.search)}\r\n          disabled={disableForm}\r\n          errors={errors}\r\n          fetchInProgress={fetchInProgress}\r\n          newListingPublished={newListingPublished}\r\n          history={history}\r\n          images={images}\r\n          listing={currentListing}\r\n          weeklyExceptionQueries={page.weeklyExceptionQueries}\r\n          monthlyExceptionQueries={page.monthlyExceptionQueries}\r\n          allExceptions={page.allExceptions}\r\n          onFetchExceptions={onFetchExceptions}\r\n          onAddAvailabilityException={onAddAvailabilityException}\r\n          onDeleteAvailabilityException={onDeleteAvailabilityException}\r\n          onUpdateListing={onUpdateListing}\r\n          onCreateListingDraft={onCreateListingDraft}\r\n          onPublishListingDraft={onPublishListingDraft}\r\n          onPayoutDetailsChange={onPayoutDetailsChange}\r\n          onPayoutDetailsSubmit={onPayoutDetailsSubmit}\r\n          onGetStripeConnectAccountLink={onGetStripeConnectAccountLink}\r\n          getAccountLinkInProgress={getAccountLinkInProgress}\r\n          onImageUpload={onImageUpload}\r\n          onRemoveImage={onRemoveListingImage}\r\n          currentUser={currentUser}\r\n          onManageDisableScrolling={onManageDisableScrolling}\r\n          stripeOnboardingReturnURL={params.returnURLType}\r\n          updatedTab={page.updatedTab}\r\n          updateInProgress={page.updateInProgress || page.createListingDraftInProgress}\r\n          payoutDetailsSaveInProgress={page.payoutDetailsSaveInProgress}\r\n          payoutDetailsSaved={page.payoutDetailsSaved}\r\n          stripeAccountFetched={stripeAccountFetched}\r\n          stripeAccount={stripeAccount}\r\n          stripeAccountError={\r\n            createStripeAccountError || updateStripeAccountError || fetchStripeAccountError\r\n          }\r\n          stripeAccountLinkError={getAccountLinkError}\r\n        />\r\n      </Page>\r\n    );\r\n  } else {\r\n    // If user has come to this page through a direct linkto edit existing listing,\r\n    // we need to load it first.\r\n    const loadingPageMsg = {\r\n      id: 'EditListingPage.loadingListingData',\r\n    };\r\n    return (\r\n      <Page title={intl.formatMessage(loadingPageMsg)} scrollingDisabled={scrollingDisabled}>\r\n        <TopbarContainer\r\n          mobileRootClassName={css.mobileTopbar}\r\n          desktopClassName={css.desktopTopbar}\r\n          mobileClassName={css.mobileTopbar}\r\n        />\r\n      </Page>\r\n    );\r\n  }\r\n};\r\n\r\nEditListingPageComponent.defaultProps = {\r\n  createStripeAccountError: null,\r\n  fetchStripeAccountError: null,\r\n  getAccountLinkError: null,\r\n  getAccountLinkInProgress: null,\r\n  stripeAccountFetched: null,\r\n  currentUser: null,\r\n  stripeAccount: null,\r\n  currentUserHasOrders: null,\r\n  listing: null,\r\n  listingDraft: null,\r\n  notificationCount: 0,\r\n  sendVerificationEmailError: null,\r\n};\r\n\r\nEditListingPageComponent.propTypes = {\r\n  createStripeAccountError: propTypes.error,\r\n  fetchStripeAccountError: propTypes.error,\r\n  getAccountLinkError: propTypes.error,\r\n  getAccountLinkInProgress: bool,\r\n  updateStripeAccountError: propTypes.error,\r\n  currentUser: propTypes.currentUser,\r\n  fetchInProgress: bool.isRequired,\r\n  getOwnListing: func.isRequired,\r\n  onFetchExceptions: func.isRequired,\r\n  onAddAvailabilityException: func.isRequired,\r\n  onDeleteAvailabilityException: func.isRequired,\r\n  onGetStripeConnectAccountLink: func.isRequired,\r\n  onCreateListingDraft: func.isRequired,\r\n  onPublishListingDraft: func.isRequired,\r\n  onImageUpload: func.isRequired,\r\n  onManageDisableScrolling: func.isRequired,\r\n  onPayoutDetailsChange: func.isRequired,\r\n  onPayoutDetailsSubmit: func.isRequired,\r\n  onRemoveListingImage: func.isRequired,\r\n  onUpdateListing: func.isRequired,\r\n  page: object.isRequired,\r\n  params: shape({\r\n    id: string.isRequired,\r\n    slug: string.isRequired,\r\n    type: oneOf(LISTING_PAGE_PARAM_TYPES).isRequired,\r\n    tab: string.isRequired,\r\n    returnURLType: oneOf(STRIPE_ONBOARDING_RETURN_URL_TYPES),\r\n  }).isRequired,\r\n  stripeAccountFetched: bool,\r\n  stripeAccount: object,\r\n  scrollingDisabled: bool.isRequired,\r\n\r\n  /* from withRouter */\r\n  history: shape({\r\n    push: func.isRequired,\r\n  }).isRequired,\r\n  location: shape({\r\n    search: string.isRequired,\r\n  }).isRequired,\r\n\r\n  /* from injectIntl */\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const page = state.EditListingPage;\r\n  const {\r\n    getAccountLinkInProgress,\r\n    getAccountLinkError,\r\n    createStripeAccountInProgress,\r\n    createStripeAccountError,\r\n    updateStripeAccountError,\r\n    fetchStripeAccountError,\r\n    stripeAccount,\r\n    stripeAccountFetched,\r\n  } = state.stripeConnectAccount;\r\n\r\n  const getOwnListing = id => {\r\n    const listings = getMarketplaceEntities(state, [{ id, type: 'ownListing' }]);\r\n    return listings.length === 1 ? listings[0] : null;\r\n  };\r\n\r\n  return {\r\n    getAccountLinkInProgress,\r\n    getAccountLinkError,\r\n    createStripeAccountError,\r\n    updateStripeAccountError,\r\n    fetchStripeAccountError,\r\n    stripeAccount,\r\n    stripeAccountFetched,\r\n    currentUser: state.user.currentUser,\r\n    fetchInProgress: createStripeAccountInProgress,\r\n    getOwnListing,\r\n    page,\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onFetchExceptions: params => dispatch(requestFetchAvailabilityExceptions(params)),\r\n  onAddAvailabilityException: params => dispatch(requestAddAvailabilityException(params)),\r\n  onDeleteAvailabilityException: params => dispatch(requestDeleteAvailabilityException(params)),\r\n\r\n  onUpdateListing: (tab, values, config) => dispatch(requestUpdateListing(tab, values, config)),\r\n  onCreateListingDraft: (values, config) => dispatch(requestCreateListingDraft(values, config)),\r\n  onPublishListingDraft: listingId => dispatch(requestPublishListingDraft(listingId)),\r\n  onImageUpload: (data, listingImageConfig) =>\r\n    dispatch(requestImageUpload(data, listingImageConfig)),\r\n  onManageDisableScrolling: (componentId, disableScrolling) =>\r\n    dispatch(manageDisableScrolling(componentId, disableScrolling)),\r\n  onPayoutDetailsChange: () => dispatch(stripeAccountClearError()),\r\n  onPayoutDetailsSubmit: (values, isUpdateCall) =>\r\n    dispatch(savePayoutDetails(values, isUpdateCall)),\r\n  onGetStripeConnectAccountLink: params => dispatch(getStripeConnectAccountLink(params)),\r\n  onRemoveListingImage: imageId => dispatch(removeListingImage(imageId)),\r\n});\r\n\r\n// Note: it is important that the withRouter HOC is **outside** the\r\n// connect HOC, otherwise React Router won't rerender any Route\r\n// components since connect implements a shouldComponentUpdate\r\n// lifecycle hook.\r\n//\r\n// See: https://github.com/ReactTraining/react-router/issues/4671\r\nconst EditListingPage = compose(\r\n  withRouter,\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  ),\r\n  injectIntl\r\n)(EditListingPageComponent);\r\n\r\nexport default EditListingPage;\r\n"],"names":["TODAY","Date","PickerForm","props","React","FinalForm","Object","assign","onSubmit","render","formRenderProps","handleSubmit","children","Form","tabIndex","handleKeyDown","setIsOpen","e","keyCode","isOpen","useState","currentMonth","setCurrentMonth","initialVisibleMonth","date","timeZone","rootClassName","className","label","onDateChange","initialValues","rest","onMonthClick","startOfMonth","classes","classNames","css","popupClasses","OutsideClickHandler","onOutsideClick","onKeyDown","InlineTextButton","onClick","prevState","FieldDateRangeController","name","minimumNights","onChange","_ref","startDate","endDate","onPrevMonthClick","getStartOfPrevMonth","onNextMonthClick","getStartOfNextMonth","navNext","Next","showUntilDate","endOfAvailabilityExceptionRange","startOfNextRange","navPrev","Prev","getStartOf","startOfPrevRange","parseLocalizedTime","timeString","dateString","stringifyDateToISO8601","parseDateTimeString","concat","getEndTimeAsDate","endTime","isDaily","DateLabel","dateId","hasAvailability","parseDateFromISO8601","dateLabelContainer","blockedDateLabel","H4","dateLabel","FormattedDate","value","weekday","dateAndMonth","month","day","PlanEntry","_ref2","entry","useFullDays","intl","availabilityInfo","seats","FormattedMessage","id","planEntry","availabilityDot","isAvailable","TimeRange","timeRange","startTime","dateType","DATE_TYPE_DATE","DATE_TYPE_TIME","ExceptionEntry","_ref3","exception","onDeleteAvailabilityException","millisecondBeforeEndTime","attributes","end","getTime","rangeEnd","start","deleteButton","deleteIconWrapper","IconDelete","deleteIcon","AvailableExceptionsInfo","_ref4","availableExceptions","length","Heading","as","exceptionsSubtitle","map","key","uuid","NotAvailableExceptionsInfo","_ref5","blockingExceptions","CalendarDate","_availabilityData$pla","_availabilityData$exc","useIntl","availabilityData","fetchExceptionsInProgress","fetchExceptionsError","hasPlanEntries","planEntries","hasExceptions","exceptions","filter","blockedDate","info","i","exceptionsContainer","exceptionsTitle","title","IconSpinner","FormattedWeekRange","_ref7","currentWeek","endOfCurrentWeek","formattingOptions","year","formatted","formatDateTimeRange","split","rangePartial","rangePart","WeeklyCalendar","setCurrentWeek","_ref6","locationSearch","firstDayOfWeek","selectedDate","d","getStartOfWeek","getStartOfSelectedWeek","availabilityPlan","timezone","headerClassName","listingId","availabilityExceptions","weeklyExceptionQueries","onFetchExceptions","params","routeConfiguration","history","endOfRange","thisWeek","nextWeek","availableDates","availabilityPerDate","currentWeekId","useEffect","isInRange","redirectTo","createResourceLocatorString","replace","appSettings","dev","verbose","formatRange","available","hour","minute","formattedStart","formatDate","formattedEnd","availabilityEmoji","console","log","keys","forEach","_availableDates$d","_availableDates$d$ran","_availableDates$d$ran2","ranges","r","daysOfWeekStrings","weekClickParams","onWeekClick","handleWeekClick","root","titleWrapper","sectionTitle","WeekPicker","weekPicker","weekPickerLabel","weekRange","weekPickerIcon","IconArrowHead","size","direction","dates","getMomentFromDate","updatedDate","startDateOffset","getStartOfWeekAsMoment","endDateOffset","getEndOfWeekAsMoment","onFocusChange","_ref8","focused","setWeekPickerFocused","isOutsideRange","navigation","prev","getStartOfPrevWeek","next","getStartOfNextWeek","grid","reduce","all","dayString","push","defaultProps","WEEKDAYS","defaultTimeZone","window","getDefaultTimeZoneOnBrowser","createEntryDayGroups","entries","arguments","undefined","activePlanDays","groupedEntries","endHour","dayOfWeek","dayGroup","includes","createEntriesFromSubmitValues","values","allEntries","dayEntries","dayValue","EditListingAvailabilityPanel","_listingAttributes$pu","listing","monthlyExceptionQueries","allExceptions","onAddAvailabilityException","disabled","ready","onManageDisableScrolling","onNextTab","submitButtonText","updateInProgress","errors","config","isEditPlanModalOpen","setIsEditPlanModalOpen","isEditExceptionsModalOpen","setIsEditExceptionsModalOpen","valuesFromLastSubmit","setValuesFromLastSubmit","localization","listingAttributes","unitType","publicData","isFullDay","hasAvailabilityPlan","isPublished","state","LISTING_STATE_DRAFT","defaultAvailabilityPlan","type","createInitialValues","sortedAvailabilityExceptions","H3","listingTitle","ListingLink","lineBreak","DAY","showListingsError","Button","Modal","onClose","containerClassName","usePortal","EditListingAvailabilityPlanForm","formId","weekdays","days","startOfWeek","slice","createAvailabilityPlan","then","catch","inProgress","fetchErrors","EditListingAvailabilityExceptionForm","availability","exceptionStartTime","exceptionEndTime","exceptionRange","range","timestampToDate","rotateDays","invalidExistingListingType","noListingTypesSet","marketplaceName","H2","getTransactionInfo","listingTypes","existingListingTypeInfo","inlcudeLabel","listingType","transactionProcessAlias","transactionType","alias","configUnitType","pickListingFieldsData","data","targetScope","targetListingType","listingFieldConfigs","fields","field","includeForListingTypes","scope","schemaType","namespacedKey","isKnownSchemaType","EXTENDED_DATA_SCHEMA_TYPES","isTargetScope","isTargetListingType","fieldValue","initialValuesForListingFields","EditListingDetailsPanel","onListingTypeChange","panelUpdated","listingFieldsConfig","listingFields","hasExistingListingType","hasSetListingType","hasValidExistingListingType","find","conf","_conf$transactionType","listinTypesMatch","unitTypesMatch","getInitialValues","_props$listing","description","privateData","canShowEditListingDetailsForm","EditListingDetailsForm","saveActionMsg","updateValues","trim","processAlias","isBookingProcessAlias","selectableListingTypes","marketplaceCurrency","currency","updated","autoFocus","ErrorMessage","Money","sdkTypes","_listing$attributes","_listing$attributes$p","_publicData$location","geolocation","price","listingTypeConfig","displayShipping","displayDeliveryShipping","displayPickup","displayDeliveryPickup","displayMultipleDelivery","locationFieldsPresent","location","address","building","shippingEnabled","pickupEnabled","shippingPriceInSubunitsOneItem","shippingPriceInSubunitsAdditionalItems","deliveryOptions","search","selectedPlace","origin","EditListingDeliveryPanel","_listing$attributes2","_listing$attributes2$","_listing$attributes3","_listing$attributes3$","setState","priceCurrencyValid","hasStockInUse","stockType","STOCK_MULTIPLE_ITEMS","EditListingDeliveryForm","_location$selectedPla","_location$selectedPla2","amount","EditListingLocationPanel","EditListingLocationForm","func","object","string","bool","PropTypes","images","EditListingPhotosPanel","onImageUpload","onRemoveImage","listingImageConfig","rootClass","EditListingPhotosForm","addImage","EditListingPricingPanel","listingMinimumPriceSubUnits","EditListingPricingForm","BILLIARD","getListingTypeConfig","selectedListingType","_currentStock$attribu","currentStock","hasInfiniteStock","STOCK_INFINITE_ITEMS","currentStockQuantity","quantity","stock","stockTypeInfinity","EditListingPricingAndStockPanel","_listing$attributes4","_listing$attributes5","_initialValues$price","EditListingPricingAndStockForm","_listing$currentStock","_listing$currentStock2","_stockUpdShwcseaybe$s","hasStockTypeInfinityChecked","hasNoCurrentStock","hasStockQuantityChanged","oldTotal","stockUpdShwcseaybe","stockUpdate","newTotal","DETAILS","PRICING","PRICING_AND_STOCK","DELIVERY","LOCATION","AVAILABILITY","PHOTOS","redirectAfterDraftUpdate","tab","marketplaceTabs","routes","listingUUID","currentPathParams","LISTING_PAGE_PARAM_TYPE_DRAFT","LISTING_PAGE_PARAM_TYPE_NEW","draftURI","nextPathParams","pathParamsToNextTab","nextTabIndex","findIndex","s","to","EditListingWizardTab","fetchInProgress","newListingPublished","handleCreateFlowTabScrolling","handlePublishListing","onUpdateListing","onCreateListingDraft","updatedTab","tabSubmitButtonText","isNewURI","isDraftURI","isNewListingFlow","currentListing","ensureListing","onCompleteEditListingWizardTab","onUpdateListingOrCreateListingDraft","updateListingValues","automaticRedirectsForNewListingFlow","panelProps","layout","listingImage","array","oneOf","shape","TABS_DETAILS_ONLY","TABS_PRODUCT","TABS_BOOKING","TABS_INQUIRY","STRIPE_ONBOARDING_RETURN_URL_SUCCESS","STRIPE_ONBOARDING_RETURN_URL_FAILURE","getTabs","processTabs","disallowedTabs","hasValidListingFieldsInExtendedData","isValidField","fieldConfig","fieldData","enumOptions","saveConfig","schemaOptionKeys","o","option","isRequired","savedListingField","SCHEMA_TYPE_ENUM","optionData","SCHEMA_TYPE_MULTI_ENUM","Array","isArray","every","SCHEMA_TYPE_TEXT","SCHEMA_TYPE_LONG","Number","isInteger","SCHEMA_TYPE_BOOLEAN","savedOptions","isValid","tabsActive","isNew","tabs","acc","previousTabIndex","t","validTab","hasListingType","prevTabComletedInNewFlow","tabCompleted","deliveryOptionPicked","createReturnURL","returnURLType","rootURL","pathParams","path","getStripeAccountData","stripeAccount","stripeAccountData","getBankAccountLast4Digits","external_accounts","last4","hasRequirements","requirementType","requirements","RedirectToStripe","redirectFn","existingListingType","validListingTypes","hasOnlyOneListingType","EditListingWizard","Component","constructor","super","this","hasScrolledToTab","draftId","showPayoutDetails","bind","handlePayoutModalClose","componentDidMount","stripeOnboardingReturnURL","shouldScroll","_currentUser$stripeAc","onPublishListingDraft","currentUser","isInquiryProcess","INQUIRY_PROCESS_NAME","isPayoutDetailsRequired","requirePayoutDetails","stripeConnected","stripeRequirementsMissing","_currentListing$attri","_currentListing$attri2","_this$state$selectedL","_currentListing$attri3","_currentListing$attri4","viewport","payoutDetailsSaveInProgress","payoutDetailsSaved","onPayoutDetailsChange","onGetStripeConnectAccountLink","getAccountLinkInProgress","createStripeAccountError","updateStripeAccountError","fetchStripeAccountError","stripeAccountFetched","stripeAccountError","stripeAccountLinkError","selectedTab","rootClasses","isPriceDisabled","displayPrice","processName","process","hasListingTypeSelected","isBookingProcess","tabsForBookingProcess","displayLocation","isPurchaseProcess","tabsForPurchaseProcess","isDeliveryDisabled","tabsForInquiryProcess","locationMaybe","priceMaybe","tabsStatus","NamedRedirect","currentTabIndex","indexOf","nearestActiveTab","reverse","width","hasViewport","hasHorizontalTabLayout","scrollToTab","tabPrefix","tabId","el","document","querySelector","scrollIntoView","block","behavior","tabLink","formDisabled","ensuredCurrentUser","ensureCurrentUser","currentUserLoaded","marketplaceRootURL","successURL","failureURL","accountId","requirementsMissing","savedCountry","country","handleGetStripeConnectAccountLink","getLinkFn","commonParams","url","href","err","error","handleGetStripeConnectAccountLinkFn","returnedAbnormallyFromStripe","showVerificationNeeded","Tabs","tabsContainer","navRootClassName","nav","tabRootClassName","tabTranslations","tabLabelAndSubmit","processNameString","newOrEdit","labelKey","submitButtonKey","formatMessage","submitButton","tabLabel","tabLinkProps","selected","modalPayoutDetailsWrapper","modalTitle","modalMessage","StripeConnectAccountForm","stripeBankAccountLastDigits","onPayoutDetailsSubmit","StripeConnectAccountStatusBox","withViewport","useConfiguration","useRouteConfiguration","UUID","EditListingPageComponent","getOwnListing","getAccountLinkError","onRemoveListingImage","page","scrollingDisabled","submittedListingId","ensureOwnListing","currentListingState","isPastDraft","shouldRedirect","showForm","isPendingApproval","LISTING_STATE_PENDING_APPROVAL","listingSlug","createSlug","redirectProps","slug","variant","LISTING_PAGE_PENDING_APPROVAL_VARIANT","createListingDraftError","publishListingError","updateListingError","uploadImageError","setStockError","uploadedImages","uploadedImagesOrder","removedImageIds","addExceptionError","deleteExceptionError","disableForm","redirectToListing","uploadedImageIdsInOrder","currentListingImages","unattachedImages","allImages","pickImagesAndIds","imgs","img","imgId","imageId","imageIds","imageEntities","pickRenderableImages","Page","TopbarContainer","mobileRootClassName","desktopClassName","mobileClassName","parse","createListingDraftInProgress","loadingPageMsg","currentUserHasOrders","listingDraft","notificationCount","sendVerificationEmailError","EditListingPage","compose","withRouter","connect","createStripeAccountInProgress","stripeConnectAccount","user","listings","getMarketplaceEntities","isScrollingDisabled","dispatch","requestFetchAvailabilityExceptions","requestAddAvailabilityException","requestDeleteAvailabilityException","requestUpdateListing","requestCreateListingDraft","requestPublishListingDraft","requestImageUpload","componentId","disableScrolling","manageDisableScrolling","stripeAccountClearError","isUpdateCall","savePayoutDetails","getStripeConnectAccountLink","removeListingImage","injectIntl"],"sourceRoot":""}