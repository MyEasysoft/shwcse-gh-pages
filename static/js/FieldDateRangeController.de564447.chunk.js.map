{"version":3,"file":"static/js/FieldDateRangeController.de564447.chunk.js","mappings":"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","sources":["webpack://app/./src/components/FieldDateRangeController/DateRangeController.module.css?9eaf","components/FieldDateRangeController/DateRangeController.js","components/FieldDateRangeController/FieldDateRangeController.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"inputRoot\":\"DateRangeController_inputRoot__z9Rzl\",\"arrowIcon\":\"DateRangeController_arrowIcon__9BCd8\"};","import React, { Component } from 'react';\r\nimport { string } from 'prop-types';\r\nimport { DayPickerRangeController } from 'react-dates';\r\nimport classNames from 'classnames';\r\nimport moment from 'moment';\r\nimport { START_DATE } from '../../util/dates';\r\n\r\nimport { IconArrowHead } from '../../components';\r\nimport css from './DateRangeController.module.css';\r\n\r\nexport const HORIZONTAL_ORIENTATION = 'horizontal';\r\nexport const ANCHOR_LEFT = 'left';\r\n\r\n// IconArrowHead component might not be defined if exposed directly to the file.\r\n// This component is called before IconArrowHead component in components/index.js\r\nconst PrevIcon = props => (\r\n  <IconArrowHead {...props} direction=\"left\" rootClassName={css.arrowIcon} />\r\n);\r\nconst NextIcon = props => (\r\n  <IconArrowHead {...props} direction=\"right\" rootClassName={css.arrowIcon} />\r\n);\r\n\r\nconst defaultProps = {\r\n  startDateOffset: undefined,\r\n  endDateOffset: undefined,\r\n\r\n  // calendar presentation and interaction related props\r\n\r\n  orientation: HORIZONTAL_ORIENTATION,\r\n  verticalHeight: undefined,\r\n  withPortal: false,\r\n  isRTL: false,\r\n  initialVisibleMonth: null,\r\n  // This gets default value at FieldDateRangeController\r\n  firstDayOfWeek: 0,\r\n  numberOfMonths: 1,\r\n  daySize: 38,\r\n  keepOpenOnDateSelect: false,\r\n  renderCalendarInfo: null,\r\n  hideKeyboardShortcutsPanel: true,\r\n\r\n  // navigation related props\r\n  navPrev: <PrevIcon />,\r\n  navNext: <NextIcon />,\r\n  onPrevMonthClick() {},\r\n  onNextMonthClick() {},\r\n  transitionDuration: 200, // milliseconds between next month changes etc.\r\n\r\n  renderCalendarDay: undefined, // If undefined, renders react-dates/lib/components/CalendarDay\r\n  // day presentation and interaction related props\r\n  renderDayContents: day => {\r\n    return <span className=\"renderedDay\">{day.format('D')}</span>;\r\n  },\r\n  minimumNights: 0,\r\n  enableOutsideDays: false,\r\n  isDayBlocked: () => false,\r\n\r\n  // This gets default value at FieldDateRangeController\r\n  isOutsideRange: day => false,\r\n  isDayHighlighted: () => {},\r\n\r\n  // Internationalization props\r\n  // Multilocale support can be achieved with displayFormat like moment.localeData.longDateFormat('L')\r\n  // https://momentjs.com/\r\n  // displayFormat: 'ddd, MMM D',\r\n  monthFormat: 'MMMM YYYY',\r\n  weekDayFormat: 'dd',\r\n};\r\n\r\nclass DateRangeController extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      startDate: props.value && props.value.startDate ? moment(props.value.startDate) : null,\r\n      endDate: props.value && props.value.endDate ? moment(props.value.endDate) : null,\r\n      focusedInput: START_DATE,\r\n    };\r\n\r\n    this.onDatesChange = this.onDatesChange.bind(this);\r\n    this.onFocusChange = this.onFocusChange.bind(this);\r\n    this.onReset = this.onReset.bind(this);\r\n  }\r\n\r\n  onDatesChange(values) {\r\n    const { startDate, endDate } = values;\r\n\r\n    const start = startDate ? startDate.toDate() : null;\r\n    const end = endDate ? endDate.toDate() : null;\r\n\r\n    this.setState({ startDate, endDate });\r\n\r\n    if (startDate && endDate) {\r\n      this.props.onChange({ startDate: start, endDate: end });\r\n    }\r\n  }\r\n\r\n  onFocusChange(focusedInput) {\r\n    this.setState({\r\n      // Force the focusedInput to always be truthy so that dates are always selectable\r\n      focusedInput: !focusedInput ? START_DATE : focusedInput,\r\n    });\r\n  }\r\n\r\n  onReset(startDate, endDate) {\r\n    if (startDate && endDate) {\r\n      this.setState({\r\n        startDate: moment(startDate),\r\n        endDate: moment(endDate),\r\n        focusedInput: START_DATE,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        startDate: null,\r\n        endDate: null,\r\n        focusedInput: START_DATE,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // Removing Final Form field props: name, value, onChange, onFocus, meta, children, render\r\n    const {\r\n      rootClassName,\r\n      className,\r\n      name,\r\n      value,\r\n      onChange,\r\n      onFocus,\r\n      meta,\r\n      children,\r\n      render,\r\n      ...controllerProps\r\n    } = this.props;\r\n\r\n    const classes = classNames(rootClassName || css.inputRoot, className);\r\n\r\n    const startDateFromState = this.state.startDate;\r\n    const endDateFromState = this.state.endDate;\r\n\r\n    const startDateFromForm = value && value.startDate ? moment(value.startDate) : null;\r\n    const endDateFromForm = value && value.endDate ? moment(value.endDate) : null;\r\n\r\n    const isSelected = startDateFromState && endDateFromState;\r\n\r\n    // Value given by Final Form reflects url params and is valid if both dates are set.\r\n    // If only one date is selected state should be used to get the correct date.\r\n    const startDate = isSelected ? startDateFromForm : startDateFromState;\r\n    const endDate = isSelected ? endDateFromForm : endDateFromState;\r\n\r\n    return (\r\n      <div className={classes}>\r\n        <DayPickerRangeController\r\n          {...controllerProps}\r\n          startDate={startDate}\r\n          endDate={endDate}\r\n          onDatesChange={this.onDatesChange}\r\n          focusedInput={this.state.focusedInput}\r\n          onFocusChange={this.onFocusChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDateRangeController.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  ...defaultProps,\r\n};\r\n\r\nDateRangeController.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n};\r\n\r\nexport default DateRangeController;\r\n","import React from 'react';\r\nimport { string } from 'prop-types';\r\nimport { isInclusivelyAfterDay, isInclusivelyBeforeDay } from 'react-dates';\r\nimport { Field } from 'react-final-form';\r\nimport moment from 'moment';\r\n\r\nimport { useConfiguration } from '../../context/configurationContext';\r\nimport DateRangeController from './DateRangeController';\r\n\r\nconst component = props => {\r\n  const { input, controllerRef, ...rest } = props;\r\n  const { type, checked, ...restOfInput } = input;\r\n  return <DateRangeController ref={controllerRef} {...restOfInput} {...rest} />;\r\n};\r\n\r\nconst FieldDateRangeController = props => {\r\n  const config = useConfiguration();\r\n  const { isOutsideRange, firstDayOfWeek, ...rest } = props;\r\n\r\n  // Outside range -><- today ... today+available days -1 -><- outside range\r\n  const defaultIsOutSideRange = day => {\r\n    const endOfRange = config.stripe?.dayCountAvailableForBooking - 1;\r\n    return (\r\n      !isInclusivelyAfterDay(day, moment()) ||\r\n      !isInclusivelyBeforeDay(day, moment().add(endOfRange, 'days'))\r\n    );\r\n  };\r\n  const defaultFirstDayOfWeek = config.localization.firstDayOfWeek;\r\n\r\n  return (\r\n    <Field\r\n      component={component}\r\n      isOutsideRange={isOutsideRange || defaultIsOutSideRange}\r\n      firstDayOfWeek={firstDayOfWeek || defaultFirstDayOfWeek}\r\n      {...rest}\r\n    />\r\n  );\r\n};\r\n\r\nFieldDateRangeController.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n};\r\n\r\nFieldDateRangeController.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n};\r\n\r\nexport default FieldDateRangeController;\r\n"],"names":["PrevIcon","props","React","IconArrowHead","Object","assign","direction","rootClassName","css","NextIcon","defaultProps","startDateOffset","undefined","endDateOffset","orientation","verticalHeight","withPortal","isRTL","initialVisibleMonth","firstDayOfWeek","numberOfMonths","daySize","keepOpenOnDateSelect","renderCalendarInfo","hideKeyboardShortcutsPanel","navPrev","navNext","onPrevMonthClick","onNextMonthClick","transitionDuration","renderCalendarDay","renderDayContents","day","className","format","minimumNights","enableOutsideDays","isDayBlocked","isOutsideRange","isDayHighlighted","monthFormat","weekDayFormat","DateRangeController","Component","constructor","super","this","state","startDate","value","moment","endDate","focusedInput","START_DATE","onDatesChange","bind","onFocusChange","onReset","values","start","toDate","end","setState","onChange","render","name","onFocus","meta","children","controllerProps","classes","classNames","startDateFromState","endDateFromState","startDateFromForm","endDateFromForm","isSelected","DayPickerRangeController","component","input","controllerRef","rest","type","checked","restOfInput","ref","FieldDateRangeController","config","useConfiguration","defaultFirstDayOfWeek","localization","Field","_config$stripe","endOfRange","stripe","dayCountAvailableForBooking","isInclusivelyAfterDay","isInclusivelyBeforeDay","add"],"sourceRoot":""}