{"version":3,"file":"SearchPageWithMap.6a5d350e.chunk.js","mappings":"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","sources":["containers/SearchPage/SearchMap/SearchMap.helpers.js","webpack://app/./src/containers/SearchPage/SearchMapPriceLabel/SearchMapPriceLabel.module.css?b7fd","containers/SearchPage/SearchMapPriceLabel/SearchMapPriceLabel.js","webpack://app/./src/containers/SearchPage/SearchMapInfoCard/SearchMapInfoCard.module.css?49b4","containers/SearchPage/SearchMapInfoCard/SearchMapInfoCard.js","webpack://app/./src/containers/SearchPage/SearchMapGroupLabel/SearchMapGroupLabel.module.css?0df2","containers/SearchPage/SearchMapGroupLabel/SearchMapGroupLabel.js","webpack://app/./src/containers/SearchPage/SearchMap/SearchMapWithMapbox.module.css?7d27","containers/SearchPage/SearchMap/SearchMapWithMapbox.js","webpack://app/./src/containers/SearchPage/SearchMap/SearchMapWithGoogleMaps.module.css?9aeb","containers/SearchPage/SearchMap/SearchMapWithGoogleMaps.js","webpack://app/./src/containers/SearchPage/SearchMap/SearchMap.module.css?748e","containers/SearchPage/SearchMap/ReusableMapContainer.js","containers/SearchPage/SearchMap/SearchMap.js","webpack://app/./src/containers/SearchPage/SearchFiltersSecondary/SearchFiltersSecondary.module.css?b09d","containers/SearchPage/SearchFiltersSecondary/SearchFiltersSecondary.js","webpack://app/./src/containers/SearchPage/SearchFiltersPrimary/SearchFiltersPrimary.module.css?388e","containers/SearchPage/SearchFiltersPrimary/SearchFiltersPrimary.js","containers/SearchPage/SearchPageWithMap.js","util/googleMaps.js"],"sourcesContent":["import groupBy from 'lodash/groupBy';\r\nimport reduce from 'lodash/reduce';\r\n\r\n/**\r\n * hasParentWithClassName searches class name from parent elements of given target\r\n * @param {Node} target - element whose parent might contain given class.\r\n * @param {String} className - class name string to be found\r\n */\r\nexport const hasParentWithClassName = (target, className) => {\r\n  return [...document.querySelectorAll(`.${className}`)].some(\r\n    el => el !== target && el.contains(target)\r\n  );\r\n};\r\n\r\n/**\r\n * Listings array grouped by geolocation\r\n * @param {Array} mapListings - listings to be grouped on map\r\n * @return {Object} - Object where coordinate pair is the key to different listings\r\n */\r\nexport const groupedByCoordinates = mapListings => {\r\n  return groupBy(mapListings, l => {\r\n    const g = l.attributes.geolocation;\r\n    return `${g.lat}-${g.lng}`;\r\n  });\r\n};\r\n\r\n/**\r\n * Listings (in location based object literal) is mapped to array\r\n * @param {Object} mapListings - listings to be grouped on map\r\n * @return {Array} - An array where items are arrays of listings\r\n *   (They are arrays containing all the listings in that location)\r\n */\r\nexport const reducedToArray = mapListings => {\r\n  return reduce(mapListings, (acc, listing) => acc.concat([listing]), []);\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SearchMapPriceLabel_root__N6UDB\",\"priceLabel\":\"SearchMapPriceLabel_priceLabel__P0HdP h5\",\"caret\":\"SearchMapPriceLabel_caret__GJlFH\",\"noPriceSetLabel\":\"SearchMapPriceLabel_noPriceSetLabel__+zQzB\",\"mapLabelActive\":\"SearchMapPriceLabel_mapLabelActive__CRu+Q\",\"caretShadow\":\"SearchMapPriceLabel_caretShadow__ibR+i\",\"caretActive\":\"SearchMapPriceLabel_caretActive__hmPUi\"};","import React, { Component } from 'react';\r\nimport { func, object, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport { injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport { propTypes } from '../../../util/types';\r\nimport { formatMoney } from '../../../util/currency';\r\nimport { ensureListing } from '../../../util/data';\r\n\r\nimport css from './SearchMapPriceLabel.module.css';\r\n\r\nclass SearchMapPriceLabel extends Component {\r\n  shouldComponentUpdate(nextProps) {\r\n    const currentListing = ensureListing(this.props.listing);\r\n    const nextListing = ensureListing(nextProps.listing);\r\n    const isSameListing = currentListing.id.uuid === nextListing.id.uuid;\r\n    const hasSamePrice = currentListing.attributes.price === nextListing.attributes.price;\r\n    const hasSameActiveStatus = this.props.isActive === nextProps.isActive;\r\n    const hasSameRefreshToken =\r\n      this.props.mapComponentRefreshToken === nextProps.mapComponentRefreshToken;\r\n\r\n    return !(isSameListing && hasSamePrice && hasSameActiveStatus && hasSameRefreshToken);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      className,\r\n      rootClassName,\r\n      intl,\r\n      listing,\r\n      onListingClicked,\r\n      isActive,\r\n      config,\r\n    } = this.props;\r\n    const currentListing = ensureListing(listing);\r\n    const { price } = currentListing.attributes;\r\n\r\n    // Create formatted price if currency is known or alternatively show just the unknown currency.\r\n    const formattedPrice =\r\n      price && price.currency === config.currency\r\n        ? formatMoney(intl, price)\r\n        : price?.currency\r\n        ? price.currency\r\n        : null;\r\n\r\n    const classes = classNames(rootClassName || css.root, className);\r\n    const priceLabelClasses = classNames(css.priceLabel, {\r\n      [css.mapLabelActive]: isActive,\r\n      [css.noPriceSetLabel]: !formattedPrice,\r\n    });\r\n    const caretClasses = classNames(css.caret, { [css.caretActive]: isActive });\r\n\r\n    return (\r\n      <button className={classes} onClick={() => onListingClicked(currentListing)}>\r\n        <div className={css.caretShadow} />\r\n        <div className={priceLabelClasses}>{formattedPrice}</div>\r\n        <div className={caretClasses} />\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nSearchMapPriceLabel.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n};\r\n\r\nSearchMapPriceLabel.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n  listing: propTypes.listing.isRequired,\r\n  onListingClicked: func.isRequired,\r\n  config: object.isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nexport default injectIntl(SearchMapPriceLabel);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SearchMapInfoCard_root__HissA\",\"anchor\":\"SearchMapInfoCard_anchor__DgYV9\",\"card\":\"SearchMapInfoCard_card__QMLp3 h5\",\"aspectratioWrapper\":\"SearchMapInfoCard_aspectratioWrapper__cXHHj\",\"rootForImage\":\"SearchMapInfoCard_rootForImage__NhEmK\",\"info\":\"SearchMapInfoCard_info__4qKxt\",\"price\":\"SearchMapInfoCard_price__Xu5l6\",\"name\":\"SearchMapInfoCard_name__QWwZw\",\"paginationInfo\":\"SearchMapInfoCard_paginationInfo__CAzYs\",\"paginationPage\":\"SearchMapInfoCard_paginationPage__Sn-gk textSmall\",\"paginationPrev\":\"SearchMapInfoCard_paginationPrev__Ox7Io\",\"paginationNext\":\"SearchMapInfoCard_paginationNext__AJoz9\",\"caretShadow\":\"SearchMapInfoCard_caretShadow__4NsLR\",\"caret\":\"SearchMapInfoCard_caret__SMMfK\",\"caretWithCarousel\":\"SearchMapInfoCard_caretWithCarousel__-6DSW\",\"borderRadiusInheritTop\":\"SearchMapInfoCard_borderRadiusInheritTop__oWoc-\",\"borderRadiusInheritBottom\":\"SearchMapInfoCard_borderRadiusInheritBottom__j4GYv\"};","import React, { useState } from 'react';\r\nimport { arrayOf, bool, func, object, string } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport classNames from 'classnames';\r\n\r\nimport { injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport { propTypes } from '../../../util/types';\r\nimport { formatMoney } from '../../../util/currency';\r\nimport { ensureListing } from '../../../util/data';\r\n\r\nimport { AspectRatioWrapper, ResponsiveImage } from '../../../components';\r\n\r\nimport css from './SearchMapInfoCard.module.css';\r\n\r\n// ListingCard is the listing info without overlayview or carousel controls\r\nconst ListingCard = props => {\r\n  const { className, clickHandler, intl, isInCarousel, listing, urlToListing, config } = props;\r\n\r\n  const { title, price } = listing.attributes;\r\n  const formattedPrice =\r\n    price && price.currency === config.currency\r\n      ? formatMoney(intl, price)\r\n      : price?.currency\r\n      ? price.currency\r\n      : null;\r\n  const firstImage = listing.images && listing.images.length > 0 ? listing.images[0] : null;\r\n\r\n  const {\r\n    aspectWidth = 1,\r\n    aspectHeight = 1,\r\n    variantPrefix = 'listing-card',\r\n  } = config.layout.listingImage;\r\n  const variants = firstImage\r\n    ? Object.keys(firstImage?.attributes?.variants).filter(k => k.startsWith(variantPrefix))\r\n    : [];\r\n\r\n  // listing card anchor needs sometimes inherited border radius.\r\n  const classes = classNames(\r\n    css.anchor,\r\n    css.borderRadiusInheritTop,\r\n    { [css.borderRadiusInheritBottom]: !isInCarousel },\r\n    className\r\n  );\r\n\r\n  return (\r\n    <a\r\n      alt={title}\r\n      className={classes}\r\n      href={urlToListing}\r\n      onClick={e => {\r\n        e.preventDefault();\r\n        // Use clickHandler from props to call internal router\r\n        clickHandler(listing);\r\n      }}\r\n    >\r\n      <div\r\n        className={classNames(css.card, css.borderRadiusInheritTop, {\r\n          [css.borderRadiusInheritBottom]: !isInCarousel,\r\n        })}\r\n      >\r\n        <AspectRatioWrapper\r\n          className={css.aspectRatioWrapper}\r\n          width={aspectWidth}\r\n          height={aspectHeight}\r\n        >\r\n          <ResponsiveImage\r\n            rootClassName={classNames(css.rootForImage, css.borderRadiusInheritTop)}\r\n            alt={title}\r\n            noImageMessage={intl.formatMessage({ id: 'SearchMapInfoCard.noImage' })}\r\n            image={firstImage}\r\n            variants={variants}\r\n            sizes=\"250px\"\r\n          />\r\n        </AspectRatioWrapper>\r\n        <div className={classNames(css.info, { [css.borderRadiusInheritBottom]: !isInCarousel })}>\r\n          <div className={classNames(css.price, { [css.noPriceSetLabel]: !formattedPrice })}>\r\n            {formattedPrice}\r\n          </div>\r\n          <div className={css.name}>{title}</div>\r\n        </div>\r\n      </div>\r\n    </a>\r\n  );\r\n};\r\n\r\nListingCard.defaultProps = {\r\n  className: null,\r\n};\r\n\r\nListingCard.propTypes = {\r\n  className: string,\r\n  listing: propTypes.listing.isRequired,\r\n  clickHandler: func.isRequired,\r\n  intl: intlShape.isRequired,\r\n  isInCarousel: bool.isRequired,\r\n};\r\n\r\nconst SearchMapInfoCard = props => {\r\n  const [currentListingIndex, setCurrentListingIndex] = useState(0);\r\n  const {\r\n    className,\r\n    rootClassName,\r\n    intl,\r\n    listings,\r\n    createURLToListing,\r\n    onListingInfoCardClicked,\r\n    config,\r\n  } = props;\r\n  const currentListing = ensureListing(listings[currentListingIndex]);\r\n  const hasCarousel = listings.length > 1;\r\n\r\n  const classes = classNames(rootClassName || css.root, className);\r\n  const caretClass = classNames(css.caret, { [css.caretWithCarousel]: hasCarousel });\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <div className={css.caretShadow} />\r\n      <ListingCard\r\n        clickHandler={onListingInfoCardClicked}\r\n        urlToListing={createURLToListing(currentListing)}\r\n        listing={currentListing}\r\n        intl={intl}\r\n        isInCarousel={hasCarousel}\r\n        config={config}\r\n      />\r\n      {hasCarousel ? (\r\n        <div className={classNames(css.paginationInfo, css.borderRadiusInheritBottom)}>\r\n          <button\r\n            className={css.paginationPrev}\r\n            onClick={e => {\r\n              e.preventDefault();\r\n              e.stopPropagation();\r\n              setCurrentListingIndex(\r\n                prevListingIndex => (prevListingIndex + listings.length - 1) % listings.length\r\n              );\r\n            }}\r\n          />\r\n          <div className={css.paginationPage}>\r\n            {`${currentListingIndex + 1}/${listings.length}`}\r\n          </div>\r\n          <button\r\n            className={css.paginationNext}\r\n            onClick={e => {\r\n              e.preventDefault();\r\n              e.stopPropagation();\r\n              setCurrentListingIndex(\r\n                prevListingIndex => (prevListingIndex + listings.length + 1) % listings.length\r\n              );\r\n            }}\r\n          />\r\n        </div>\r\n      ) : null}\r\n      <div className={caretClass} />\r\n    </div>\r\n  );\r\n};\r\n\r\nSearchMapInfoCard.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n};\r\n\r\nSearchMapInfoCard.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n  listings: arrayOf(propTypes.listing).isRequired,\r\n  onListingInfoCardClicked: func.isRequired,\r\n  createURLToListing: func.isRequired,\r\n  config: object.isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nexport default compose(injectIntl)(SearchMapInfoCard);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SearchMapGroupLabel_root__PVedw\",\"details\":\"SearchMapGroupLabel_details__0Sei6 p\",\"caret\":\"SearchMapGroupLabel_caret__piFaj\",\"detailsActive\":\"SearchMapGroupLabel_detailsActive__wXeih\",\"caretShadow\":\"SearchMapGroupLabel_caretShadow__oYFSs\",\"caretActive\":\"SearchMapGroupLabel_caretActive__s5fmy\"};","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport { propTypes } from '../../../util/types';\r\n\r\nimport css from './SearchMapGroupLabel.module.css';\r\n\r\nclass SearchMapGroupLabel extends Component {\r\n  shouldComponentUpdate(nextProps) {\r\n    const hasSameAmountOfListings = nextProps.listings.length === this.props.listings.length;\r\n    const hasSameActiveStatus = this.props.isActive === nextProps.isActive;\r\n    const hasSameRefreshToken =\r\n      this.props.mapComponentRefreshToken === nextProps.mapComponentRefreshToken;\r\n\r\n    return !(hasSameAmountOfListings && hasSameActiveStatus && hasSameRefreshToken);\r\n  }\r\n\r\n  render() {\r\n    const { className, rootClassName, listings, onListingClicked, isActive } = this.props;\r\n    const classes = classNames(rootClassName || css.root, className);\r\n    const countLabelClasses = classNames(css.details, { [css.detailsActive]: isActive });\r\n    const caretClasses = classNames(css.caret, { [css.caretActive]: isActive });\r\n\r\n    return (\r\n      <button className={classes} onClick={() => onListingClicked(listings)}>\r\n        <div className={css.caretShadow} />\r\n        <div className={countLabelClasses}>{listings.length}</div>\r\n        <div className={caretClasses} />\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nSearchMapGroupLabel.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n};\r\n\r\nconst { arrayOf, func, string } = PropTypes;\r\n\r\nSearchMapGroupLabel.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n  listings: arrayOf(propTypes.listing).isRequired,\r\n  onListingClicked: func.isRequired,\r\n};\r\n\r\nexport default SearchMapGroupLabel;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"fullArea\":\"SearchMapWithMapbox_fullArea__7PtpL\",\"activeLabel\":\"SearchMapWithMapbox_activeLabel__RIrWc\",\"labelContainer\":\"SearchMapWithMapbox_labelContainer__9cc+3\",\"infoCardContainer\":\"SearchMapWithMapbox_infoCardContainer__Z-7qO\"};","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { arrayOf, func, node, number, object, shape, string } from 'prop-types';\r\nimport differenceBy from 'lodash/differenceBy';\r\nimport isEqual from 'lodash/isEqual';\r\nimport classNames from 'classnames';\r\n\r\nimport { types as sdkTypes } from '../../../util/sdkLoader';\r\nimport { parse } from '../../../util/urlHelpers';\r\nimport { propTypes } from '../../../util/types';\r\nimport { ensureListing } from '../../../util/data';\r\nimport { sdkBoundsToFixedCoordinates, hasSameSDKBounds } from '../../../util/maps';\r\n\r\nimport SearchMapPriceLabel from '../SearchMapPriceLabel/SearchMapPriceLabel';\r\nimport SearchMapInfoCard from '../SearchMapInfoCard/SearchMapInfoCard';\r\nimport SearchMapGroupLabel from '../SearchMapGroupLabel/SearchMapGroupLabel';\r\nimport { groupedByCoordinates, reducedToArray } from './SearchMap.helpers';\r\nimport css from './SearchMapWithMapbox.module.css';\r\n\r\nexport const LABEL_HANDLE = 'SearchMapLabel';\r\nexport const INFO_CARD_HANDLE = 'SearchMapInfoCard';\r\nexport const SOURCE_AUTOCOMPLETE = 'autocomplete';\r\nconst BOUNDS_FIXED_PRECISION = 8;\r\n\r\nconst { LatLng: SDKLatLng, LatLngBounds: SDKLatLngBounds } = sdkTypes;\r\n\r\n/**\r\n * Fit part of map (descriped with bounds) to visible map-viewport\r\n *\r\n * @param {Object} map - map that needs to be centered with given bounds\r\n * @param {SDK.LatLngBounds} bounds - the area that needs to be visible when map loads.\r\n */\r\nexport const fitMapToBounds = (map, bounds, options) => {\r\n  const { padding = 0, isAutocompleteSearch = false } = options;\r\n\r\n  // map bounds as string literal for google.maps\r\n  const mapBounds = sdkBoundsToMapboxBounds(bounds);\r\n  const paddingOptionMaybe = padding == null ? { padding } : {};\r\n  const eventData = isAutocompleteSearch ? { searchSource: SOURCE_AUTOCOMPLETE } : {};\r\n\r\n  // If bounds are given, use it (defaults to center & zoom).\r\n  if (map && mapBounds) {\r\n    map.fitBounds(mapBounds, { ...paddingOptionMaybe, linear: true, duration: 0 }, eventData);\r\n  }\r\n};\r\n\r\n/**\r\n * Convert Mapbox formatted LatLng object to Sharetribe SDK's LatLng coordinate format\r\n * Longitudes > 180 and < -180 are converted to the correct corresponding value\r\n * between -180 and 180.\r\n *\r\n * @param {LngLat} mapboxLngLat - Mapbox LngLat\r\n *\r\n * @return {SDKLatLng} - Converted latLng coordinate\r\n */\r\nexport const mapboxLngLatToSDKLatLng = lngLat => {\r\n  const mapboxLng = lngLat.lng;\r\n\r\n  // For bounding boxes that overlap the antimeridian Mapbox sometimes gives\r\n  // longitude values outside -180 and 180 degrees.Those values are converted\r\n  // so that longitude is always between -180 and 180.\r\n  const lng = mapboxLng > 180 ? mapboxLng - 360 : mapboxLng < -180 ? mapboxLng + 360 : mapboxLng;\r\n\r\n  return new SDKLatLng(lngLat.lat, lng);\r\n};\r\n\r\n/**\r\n * Convert Mapbox formatted bounds object to Sharetribe SDK's bounds format\r\n *\r\n * @param {LngLatBounds} mapboxBounds - Mapbox LngLatBounds\r\n *\r\n * @return {SDKLatLngBounds} - Converted bounds\r\n */\r\nexport const mapboxBoundsToSDKBounds = mapboxBounds => {\r\n  if (!mapboxBounds) {\r\n    return null;\r\n  }\r\n\r\n  const ne = mapboxBounds.getNorthEast();\r\n  const sw = mapboxBounds.getSouthWest();\r\n  return new SDKLatLngBounds(mapboxLngLatToSDKLatLng(ne), mapboxLngLatToSDKLatLng(sw));\r\n};\r\n\r\n/**\r\n * Convert sdk bounds that overlap the antimeridian into values that can\r\n * be passed to Mapbox. This is achieved by converting the SW longitude into\r\n * a value less than -180 that flows over the antimeridian.\r\n *\r\n * @param {SDKLatLng} bounds - bounds passed to the map\r\n *\r\n * @return {LngLatBoundsLike} a bounding box that is compatible with Mapbox\r\n */\r\nconst sdkBoundsToMapboxBounds = bounds => {\r\n  if (!bounds) {\r\n    return null;\r\n  }\r\n  const { ne, sw } = bounds;\r\n\r\n  // if sw lng is > ne lng => the bounds overlap antimeridian\r\n  // => flip the nw lng to the negative side so that the value\r\n  // is less than -180\r\n  const swLng = sw.lng > ne.lng ? -360 + sw.lng : sw.lng;\r\n\r\n  return [[swLng, sw.lat], [ne.lng, ne.lat]];\r\n};\r\n\r\n/**\r\n * Return map bounds as SDKBounds\r\n *\r\n * @param {Mapbox} map - Mapbox map from where the bounds are asked\r\n *\r\n * @return {SDKLatLngBounds} - Converted bounds of given map\r\n */\r\nexport const getMapBounds = map => mapboxBoundsToSDKBounds(map.getBounds());\r\n\r\n/**\r\n * Return map center as SDKLatLng\r\n *\r\n * @param {Mapbox} map - Mapbox map from where the center is asked\r\n *\r\n * @return {SDKLatLng} - Converted center of given map\r\n */\r\nexport const getMapCenter = map => mapboxLngLatToSDKLatLng(map.getCenter());\r\n\r\n/**\r\n * Check if map library is loaded\r\n */\r\nexport const isMapsLibLoaded = () =>\r\n  typeof window !== 'undefined' && window.mapboxgl && window.mapboxgl;\r\n\r\n/**\r\n * Return price labels grouped by listing locations.\r\n * This is a helper function for SearchMapWithMapbox component.\r\n */\r\nconst priceLabelsInLocations = (\r\n  listings,\r\n  activeListingId,\r\n  infoCardOpen,\r\n  onListingClicked,\r\n  mapComponentRefreshToken\r\n) => {\r\n  const listingArraysInLocations = reducedToArray(groupedByCoordinates(listings));\r\n  const priceLabels = listingArraysInLocations.reverse().map(listingArr => {\r\n    const isActive = activeListingId\r\n      ? !!listingArr.find(l => activeListingId.uuid === l.id.uuid)\r\n      : false;\r\n\r\n    // If location contains only one listing, print price label\r\n    if (listingArr.length === 1) {\r\n      const listing = listingArr[0];\r\n      const infoCardOpenIds = Array.isArray(infoCardOpen)\r\n        ? infoCardOpen.map(l => l.id.uuid)\r\n        : infoCardOpen\r\n        ? [infoCardOpen.id.uuid]\r\n        : [];\r\n\r\n      // if the listing is open, don't print price label\r\n      if (infoCardOpen != null && infoCardOpenIds.includes(listing.id.uuid)) {\r\n        return null;\r\n      }\r\n\r\n      // Explicit type change to object literal for Google OverlayViews (geolocation is SDK type)\r\n      const { geolocation } = listing.attributes;\r\n\r\n      const key = listing.id.uuid;\r\n      return {\r\n        markerId: `price_${key}`,\r\n        location: geolocation,\r\n        type: 'price',\r\n        componentProps: {\r\n          key,\r\n          isActive,\r\n          className: LABEL_HANDLE,\r\n          listing,\r\n          onListingClicked,\r\n          mapComponentRefreshToken,\r\n        },\r\n      };\r\n    }\r\n\r\n    // Explicit type change to object literal for Google OverlayViews (geolocation is SDK type)\r\n    const firstListing = ensureListing(listingArr[0]);\r\n    const geolocation = firstListing.attributes.geolocation;\r\n\r\n    const key = listingArr[0].id.uuid;\r\n    return {\r\n      markerId: `group_${key}`,\r\n      location: geolocation,\r\n      type: 'group',\r\n      componentProps: {\r\n        key,\r\n        isActive,\r\n        className: LABEL_HANDLE,\r\n        listings: listingArr,\r\n        onListingClicked,\r\n        mapComponentRefreshToken,\r\n      },\r\n    };\r\n  });\r\n  return priceLabels;\r\n};\r\n\r\n/**\r\n * Return info card. This is a helper function for SearchMapWithMapbox component.\r\n */\r\nconst infoCardComponent = (\r\n  infoCardOpen,\r\n  onListingInfoCardClicked,\r\n  createURLToListing,\r\n  mapComponentRefreshToken\r\n) => {\r\n  const listingsArray = Array.isArray(infoCardOpen) ? infoCardOpen : [infoCardOpen];\r\n\r\n  if (!infoCardOpen) {\r\n    return null;\r\n  }\r\n\r\n  const firstListing = ensureListing(listingsArray[0]);\r\n  const key = firstListing.id.uuid;\r\n  const geolocation = firstListing.attributes.geolocation;\r\n\r\n  return {\r\n    markerId: `infoCard_${key}`,\r\n    location: geolocation,\r\n    componentProps: {\r\n      key,\r\n      mapComponentRefreshToken,\r\n      className: INFO_CARD_HANDLE,\r\n      listings: listingsArray,\r\n      onListingInfoCardClicked,\r\n      createURLToListing,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * SearchMap component using Mapbox as map provider\r\n */\r\nclass SearchMapWithMapbox extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.map = typeof window !== 'undefined' && window.mapboxMap ? window.mapboxMap : null;\r\n    this.currentMarkers = [];\r\n    this.currentInfoCard = null;\r\n    this.state = { mapContainer: null, isMapReady: false };\r\n    this.viewportBounds = null;\r\n\r\n    this.onMount = this.onMount.bind(this);\r\n    this.onMoveend = this.onMoveend.bind(this);\r\n    this.initializeMap = this.initializeMap.bind(this);\r\n    this.handleDoubleClickOnInfoCard = this.handleDoubleClickOnInfoCard.bind(this);\r\n    this.handleMobilePinchZoom = this.handleMobilePinchZoom.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (!isEqual(prevProps.location, this.props.location)) {\r\n      // If no mapSearch url parameter is given, this is original location search\r\n      const { mapSearch } = parse(this.props.location.search, {\r\n        latlng: ['origin'],\r\n        latlngBounds: ['bounds'],\r\n      });\r\n      if (!mapSearch) {\r\n        this.viewportBounds = null;\r\n      }\r\n    }\r\n\r\n    if (this.map) {\r\n      const currentBounds = getMapBounds(this.map);\r\n\r\n      // Do not call fitMapToBounds if bounds are the same.\r\n      // Our bounds are viewport bounds, and fitBounds will try to add margins around those bounds\r\n      // that would result to zoom-loop (bound change -> fitmap -> bounds change -> ...)\r\n      if (!isEqual(this.props.bounds, currentBounds) && !this.viewportBounds) {\r\n        fitMapToBounds(this.map, this.props.bounds, { padding: 0, isAutocompleteSearch: true });\r\n      }\r\n    }\r\n\r\n    if (!this.map && this.state.mapContainer) {\r\n      this.initializeMap();\r\n\r\n      /* Notify parent component that Mapbox map is loaded */\r\n      this.props.onMapLoad(this.map);\r\n    } else if (prevProps.mapComponentRefreshToken !== this.props.mapComponentRefreshToken) {\r\n      /* Notify parent component that Mapbox map is loaded */\r\n      this.props.onMapLoad(this.map);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.currentInfoCard.markerContainer.removeEventListener(\r\n      'dblclick',\r\n      this.handleDoubleClickOnInfoCard\r\n    );\r\n    document.removeEventListener('gesturestart', this.handleMobilePinchZoom, false);\r\n    document.removeEventListener('gesturechange', this.handleMobilePinchZoom, false);\r\n    document.removeEventListener('gestureend', this.handleMobilePinchZoom, false);\r\n  }\r\n\r\n  onMount(element) {\r\n    // This prevents pinch zoom to affect whole page on mobile Safari.\r\n    document.addEventListener('gesturestart', this.handleMobilePinchZoom, false);\r\n    document.addEventListener('gesturechange', this.handleMobilePinchZoom, false);\r\n    document.addEventListener('gestureend', this.handleMobilePinchZoom, false);\r\n\r\n    this.setState({ mapContainer: element });\r\n  }\r\n\r\n  onMoveend(e) {\r\n    if (this.map) {\r\n      // If reusableMapHiddenHandle is given and parent element has that class,\r\n      // we don't listen moveend events.\r\n      // This fixes mobile Chrome bug that sends map events to invisible map components.\r\n      const isHiddenByReusableMap =\r\n        this.props.reusableMapHiddenHandle &&\r\n        this.state.mapContainer.parentElement.classList.contains(\r\n          this.props.reusableMapHiddenHandle\r\n        );\r\n      if (!isHiddenByReusableMap) {\r\n        const viewportMapBounds = getMapBounds(this.map);\r\n        const viewportMapCenter = getMapCenter(this.map);\r\n        const viewportBounds = sdkBoundsToFixedCoordinates(\r\n          viewportMapBounds,\r\n          BOUNDS_FIXED_PRECISION\r\n        );\r\n\r\n        // ViewportBounds from (previous) rendering differ from viewportBounds currently set to map\r\n        // I.e. user has changed the map somehow: moved, panned, zoomed, resized\r\n        const viewportBoundsChanged =\r\n          this.viewportBounds && !hasSameSDKBounds(this.viewportBounds, viewportBounds);\r\n\r\n        this.props.onMapMoveEnd(viewportBoundsChanged, { viewportBounds, viewportMapCenter });\r\n        this.viewportBounds = viewportBounds;\r\n      }\r\n    }\r\n  }\r\n\r\n  initializeMap() {\r\n    const { offsetHeight, offsetWidth } = this.state.mapContainer;\r\n    const hasDimensions = offsetHeight > 0 && offsetWidth > 0;\r\n    if (hasDimensions) {\r\n      this.map = new window.mapboxgl.Map({\r\n        container: this.state.mapContainer,\r\n        style: 'mapbox://styles/mapbox/streets-v10',\r\n        scrollZoom: false,\r\n      });\r\n      window.mapboxMap = this.map;\r\n\r\n      var nav = new window.mapboxgl.NavigationControl({ showCompass: false });\r\n      this.map.addControl(nav, 'top-left');\r\n\r\n      this.map.on('moveend', this.onMoveend);\r\n\r\n      // Introduce rerendering after map is ready (to include labels),\r\n      // but keep the map out of state life cycle.\r\n      this.setState({ isMapReady: true });\r\n    }\r\n  }\r\n\r\n  handleMobilePinchZoom(e) {\r\n    e.preventDefault();\r\n    // A hack to prevent pinch zoom gesture in mobile Safari\r\n    // Otherwise, pinch zoom would zoom both map and the document.\r\n    document.body.style.zoom = 0.99;\r\n  }\r\n\r\n  handleDoubleClickOnInfoCard(e) {\r\n    e.stopPropagation();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      className,\r\n      listings,\r\n      activeListingId,\r\n      infoCardOpen,\r\n      onListingClicked,\r\n      onListingInfoCardClicked,\r\n      createURLToListing,\r\n      mapComponentRefreshToken,\r\n      config,\r\n    } = this.props;\r\n\r\n    if (this.map) {\r\n      // Create markers out of price labels and grouped labels\r\n      const labels = priceLabelsInLocations(\r\n        listings,\r\n        activeListingId,\r\n        infoCardOpen,\r\n        onListingClicked,\r\n        mapComponentRefreshToken\r\n      );\r\n\r\n      // If map has moved or info card opened, unnecessary markers need to be removed\r\n      const removableMarkers = differenceBy(this.currentMarkers, labels, 'markerId');\r\n      removableMarkers.forEach(rm => rm.marker.remove());\r\n\r\n      // Helper function to create markers to given container\r\n      const creShwcsearker = (data, markerContainer) =>\r\n        new window.mapboxgl.Marker(markerContainer, { anchor: 'bottom' })\r\n          .setLngLat([data.location.lng, data.location.lat])\r\n          .addTo(this.map);\r\n\r\n      // SearchMapPriceLabel and SearchMapGroupLabel:\r\n      // create a new marker or use existing one if markerId is among previously rendered markers\r\n      this.currentMarkers = labels\r\n        .filter(v => v != null)\r\n        .map(m => {\r\n          const existingMarkerId = this.currentMarkers.findIndex(\r\n            marker => m.markerId === marker.markerId && marker.marker\r\n          );\r\n\r\n          if (existingMarkerId >= 0) {\r\n            const { marker, markerContainer, ...rest } = this.currentMarkers[existingMarkerId];\r\n            return { ...rest, ...m, markerContainer, marker };\r\n          } else {\r\n            const markerContainer = document.createElement('div');\r\n            markerContainer.setAttribute('id', m.markerId);\r\n            markerContainer.classList.add(css.labelContainer);\r\n            const marker = creShwcsearker(m, markerContainer);\r\n            return { ...m, markerContainer, marker };\r\n          }\r\n        });\r\n\r\n      /* Create marker for SearchMapInfoCard component */\r\n      if (infoCardOpen) {\r\n        const infoCard = infoCardComponent(\r\n          infoCardOpen,\r\n          onListingInfoCardClicked,\r\n          createURLToListing,\r\n          mapComponentRefreshToken\r\n        );\r\n\r\n        // marker container and its styles\r\n        const infoCardContainer = document.createElement('div');\r\n        infoCardContainer.setAttribute('id', infoCard.markerId);\r\n        infoCardContainer.classList.add(css.infoCardContainer);\r\n        infoCardContainer.addEventListener('dblclick', this.handleDoubleClickOnInfoCard, false);\r\n\r\n        this.currentInfoCard = {\r\n          ...infoCard,\r\n          markerContainer: infoCardContainer,\r\n          marker: infoCard ? creShwcsearker(infoCard, infoCardContainer) : null,\r\n        };\r\n      } else {\r\n        if (this.currentInfoCard) {\r\n          this.currentInfoCard.markerContainer.removeEventListener(\r\n            'dblclick',\r\n            this.handleDoubleClickOnInfoCard\r\n          );\r\n        }\r\n        this.currentInfoCard = null;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div\r\n        id={id}\r\n        ref={this.onMount}\r\n        className={classNames(className, css.fullArea)}\r\n        onClick={this.props.onClick}\r\n      >\r\n        {this.currentMarkers.map(m => {\r\n          // Remove existing activeLabel classes and add it only to the correct container\r\n          m.markerContainer.classList.remove(css.activeLabel);\r\n          if (activeListingId && activeListingId.uuid === m.componentProps.key) {\r\n            m.markerContainer.classList.add(css.activeLabel);\r\n          }\r\n\r\n          const isMapReadyForMarkers = this.map && m.markerContainer;\r\n          // DOM node that should be used as portal's root\r\n          const portalDOMContainer = isMapReadyForMarkers\r\n            ? document.getElementById(m.markerContainer.id)\r\n            : null;\r\n\r\n          // Create component portals for correct marker containers\r\n          if (isMapReadyForMarkers && m.type === 'price') {\r\n            return ReactDOM.createPortal(\r\n              <SearchMapPriceLabel {...m.componentProps} config={config} />,\r\n              portalDOMContainer\r\n            );\r\n          } else if (isMapReadyForMarkers && m.type === 'group') {\r\n            return ReactDOM.createPortal(\r\n              <SearchMapGroupLabel {...m.componentProps} />,\r\n              portalDOMContainer\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n        {this.state.mapContainer && this.currentInfoCard\r\n          ? ReactDOM.createPortal(\r\n              <SearchMapInfoCard {...this.currentInfoCard.componentProps} config={config} />,\r\n              this.currentInfoCard.markerContainer\r\n            )\r\n          : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSearchMapWithMapbox.defaultProps = {\r\n  id: 'map',\r\n  center: null,\r\n  priceLabels: [],\r\n  infoCard: null,\r\n  zoom: 11,\r\n  reusableMapHiddenHandle: null,\r\n};\r\n\r\nSearchMapWithMapbox.propTypes = {\r\n  id: string,\r\n  center: propTypes.latlng,\r\n  location: shape({\r\n    search: string.isRequired,\r\n  }).isRequired,\r\n  priceLabels: arrayOf(node),\r\n  infoCard: node,\r\n  onClick: func.isRequired,\r\n  onMapMoveEnd: func.isRequired,\r\n  onMapLoad: func.isRequired,\r\n  zoom: number,\r\n  reusableMapHiddenHandle: string,\r\n  config: object.isRequired,\r\n};\r\n\r\nexport default SearchMapWithMapbox;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"fullArea\":\"SearchMapWithGoogleMaps_fullArea__91wrm\",\"activeLabel\":\"SearchMapWithGoogleMaps_activeLabel__MLyXH\",\"labelContainer\":\"SearchMapWithGoogleMaps_labelContainer__3HnFL\"};","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport invariant from 'invariant';\r\nimport { arrayOf, func, number, object, oneOfType, shape, string } from 'prop-types';\r\nimport isEqual from 'lodash/isEqual';\r\nimport classNames from 'classnames';\r\n\r\nimport { types as sdkTypes } from '../../../util/sdkLoader';\r\nimport { parse } from '../../../util/urlHelpers';\r\nimport { propTypes } from '../../../util/types';\r\nimport { ensureListing } from '../../../util/data';\r\nimport { sdkBoundsToFixedCoordinates, hasSameSDKBounds } from '../../../util/maps';\r\nimport { getOffsetOverride, getLayoutStyles } from '../../../util/googleMaps';\r\n\r\nimport SearchMapPriceLabel from '../SearchMapPriceLabel/SearchMapPriceLabel';\r\nimport SearchMapInfoCard from '../SearchMapInfoCard/SearchMapInfoCard';\r\nimport SearchMapGroupLabel from '../SearchMapGroupLabel/SearchMapGroupLabel';\r\nimport { groupedByCoordinates, reducedToArray } from './SearchMap.helpers';\r\nimport css from './SearchMapWithGoogleMaps.module.css';\r\n\r\nexport const LABEL_HANDLE = 'SearchMapLabel';\r\nexport const INFO_CARD_HANDLE = 'SearchMapInfoCard';\r\nconst BOUNDS_FIXED_PRECISION = 8;\r\n\r\n// Panes on Google Maps specify the stacking order for different layers on the map.\r\n// https://developers.google.com/maps/documentation/javascript/customoverlays#intitialize\r\n//\r\n// Google Maps uses 5 different panes:\r\n// 'mapPane', 'overlayLayer', 'markerLayer', 'overlayMouseTarget', 'floatPane'\r\n// We only need the last 2:\r\n// - 'overlayMouseTarget': for the SearchMapPriceLabelWithOverlay & SearchMapGroupLabelWithOverlay.\r\n// - 'floatPane': to render InfoCardComponent on top of price and group labels.\r\nconst OVERLAY_MOUSE_TARGET = 'overlayMouseTarget'; // Stacking order: 4\r\nconst FLOAT_PANE = 'floatPane'; // Stacking order: 5\r\n\r\nconst { LatLng: SDKLatLng, LatLngBounds: SDKLatLngBounds } = sdkTypes;\r\n\r\n/**\r\n * Fit part of map (descriped with bounds) to visible map-viewport\r\n *\r\n * @param {Object} map - map that needs to be centered with given bounds\r\n * @param {SDK.LatLngBounds} bounds - the area that needs to be visible when map loads.\r\n */\r\nexport const fitMapToBounds = (map, bounds, options) => {\r\n  const { padding } = options;\r\n\r\n  const { ne, sw } = bounds || {};\r\n  // map bounds as string literal for google.maps\r\n  const mapBounds = bounds ? { north: ne.lat, east: ne.lng, south: sw.lat, west: sw.lng } : null;\r\n\r\n  // If bounds are given, use it (defaults to center & zoom).\r\n  if (map && mapBounds) {\r\n    if (padding == null) {\r\n      map.fitBounds(mapBounds);\r\n    } else {\r\n      map.fitBounds(mapBounds, padding);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Convert Google formatted LatLng object to Sharetribe SDK's LatLng coordinate format\r\n *\r\n * @param {LatLng} googleLatLng - Google Maps LatLng\r\n *\r\n * @return {SDKLatLng} - Converted latLng coordinate\r\n */\r\nexport const googleLatLngToSDKLatLng = googleLatLng => {\r\n  if (!googleLatLng) {\r\n    return null;\r\n  }\r\n  return new SDKLatLng(googleLatLng.lat(), googleLatLng.lng());\r\n};\r\n\r\n/**\r\n * Convert Google formatted bounds object to Sharetribe SDK's bounds format\r\n *\r\n * @param {LatLngBounds} googleBounds - Google Maps LatLngBounds\r\n *\r\n * @return {SDKLatLngBounds} - Converted bounds\r\n */\r\nexport const googleBoundsToSDKBounds = googleBounds => {\r\n  if (!googleBounds) {\r\n    return null;\r\n  }\r\n  const ne = googleBounds.getNorthEast();\r\n  const sw = googleBounds.getSouthWest();\r\n  return new SDKLatLngBounds(new SDKLatLng(ne.lat(), ne.lng()), new SDKLatLng(sw.lat(), sw.lng()));\r\n};\r\n\r\nexport const getMapBounds = map => googleBoundsToSDKBounds(map.getBounds());\r\nexport const getMapCenter = map => googleLatLngToSDKLatLng(map.getCenter());\r\n\r\n/**\r\n * Check if map library is loaded\r\n */\r\nexport const isMapsLibLoaded = () =>\r\n  typeof window !== 'undefined' && window.google && window.google.maps;\r\n\r\n/**\r\n * To render HTML on top of Google Maps, we need use OverlayView.\r\n * Note: we don't extend the OverlayView directly, because then\r\n * the class should be defined inside initializeMap function.\r\n */\r\nclass CustomOverlayView extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    const overlayView = new window.google.maps.OverlayView();\r\n\r\n    overlayView.onAdd = this.onAdd.bind(this);\r\n    overlayView.draw = this.draw.bind(this);\r\n    overlayView.onRemove = this.onRemove.bind(this);\r\n    this.onPositionElement = this.onPositionElement.bind(this);\r\n\r\n    // You must call setMap() with a valid Map object to trigger the call to\r\n    // the onAdd() method and setMap(null) in order to trigger the onRemove() method.\r\n    overlayView.setMap(props.map);\r\n    this.state = { overlayView };\r\n  }\r\n\r\n  onRemove() {\r\n    this.containerElement.parentNode.removeChild(this.containerElement);\r\n    //Remove `unmountComponentAtNode` for react version 16\r\n    //I decided to keep the code here incase React decides not to give out warning when `unmountComponentAtNode` in newer version\r\n    if (!React.version.match(/^16/)) {\r\n      ReactDOM.unmountComponentAtNode(this.containerElement);\r\n    }\r\n    this.containerElement = null;\r\n  }\r\n\r\n  onAdd() {\r\n    this.containerElement = document.createElement(`div`);\r\n    this.containerElement.style.position = `absolute`;\r\n\r\n    const { mapPaneName } = this.props;\r\n    invariant(\r\n      !!mapPaneName,\r\n      `OverlayView requires either props.mapPaneName or props.defaultMapPaneName but got %s`,\r\n      mapPaneName\r\n    );\r\n\r\n    const mapPanes = this.state.overlayView.getPanes();\r\n    mapPanes[mapPaneName].appendChild(this.containerElement);\r\n    this.onPositionElement();\r\n    this.forceUpdate();\r\n  }\r\n\r\n  onPositionElement() {\r\n    // https://developers.google.com/maps/documentation/javascript/3.exp/reference#MapCanvasProjection\r\n    const mapCanvasProjection = this.state.overlayView.getProjection();\r\n\r\n    const offset = {\r\n      x: 0,\r\n      y: 0,\r\n      ...getOffsetOverride(this.containerElement, this.props),\r\n    };\r\n    const layoutStyles = getLayoutStyles(mapCanvasProjection, offset, this.props);\r\n    Object.assign(this.containerElement.style, layoutStyles);\r\n  }\r\n\r\n  draw() {\r\n    // https://developers.google.com/maps/documentation/javascript/3.exp/reference#MapPanes\r\n    const mapPanes = this.state.overlayView.getPanes();\r\n    // Add conditional to ensure panes and container exist before drawing\r\n    if (mapPanes && this.containerElement) {\r\n      this.onPositionElement();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (React.version.match(/^16/) && this.containerElement) {\r\n      return ReactDOM.createPortal(React.Children.only(this.props.children), this.containerElement);\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Center label so that caret is pointing to correct pixel.\r\n * (vertical positioning: height + arrow)\r\n */\r\nconst getPixelPositionOffset = (width, height) => {\r\n  return { x: -1 * (width / 2), y: -1 * (height + 3) };\r\n};\r\n\r\n/**\r\n * GoogleMaps need to use Google specific OverlayView components and therefore we need to\r\n * reduce flickering / rerendering of these overlays through 'shouldComponentUpdate'\r\n */\r\nclass SearchMapPriceLabelWithOverlay extends Component {\r\n  shouldComponentUpdate(nextProps) {\r\n    const currentListing = ensureListing(this.props.listing);\r\n    const nextListing = ensureListing(nextProps.listing);\r\n    const isSameListing = currentListing.id.uuid === nextListing.id.uuid;\r\n    const hasSamePrice = currentListing.attributes.price === nextListing.attributes.price;\r\n    const hasSameActiveStatus = this.props.isActive === nextProps.isActive;\r\n    const hasSameRefreshToken =\r\n      this.props.mapComponentRefreshToken === nextProps.mapComponentRefreshToken;\r\n\r\n    return !(isSameListing && hasSamePrice && hasSameActiveStatus && hasSameRefreshToken);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      position,\r\n      map,\r\n      mapPaneName,\r\n      isActive,\r\n      className,\r\n      listing,\r\n      onListingClicked,\r\n      mapComponentRefreshToken,\r\n      config,\r\n    } = this.props;\r\n\r\n    return (\r\n      <CustomOverlayView\r\n        position={position}\r\n        map={map}\r\n        mapPaneName={mapPaneName}\r\n        getPixelPositionOffset={getPixelPositionOffset}\r\n      >\r\n        <SearchMapPriceLabel\r\n          isActive={isActive}\r\n          className={className}\r\n          listing={listing}\r\n          onListingClicked={onListingClicked}\r\n          mapComponentRefreshToken={mapComponentRefreshToken}\r\n          config={config}\r\n        />\r\n      </CustomOverlayView>\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * GoogleMaps need to use Google specific OverlayView components and therefore we need to\r\n * reduce flickering / rerendering of these overlays through 'shouldComponentUpdate'\r\n */\r\nclass SearchMapGroupLabelWithOverlay extends Component {\r\n  shouldComponentUpdate(nextProps) {\r\n    const hasSameAmountOfListings = nextProps.listings.length === this.props.listings.length;\r\n    const hasSameActiveStatus = this.props.isActive === nextProps.isActive;\r\n    const hasSameRefreshToken =\r\n      this.props.mapComponentRefreshToken === nextProps.mapComponentRefreshToken;\r\n\r\n    return !(hasSameAmountOfListings && hasSameActiveStatus && hasSameRefreshToken);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      position,\r\n      map,\r\n      mapPaneName,\r\n      isActive,\r\n      className,\r\n      listings,\r\n      onListingClicked,\r\n      mapComponentRefreshToken,\r\n    } = this.props;\r\n    return (\r\n      <CustomOverlayView\r\n        position={position}\r\n        map={map}\r\n        mapPaneName={mapPaneName}\r\n        getPixelPositionOffset={getPixelPositionOffset}\r\n      >\r\n        <SearchMapGroupLabel\r\n          isActive={isActive}\r\n          className={className}\r\n          listings={listings}\r\n          onListingClicked={onListingClicked}\r\n          mapComponentRefreshToken={mapComponentRefreshToken}\r\n        />\r\n      </CustomOverlayView>\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Render price labels or group \"markers\" based on listings array.\r\n */\r\nconst PriceLabelsAndGroups = props => {\r\n  const {\r\n    map,\r\n    listings,\r\n    activeListingId,\r\n    infoCardOpen,\r\n    onListingClicked,\r\n    mapComponentRefreshToken,\r\n    config,\r\n  } = props;\r\n  const listingArraysInLocations = reducedToArray(groupedByCoordinates(listings));\r\n  const priceLabels = listingArraysInLocations.reverse().map(listingArr => {\r\n    const isActive = activeListingId\r\n      ? !!listingArr.find(l => activeListingId.uuid === l.id.uuid)\r\n      : false;\r\n    const classes = classNames(css.labelContainer, LABEL_HANDLE, { [css.activeLabel]: isActive });\r\n\r\n    // If location contains only one listing, print price label\r\n    if (listingArr.length === 1) {\r\n      const listing = listingArr[0];\r\n      const infoCardOpenIds = Array.isArray(infoCardOpen) ? infoCardOpen.map(l => l.id.uuid) : [];\r\n\r\n      // if the listing is open, don't print price label\r\n      if (infoCardOpen != null && infoCardOpenIds.includes(listing.id.uuid)) {\r\n        return null;\r\n      }\r\n\r\n      // Explicit type change to object literal for Google OverlayViews (geolocation is SDK type)\r\n      const { geolocation } = listing.attributes;\r\n      const latLngLiteral = { lat: geolocation.lat, lng: geolocation.lng };\r\n\r\n      return (\r\n        <SearchMapPriceLabelWithOverlay\r\n          key={listing.id.uuid}\r\n          position={latLngLiteral}\r\n          map={map}\r\n          mapPaneName={OVERLAY_MOUSE_TARGET}\r\n          isActive={isActive}\r\n          className={classes}\r\n          listing={listing}\r\n          onListingClicked={onListingClicked}\r\n          mapComponentRefreshToken={mapComponentRefreshToken}\r\n          config={config}\r\n        />\r\n      );\r\n    }\r\n\r\n    // Explicit type change to object literal for Google OverlayViews (geolocation is SDK type)\r\n    const firstListing = ensureListing(listingArr[0]);\r\n    const geolocation = firstListing.attributes.geolocation;\r\n    const latLngLiteral = { lat: geolocation.lat, lng: geolocation.lng };\r\n\r\n    return (\r\n      <SearchMapGroupLabelWithOverlay\r\n        key={listingArr[0].id.uuid}\r\n        position={latLngLiteral}\r\n        map={map}\r\n        mapPaneName={OVERLAY_MOUSE_TARGET}\r\n        isActive={isActive}\r\n        className={classes}\r\n        listings={listingArr}\r\n        onListingClicked={onListingClicked}\r\n        mapComponentRefreshToken={mapComponentRefreshToken}\r\n      />\r\n    );\r\n  });\r\n  return priceLabels;\r\n};\r\n\r\n/**\r\n * Render info-card overlay if the card is open.\r\n */\r\nconst InfoCardComponent = props => {\r\n  const {\r\n    map,\r\n    infoCardOpen,\r\n    onListingInfoCardClicked,\r\n    createURLToListing,\r\n    mapComponentRefreshToken,\r\n    config,\r\n  } = props;\r\n  const listingsArray = Array.isArray(infoCardOpen) ? infoCardOpen : [infoCardOpen];\r\n\r\n  if (!infoCardOpen) {\r\n    return null;\r\n  }\r\n  // Explicit type change to object literal for Google OverlayViews (geolocation is SDK type)\r\n  const firstListing = ensureListing(listingsArray[0]);\r\n  const geolocation = firstListing.attributes.geolocation;\r\n  const latLngLiteral = { lat: geolocation.lat, lng: geolocation.lng };\r\n\r\n  return (\r\n    <CustomOverlayView\r\n      key={listingsArray[0].id.uuid}\r\n      position={latLngLiteral}\r\n      map={map}\r\n      mapPaneName={FLOAT_PANE}\r\n      getPixelPositionOffset={getPixelPositionOffset}\r\n      styles={{ zIndex: 1 }}\r\n    >\r\n      <SearchMapInfoCard\r\n        mapComponentRefreshToken={mapComponentRefreshToken}\r\n        className={INFO_CARD_HANDLE}\r\n        listings={listingsArray}\r\n        onListingInfoCardClicked={onListingInfoCardClicked}\r\n        createURLToListing={createURLToListing}\r\n        config={config}\r\n      />\r\n    </CustomOverlayView>\r\n  );\r\n};\r\n\r\n/**\r\n * Render GoogleMaps and add price labels, group \"markers\" and infocard using OverlayView.\r\n */\r\nclass SearchMapWithGoogleMaps extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.map = null;\r\n    this.viewportBounds = null;\r\n    this.idleListener = null;\r\n    this.state = { mapContainer: null, isMapReady: false };\r\n\r\n    this.initializeMap = this.initializeMap.bind(this);\r\n    this.onMount = this.onMount.bind(this);\r\n    this.onIdle = this.onIdle.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (!isEqual(prevProps.location, this.props.location)) {\r\n      // If no mapSearch url parameter is given, this is original location search\r\n      const { mapSearch } = parse(this.props.location.search, {\r\n        latlng: ['origin'],\r\n        latlngBounds: ['bounds'],\r\n      });\r\n      if (!mapSearch) {\r\n        this.viewportBounds = null;\r\n      }\r\n    }\r\n\r\n    if (this.map) {\r\n      const currentBounds = getMapBounds(this.map);\r\n\r\n      // Do not call fitMapToBounds if bounds are the same.\r\n      // Our bounds are viewport bounds, and fitBounds will try to add margins around those bounds\r\n      // that would result to zoom-loop (bound change -> fitmap -> bounds change -> ...)\r\n      if (!isEqual(this.props.bounds, currentBounds) && !this.viewportBounds) {\r\n        fitMapToBounds(this.map, this.props.bounds, { padding: 0 });\r\n      }\r\n\r\n      if (prevProps.infoCardOpen !== this.props.infoCardOpen) {\r\n        this.map.setOptions({ disableDoubleClickZoom: !!this.props.infoCardOpen });\r\n      }\r\n    }\r\n\r\n    if (!this.map && this.state.mapContainer) {\r\n      this.initializeMap();\r\n\r\n      /* Notify parent component that the map is loaded */\r\n      this.props.onMapLoad(this.map);\r\n    } else if (prevProps.mapComponentRefreshToken !== this.props.mapComponentRefreshToken) {\r\n      /* Notify parent component that the map is loaded */\r\n      this.props.onMapLoad(this.map);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.idleListener.remove();\r\n  }\r\n\r\n  initializeMap() {\r\n    const { offsetHeight, offsetWidth } = this.state.mapContainer;\r\n    const hasDimensions = offsetHeight > 0 && offsetWidth > 0;\r\n\r\n    if (hasDimensions) {\r\n      const { bounds, center, zoom } = this.props;\r\n      const maps = window.google.maps;\r\n      const controlPosition = maps.ControlPosition.LEFT_TOP;\r\n      const zoomOutToShowEarth = { zoom: 1, center: { lat: 0, lng: 0 } };\r\n      const zoomAndCenter = !bounds && !center ? zoomOutToShowEarth : { zoom, center };\r\n\r\n      const mapConfig = {\r\n        // Disable all controls except zoom\r\n        // https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions\r\n        mapTypeControl: false,\r\n        scrollwheel: false,\r\n        fullscreenControl: false,\r\n        clickableIcons: false,\r\n        streetViewControl: false,\r\n\r\n        zoomControlOptions: {\r\n          position: controlPosition,\r\n        },\r\n\r\n        // Add default viewport (the whole world)\r\n        ...zoomAndCenter,\r\n      };\r\n\r\n      this.map = new maps.Map(this.state.mapContainer, mapConfig);\r\n      this.idleListener = maps.event.addListener(this.map, 'idle', this.onIdle);\r\n      this.setState({\r\n        isMapReady: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  onMount(element) {\r\n    this.setState({ mapContainer: element });\r\n  }\r\n\r\n  onIdle(e) {\r\n    if (this.map) {\r\n      // If reusableMapHiddenHandle is given and parent element has that class,\r\n      // we don't listen moveend events.\r\n      // This fixes mobile Chrome bug that sends map events to invisible map components.\r\n      const isHiddenByReusableMap =\r\n        this.props.reusableMapHiddenHandle &&\r\n        this.state.mapContainer.parentElement.classList.contains(\r\n          this.props.reusableMapHiddenHandle\r\n        );\r\n      if (!isHiddenByReusableMap) {\r\n        const viewportMapBounds = getMapBounds(this.map);\r\n        const viewportMapCenter = getMapCenter(this.map);\r\n        const viewportBounds = viewportMapBounds\r\n          ? sdkBoundsToFixedCoordinates(viewportMapBounds, BOUNDS_FIXED_PRECISION)\r\n          : null;\r\n\r\n        // ViewportBounds from (previous) rendering differ from viewportBounds currently set to map\r\n        // I.e. user has changed the map somehow: moved, panned, zoomed, resized\r\n        const viewportBoundsChanged =\r\n          this.viewportBounds &&\r\n          viewportBounds &&\r\n          !hasSameSDKBounds(this.viewportBounds, viewportBounds);\r\n\r\n        this.props.onMapMoveEnd(viewportBoundsChanged, { viewportBounds, viewportMapCenter });\r\n        this.viewportBounds = viewportBounds;\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      className,\r\n      listings,\r\n      activeListingId,\r\n      infoCardOpen,\r\n      onListingClicked,\r\n      mapComponentRefreshToken,\r\n      onListingInfoCardClicked,\r\n      createURLToListing,\r\n      config,\r\n    } = this.props;\r\n    return (\r\n      <div\r\n        id={id}\r\n        ref={this.onMount}\r\n        className={classNames(className, css.fullArea)}\r\n        onClick={this.props.onClick}\r\n      >\r\n        {this.map ? (\r\n          <PriceLabelsAndGroups\r\n            map={this.map}\r\n            listings={listings}\r\n            activeListingId={activeListingId}\r\n            infoCardOpen={infoCardOpen}\r\n            onListingClicked={onListingClicked}\r\n            mapComponentRefreshToken={mapComponentRefreshToken}\r\n            config={config}\r\n          />\r\n        ) : null}\r\n        {this.map ? (\r\n          <InfoCardComponent\r\n            map={this.map}\r\n            infoCardOpen={infoCardOpen}\r\n            onListingInfoCardClicked={onListingInfoCardClicked}\r\n            createURLToListing={createURLToListing}\r\n            mapComponentRefreshToken={mapComponentRefreshToken}\r\n            config={config}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSearchMapWithGoogleMaps.defaultProps = {\r\n  id: 'map',\r\n  center: new sdkTypes.LatLng(0, 0),\r\n  infoCardOpen: null,\r\n  listings: [],\r\n  activeListingId: null,\r\n  zoom: 11,\r\n  reusableMapHiddenHandle: null,\r\n};\r\n\r\nSearchMapWithGoogleMaps.propTypes = {\r\n  id: string,\r\n  center: propTypes.latlng,\r\n  location: shape({\r\n    search: string.isRequired,\r\n  }).isRequired,\r\n  infoCardOpen: oneOfType([propTypes.listing, arrayOf(propTypes.listing)]),\r\n  listings: arrayOf(propTypes.listing),\r\n  activeListingId: propTypes.uuid,\r\n\r\n  onMapMoveEnd: func.isRequired,\r\n  onMapLoad: func.isRequired,\r\n  zoom: number,\r\n  reusableMapHiddenHandle: string,\r\n  config: object.isRequired,\r\n};\r\n\r\nexport default SearchMapWithGoogleMaps;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SearchMap_root__lk+X9\",\"mapRoot\":\"SearchMap_mapRoot__MAIos\",\"reusableMap\":\"SearchMap_reusableMap__NRcS4\",\"defaultMapLayout\":\"SearchMap_defaultMapLayout__IDCze\",\"reusableMapHidden\":\"SearchMap_reusableMapHidden__7id1c\"};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { node, string, object } from 'prop-types';\r\n\r\nimport { IntlProvider } from '../../../util/reactIntl';\r\n\r\nimport css from './SearchMap.module.css';\r\n\r\n/**\r\n * ReusableMapContainer makes Google Map usage more effective. This improves:\r\n * - Performance: no need to load dynamic map every time user enters the search page view on SPA.\r\n * - Efficient Google Maps usage: less unnecessary calls to instantiate a dynamic map.\r\n * - Reaction to a bug when removing Google Map instance\r\n *   https://issuetracker.google.com/issues/35821412\r\n */\r\nclass ReusableMapContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (typeof window !== 'undefined') {\r\n      window.reusableSearchMapElement =\r\n        window.reusableSearchMapElement || document.createElement('div');\r\n\r\n      if (!props.className) {\r\n        console.warn('ReusableMapContainer should get className prop which defines its layout');\r\n      }\r\n      // If no className is given, we use some defaults, which makes it easier to debug loading.\r\n      const mapLayoutClassName = props.className || css.defaultMapLayout;\r\n\r\n      this.el = window.reusableSearchMapElement;\r\n      this.el.id = 'search-map';\r\n      this.el.classList.add(mapLayoutClassName);\r\n    }\r\n\r\n    this.mountNode = null;\r\n    this.renderSearchMap = this.renderSearchMap.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.renderSearchMap();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.renderSearchMap();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.el.classList.add(css.reusableMapHidden);\r\n    this.el.classList.add(this.props.reusableMapHiddenHandle);\r\n    this.mountNode.removeChild(this.el);\r\n    document.body.appendChild(this.el);\r\n  }\r\n\r\n  renderSearchMap() {\r\n    // Prepare rendering child (MapWithGoogleMap component) to new location\r\n    // We need to add translations (IntlProvider) for map overlay components\r\n    //\r\n    // NOTICE: Children rendered with ReactDOM.render doesn't have Router access\r\n    // You need to provide onClick functions and URLs as props.\r\n    const renderChildren = () => {\r\n      const { config, messages } = this.props;\r\n      const children = (\r\n        <IntlProvider locale={config.localization.locale} messages={messages} textComponent=\"span\">\r\n          {this.props.children}\r\n        </IntlProvider>\r\n      );\r\n\r\n      // Render children to created element\r\n      ReactDOM.render(children, this.el);\r\n    };\r\n\r\n    const targetDomNode = document.getElementById(this.el.id);\r\n\r\n    // Check if we have already added map somewhere on the DOM\r\n    if (!targetDomNode) {\r\n      if (this.mountNode && !this.mountNode.firstChild) {\r\n        // If mountable, but not yet mounted, append rendering context inside SPA rendering tree.\r\n        this.mountNode.appendChild(this.el);\r\n      } else if (!this.mountNode) {\r\n        // if no mountNode is found, append this outside SPA rendering tree (to document body)\r\n        document.body.appendChild(this.el);\r\n      }\r\n      renderChildren();\r\n    } else {\r\n      this.el.classList.remove(css.reusableMapHidden);\r\n      this.el.classList.remove(this.props.reusableMapHiddenHandle);\r\n\r\n      if (this.mountNode && !this.mountNode.firstChild) {\r\n        // Move the map to correct location if we have rendered the map before\r\n        // (but it's not yet moved to correct location of rendering tree).\r\n        document.body.removeChild(this.el);\r\n        this.mountNode.appendChild(this.el);\r\n\r\n        // render children and call reattach\r\n        renderChildren();\r\n        this.props.onReattach();\r\n      } else {\r\n        renderChildren();\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={css.reusableMap}\r\n        ref={node => {\r\n          this.mountNode = node;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nReusableMapContainer.defaultProps = {\r\n  className: string,\r\n};\r\n\r\nReusableMapContainer.propTypes = {\r\n  children: node.isRequired,\r\n  className: string,\r\n  reusableMapHiddenHandle: string.isRequired,\r\n  messages: object.isRequired,\r\n  config: object.isRequired,\r\n};\r\n\r\nexport default ReusableMapContainer;\r\n","import React, { Component } from 'react';\r\nimport { arrayOf, func, number, string, shape, object } from 'prop-types';\r\nimport { useHistory } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\nimport { useConfiguration } from '../../../context/configurationContext';\r\nimport { useRouteConfiguration } from '../../../context/routeConfigurationContext';\r\nimport { createResourceLocatorString } from '../../../util/routes';\r\nimport { createSlug } from '../../../util/urlHelpers';\r\nimport { propTypes } from '../../../util/types';\r\nimport { obfuscatedCoordinates, getMapProviderApiAccess } from '../../../util/maps';\r\n\r\nimport { hasParentWithClassName } from './SearchMap.helpers.js';\r\nimport * as searchMapMapbox from './SearchMapWithMapbox';\r\nimport * as searchMapGoogleMaps from './SearchMapWithGoogleMaps';\r\nimport ReusableMapContainer from './ReusableMapContainer';\r\nimport css from './SearchMap.module.css';\r\n\r\nconst REUSABLE_MAP_HIDDEN_HANDLE = 'reusableMapHidden';\r\n\r\nconst getSearchMapVariant = mapProvider => {\r\n  const isGoogleMapsInUse = mapProvider === 'googleMaps';\r\n  return isGoogleMapsInUse ? searchMapGoogleMaps : searchMapMapbox;\r\n};\r\nconst getSearchMapVariantHandles = mapProvider => {\r\n  const searchMapVariant = getSearchMapVariant(mapProvider);\r\n  return {\r\n    labelHandle: searchMapVariant.LABEL_HANDLE,\r\n    infoCardHandle: searchMapVariant.INFO_CARD_HANDLE,\r\n  };\r\n};\r\nconst getFitMapToBounds = mapProvider => {\r\n  const searchMapVariant = getSearchMapVariant(mapProvider);\r\n  return searchMapVariant.fitMapToBounds;\r\n};\r\nconst getSearchMapVariantComponent = mapProvider => {\r\n  const searchMapVariant = getSearchMapVariant(mapProvider);\r\n  return searchMapVariant.default;\r\n};\r\n\r\nconst withCoordinatesObfuscated = (listings, offset) => {\r\n  return listings.map(listing => {\r\n    const { id, attributes, ...rest } = listing;\r\n    const origGeolocation = attributes.geolocation;\r\n    const cacheKey = id ? `${id.uuid}_${origGeolocation.lat}_${origGeolocation.lng}` : null;\r\n    const geolocation = obfuscatedCoordinates(origGeolocation, offset, cacheKey);\r\n    return {\r\n      id,\r\n      ...rest,\r\n      attributes: {\r\n        ...attributes,\r\n        geolocation,\r\n      },\r\n    };\r\n  });\r\n};\r\n\r\nexport class SearchMapComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.listings = [];\r\n    this.mapRef = null;\r\n\r\n    let mapReattachmentCount = 0;\r\n\r\n    if (typeof window !== 'undefined') {\r\n      if (window.mapReattachmentCount) {\r\n        mapReattachmentCount = window.mapReattachmentCount;\r\n      } else {\r\n        window.mapReattachmentCount = 0;\r\n      }\r\n    }\r\n\r\n    this.state = { infoCardOpen: null, mapReattachmentCount };\r\n\r\n    this.createURLToListing = this.createURLToListing.bind(this);\r\n    this.onListingInfoCardClicked = this.onListingInfoCardClicked.bind(this);\r\n    this.onListingClicked = this.onListingClicked.bind(this);\r\n    this.onMapClicked = this.onMapClicked.bind(this);\r\n    this.onMapLoadHandler = this.onMapLoadHandler.bind(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.listings = [];\r\n  }\r\n\r\n  createURLToListing(listing) {\r\n    const routes = this.props.routeConfiguration;\r\n\r\n    const id = listing.id.uuid;\r\n    const slug = createSlug(listing.attributes.title);\r\n    const pathParams = { id, slug };\r\n\r\n    return createResourceLocatorString('ListingPage', routes, pathParams, {});\r\n  }\r\n\r\n  onListingClicked(listings) {\r\n    this.setState({ infoCardOpen: listings });\r\n  }\r\n\r\n  onListingInfoCardClicked(listing) {\r\n    if (this.props.onCloseAsModal) {\r\n      this.props.onCloseAsModal();\r\n    }\r\n\r\n    // To avoid full page refresh we need to use internal router\r\n    const history = this.props.history;\r\n    history.push(this.createURLToListing(listing));\r\n  }\r\n\r\n  onMapClicked(e) {\r\n    // Close open listing popup / infobox, unless the click is attached to a price label\r\n    const variantHandles = getSearchMapVariantHandles(this.props.config.maps.mapProvider);\r\n    const labelClicked = hasParentWithClassName(e.nativeEvent.target, variantHandles.labelHandle);\r\n    const infoCardClicked = hasParentWithClassName(\r\n      e.nativeEvent.target,\r\n      variantHandles.infoCardHandle\r\n    );\r\n    if (this.state.infoCardOpen != null && !labelClicked && !infoCardClicked) {\r\n      this.setState({ infoCardOpen: null });\r\n    }\r\n  }\r\n\r\n  onMapLoadHandler(map) {\r\n    this.mapRef = map;\r\n\r\n    if (this.mapRef && this.state.mapReattachmentCount === 0) {\r\n      // map is ready, let's fit search area's bounds to map's viewport\r\n      const fitMapToBounds = getFitMapToBounds(this.props.config.maps.mapProvider);\r\n      fitMapToBounds(this.mapRef, this.props.bounds, { padding: 0, isAutocompleteSearch: true });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      className,\r\n      rootClassName,\r\n      reusableContainerClassName,\r\n      bounds,\r\n      center,\r\n      location,\r\n      listings: originalListings,\r\n      onMapMoveEnd,\r\n      zoom,\r\n      config,\r\n      activeListingId,\r\n      messages,\r\n    } = this.props;\r\n    const classes = classNames(rootClassName || css.root, className);\r\n\r\n    const listingsWithLocation = originalListings.filter(l => !!l.attributes.geolocation);\r\n    const listings = config.maps.fuzzy.enabled\r\n      ? withCoordinatesObfuscated(listingsWithLocation, config.maps.fuzzy.offset)\r\n      : listingsWithLocation;\r\n    const infoCardOpen = this.state.infoCardOpen;\r\n\r\n    const forceUpdateHandler = () => {\r\n      // Update global reattachement count\r\n      window.mapReattachmentCount += 1;\r\n      // Initiate rerendering\r\n      this.setState({ mapReattachmentCount: window.mapReattachmentCount });\r\n    };\r\n    const mapProvider = config.maps.mapProvider;\r\n    const hasApiAccessForMapProvider = !!getMapProviderApiAccess(config.maps);\r\n    const SearchMapVariantComponent = getSearchMapVariantComponent(mapProvider);\r\n    const isMapProviderAvailable =\r\n      hasApiAccessForMapProvider && getSearchMapVariant(mapProvider).isMapsLibLoaded();\r\n\r\n    return isMapProviderAvailable ? (\r\n      <ReusableMapContainer\r\n        className={reusableContainerClassName}\r\n        reusableMapHiddenHandle={REUSABLE_MAP_HIDDEN_HANDLE}\r\n        onReattach={forceUpdateHandler}\r\n        messages={messages}\r\n        config={config}\r\n      >\r\n        <SearchMapVariantComponent\r\n          id={id}\r\n          className={classes}\r\n          bounds={bounds}\r\n          center={center}\r\n          location={location}\r\n          infoCardOpen={infoCardOpen}\r\n          listings={listings}\r\n          activeListingId={activeListingId}\r\n          mapComponentRefreshToken={this.state.mapReattachmentCount}\r\n          createURLToListing={this.createURLToListing}\r\n          onClick={this.onMapClicked}\r\n          onListingClicked={this.onListingClicked}\r\n          onListingInfoCardClicked={this.onListingInfoCardClicked}\r\n          onMapLoad={this.onMapLoadHandler}\r\n          onMapMoveEnd={onMapMoveEnd}\r\n          reusableMapHiddenHandle={REUSABLE_MAP_HIDDEN_HANDLE}\r\n          zoom={zoom}\r\n          config={config}\r\n        />\r\n      </ReusableMapContainer>\r\n    ) : (\r\n      <div className={classNames(classes, reusableContainerClassName || css.defaultMapLayout)} />\r\n    );\r\n  }\r\n}\r\n\r\nSearchMapComponent.defaultProps = {\r\n  id: 'searchMap',\r\n  className: null,\r\n  rootClassName: null,\r\n  mapRootClassName: null,\r\n  reusableContainerClassName: null,\r\n  bounds: null,\r\n  center: null,\r\n  activeListingId: null,\r\n  listings: [],\r\n  onCloseAsModal: null,\r\n  zoom: 11,\r\n};\r\n\r\nSearchMapComponent.propTypes = {\r\n  id: string,\r\n  className: string,\r\n  rootClassName: string,\r\n  mapRootClassName: string,\r\n  reusableContainerClassName: string,\r\n  bounds: propTypes.latlngBounds,\r\n  center: propTypes.latlng,\r\n  location: shape({\r\n    search: string.isRequired,\r\n  }).isRequired,\r\n  activeListingId: propTypes.uuid,\r\n  listings: arrayOf(propTypes.listing),\r\n  onCloseAsModal: func,\r\n  onMapMoveEnd: func.isRequired,\r\n  zoom: number,\r\n  messages: object.isRequired,\r\n\r\n  // from useConfiguration\r\n  config: object.isRequired,\r\n\r\n  // from useRouteConfiguration\r\n  routeConfiguration: arrayOf(propTypes.route).isRequired,\r\n\r\n  // from useHistory\r\n  history: shape({\r\n    push: func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nconst SearchMap = props => {\r\n  const config = useConfiguration();\r\n  const routeConfiguration = useRouteConfiguration();\r\n  const history = useHistory();\r\n  return (\r\n    <SearchMapComponent\r\n      config={config}\r\n      routeConfiguration={routeConfiguration}\r\n      history={history}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchMap;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SearchFiltersSecondary_root__+ytb4\",\"filtersWrapper\":\"SearchFiltersSecondary_filtersWrapper__IuzeY\",\"footer\":\"SearchFiltersSecondary_footer__mbSDF\",\"filterButton\":\"SearchFiltersSecondary_filterButton__+PT+V\",\"resetAllButton\":\"SearchFiltersSecondary_resetAllButton__R7ysV SearchFiltersSecondary_filterButton__+PT+V\",\"cancelButton\":\"SearchFiltersSecondary_cancelButton__ZecGG SearchFiltersSecondary_filterButton__+PT+V\",\"applyButton\":\"SearchFiltersSecondary_applyButton__lD1Fq SearchFiltersSecondary_filterButton__+PT+V\"};","import React, { Component } from 'react';\r\nimport { func, object, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage } from '../../../util/reactIntl';\r\n\r\nimport { InlineTextButton } from '../../../components';\r\n\r\nimport css from './SearchFiltersSecondary.module.css';\r\n\r\nclass SearchFiltersSecondaryComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { currentQueryParams: props.urlQueryParams };\r\n\r\n    this.applyFilters = this.applyFilters.bind(this);\r\n    this.cancelFilters = this.cancelFilters.bind(this);\r\n    this.resetAll = this.resetAll.bind(this);\r\n  }\r\n\r\n  // Apply the filters by redirecting to SearchPage with new filters.\r\n  applyFilters() {\r\n    const { applyFilters, onClosePanel } = this.props;\r\n\r\n    if (applyFilters) {\r\n      applyFilters();\r\n    }\r\n\r\n    // Ensure that panel closes (if now changes have been made)\r\n    onClosePanel();\r\n  }\r\n\r\n  // Close the filters by clicking cancel, revert to the initial params\r\n  cancelFilters() {\r\n    const { cancelFilters } = this.props;\r\n\r\n    if (cancelFilters) {\r\n      cancelFilters();\r\n    }\r\n\r\n    this.props.onClosePanel();\r\n  }\r\n\r\n  // Reset all filter query parameters\r\n  resetAll(e) {\r\n    const { resetAll, onClosePanel } = this.props;\r\n\r\n    if (resetAll) {\r\n      resetAll(e);\r\n    }\r\n\r\n    // Ensure that panel closes (if now changes have been made)\r\n    onClosePanel();\r\n\r\n    // blur event target if event is passed\r\n    if (e && e.currentTarget) {\r\n      e.currentTarget.blur();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { rootClassName, className, children } = this.props;\r\n    const classes = classNames(rootClassName || css.root, className);\r\n\r\n    return (\r\n      <div className={classes}>\r\n        <div className={css.filtersWrapper}>{children}</div>\r\n        <div className={css.footer}>\r\n          <InlineTextButton rootClassName={css.resetAllButton} onClick={this.resetAll}>\r\n            <FormattedMessage id={'SearchFiltersSecondary.resetAll'} />\r\n          </InlineTextButton>\r\n          <InlineTextButton rootClassName={css.cancelButton} onClick={this.cancelFilters}>\r\n            <FormattedMessage id={'SearchFiltersSecondary.cancel'} />\r\n          </InlineTextButton>\r\n          <InlineTextButton rootClassName={css.applyButton} onClick={this.applyFilters}>\r\n            <FormattedMessage id={'SearchFiltersSecondary.apply'} />\r\n          </InlineTextButton>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSearchFiltersSecondaryComponent.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n};\r\n\r\nSearchFiltersSecondaryComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  urlQueryParams: object.isRequired,\r\n  applyFilters: func.isRequired,\r\n  resetAll: func.isRequired,\r\n  onClosePanel: func.isRequired,\r\n};\r\n\r\nconst SearchFiltersSecondary = SearchFiltersSecondaryComponent;\r\n\r\nexport default SearchFiltersSecondary;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SearchFiltersPrimary_root__2+lFJ\",\"filters\":\"SearchFiltersPrimary_filters__9YqDX\"};","import React from 'react';\r\nimport { bool, func, node, number, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage } from '../../../util/reactIntl';\r\n\r\nimport PopupOpenerButton from '../PopupOpenerButton/PopupOpenerButton';\r\n\r\nimport css from './SearchFiltersPrimary.module.css';\r\n\r\nconst SearchFiltersPrimaryComponent = props => {\r\n  const {\r\n    rootClassName,\r\n    className,\r\n    children,\r\n    isSecondaryFiltersOpen,\r\n    toggleSecondaryFiltersOpen,\r\n    selectedSecondaryFiltersCount,\r\n  } = props;\r\n\r\n  const classes = classNames(rootClassName || css.root, className);\r\n\r\n  const toggleSecondaryFiltersOpenButton = toggleSecondaryFiltersOpen ? (\r\n    <PopupOpenerButton\r\n      isSelected={isSecondaryFiltersOpen || selectedSecondaryFiltersCount > 0}\r\n      toggleOpen={() => {\r\n        toggleSecondaryFiltersOpen(!isSecondaryFiltersOpen);\r\n      }}\r\n    >\r\n      <FormattedMessage\r\n        id=\"SearchFiltersPrimary.moreFiltersButton\"\r\n        values={{ count: selectedSecondaryFiltersCount }}\r\n      />\r\n    </PopupOpenerButton>\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={classes}>\r\n      <div className={css.filters}>\r\n        {children}\r\n        {toggleSecondaryFiltersOpenButton}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSearchFiltersPrimaryComponent.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  isSecondaryFiltersOpen: false,\r\n  toggleSecondaryFiltersOpen: null,\r\n  selectedSecondaryFiltersCount: 0,\r\n};\r\n\r\nSearchFiltersPrimaryComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  isSecondaryFiltersOpen: bool,\r\n  toggleSecondaryFiltersOpen: func,\r\n  selectedSecondaryFiltersCount: number,\r\n};\r\n\r\nconst SearchFiltersPrimary = SearchFiltersPrimaryComponent;\r\n\r\nexport default SearchFiltersPrimary;\r\n","import React, { Component } from 'react';\r\nimport { array, arrayOf, bool, func, object, oneOf, shape, string } from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport debounce from 'lodash/debounce';\r\nimport omit from 'lodash/omit';\r\nimport classNames from 'classnames';\r\n\r\nimport { useIntl, intlShape, FormattedMessage } from '../../util/reactIntl';\r\nimport { useConfiguration } from '../../context/configurationContext';\r\nimport { useRouteConfiguration } from '../../context/routeConfigurationContext';\r\n\r\nimport { createResourceLocatorString, pathByRouteName } from '../../util/routes';\r\nimport {\r\n  isAnyFilterActive,\r\n  isMainSearchTypeKeywords,\r\n  isOriginInUse,\r\n  getQueryParamNames,\r\n} from '../../util/search';\r\nimport { parse } from '../../util/urlHelpers';\r\nimport { propTypes } from '../../util/types';\r\nimport { getListingsById } from '../../ducks/marketplaceData.duck';\r\nimport { manageDisableScrolling, isScrollingDisabled } from '../../ducks/ui.duck';\r\n\r\nimport { H3, H5, ModalInMobile, Page } from '../../components';\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\n\r\nimport { setActiveListing } from './SearchPage.duck';\r\nimport {\r\n  groupListingFieldConfigs,\r\n  initialValues,\r\n  searchParamsPicker,\r\n  validUrlQueryParamsFromProps,\r\n  validFilterParams,\r\n  cleanSearchFromConflictingParams,\r\n  createSearchResultSchema,\r\n} from './SearchPage.shared';\r\n\r\nimport FilterComponent from './FilterComponent';\r\nimport SearchMap from './SearchMap/SearchMap';\r\nimport MainPanelHeader from './MainPanelHeader/MainPanelHeader';\r\nimport SearchFiltersSecondary from './SearchFiltersSecondary/SearchFiltersSecondary';\r\nimport SearchFiltersPrimary from './SearchFiltersPrimary/SearchFiltersPrimary';\r\nimport SearchFiltersMobile from './SearchFiltersMobile/SearchFiltersMobile';\r\nimport SortBy from './SortBy/SortBy';\r\nimport SearchResultsPanel from './SearchResultsPanel/SearchResultsPanel';\r\nimport NoSearchResultsMaybe from './NoSearchResultsMaybe/NoSearchResultsMaybe';\r\n\r\nimport css from './SearchPage.module.css';\r\n\r\nconst MODAL_BREAKPOINT = 768; // Search is in modal on mobile layout\r\nconst SEARCH_WITH_MAP_DEBOUNCE = 300; // Little bit of debounce before search is initiated.\r\n\r\n// Primary filters have their content in dropdown-popup.\r\n// With this offset we move the dropdown to the left a few pixels on desktop layout.\r\nconst FILTER_DROPDOWN_OFFSET = -14;\r\n\r\nexport class SearchPageComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isSearchMapOpenOnMobile: false,\r\n      isMobileModalOpen: false,\r\n      currentQueryParams: validUrlQueryParamsFromProps(props),\r\n      isSecondaryFiltersOpen: false,\r\n    };\r\n\r\n    this.onMapMoveEnd = debounce(this.onMapMoveEnd.bind(this), SEARCH_WITH_MAP_DEBOUNCE);\r\n    this.onOpenMobileModal = this.onOpenMobileModal.bind(this);\r\n    this.onCloseMobileModal = this.onCloseMobileModal.bind(this);\r\n\r\n    // Filter functions\r\n    this.applyFilters = this.applyFilters.bind(this);\r\n    this.cancelFilters = this.cancelFilters.bind(this);\r\n    this.resetAll = this.resetAll.bind(this);\r\n    this.getHandleChangedValueFn = this.getHandleChangedValueFn.bind(this);\r\n\r\n    // SortBy\r\n    this.handleSortBy = this.handleSortBy.bind(this);\r\n  }\r\n\r\n  // Callback to determine if new search is needed\r\n  // when map is moved by user or viewport has changed\r\n  onMapMoveEnd(viewportBoundsChanged, data) {\r\n    const { viewportBounds, viewportCenter } = data;\r\n\r\n    const routes = this.props.routeConfiguration;\r\n    const searchPagePath = pathByRouteName('SearchPage', routes);\r\n    const currentPath =\r\n      typeof window !== 'undefined' && window.location && window.location.pathname;\r\n\r\n    // When using the ReusableMapContainer onMapMoveEnd can fire from other pages than SearchPage too\r\n    const isSearchPage = currentPath === searchPagePath;\r\n\r\n    // If mapSearch url param is given\r\n    // or original location search is rendered once,\r\n    // we start to react to \"mapmoveend\" events by generating new searches\r\n    // (i.e. 'moveend' event in Mapbox and 'bounds_changed' in Google Maps)\r\n    if (viewportBoundsChanged && isSearchPage) {\r\n      const { history, location, config } = this.props;\r\n      const { listingFields: listingFieldsConfig } = config?.listing || {};\r\n      const { defaultFilters: defaultFiltersConfig } = config?.search || {};\r\n\r\n      // parse query parameters, including a custom attribute named category\r\n      const { address, bounds, mapSearch, ...rest } = parse(location.search, {\r\n        latlng: ['origin'],\r\n        latlngBounds: ['bounds'],\r\n      });\r\n\r\n      const originMaybe = isOriginInUse(this.props.config) ? { origin: viewportCenter } : {};\r\n      const dropNonFilterParams = false;\r\n\r\n      const searchParams = {\r\n        address,\r\n        ...originMaybe,\r\n        bounds: viewportBounds,\r\n        mapSearch: true,\r\n        ...validFilterParams(rest, listingFieldsConfig, defaultFiltersConfig, dropNonFilterParams),\r\n      };\r\n\r\n      history.push(createResourceLocatorString('SearchPage', routes, {}, searchParams));\r\n    }\r\n  }\r\n\r\n  // Invoked when a modal is opened from a child component,\r\n  // for example when a filter modal is opened in mobile view\r\n  onOpenMobileModal() {\r\n    this.setState({ isMobileModalOpen: true });\r\n  }\r\n\r\n  // Invoked when a modal is closed from a child component,\r\n  // for example when a filter modal is opened in mobile view\r\n  onCloseMobileModal() {\r\n    this.setState({ isMobileModalOpen: false });\r\n  }\r\n\r\n  // Apply the filters by redirecting to SearchPage with new filters.\r\n  applyFilters() {\r\n    const { history, routeConfiguration, config } = this.props;\r\n    const { listingFields: listingFieldsConfig } = config?.listing || {};\r\n    const { defaultFilters: defaultFiltersConfig, sortConfig } = config?.search || {};\r\n\r\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\r\n    const searchParams = { ...urlQueryParams, ...this.state.currentQueryParams };\r\n    const search = cleanSearchFromConflictingParams(\r\n      searchParams,\r\n      listingFieldsConfig,\r\n      defaultFiltersConfig,\r\n      sortConfig\r\n    );\r\n\r\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration, {}, search));\r\n  }\r\n\r\n  // Close the filters by clicking cancel, revert to the initial params\r\n  cancelFilters() {\r\n    this.setState({ currentQueryParams: {} });\r\n  }\r\n\r\n  // Reset all filter query parameters\r\n  resetAll(e) {\r\n    const { history, routeConfiguration, config } = this.props;\r\n    const { listingFields: listingFieldsConfig } = config?.listing || {};\r\n    const { defaultFilters: defaultFiltersConfig } = config?.search || {};\r\n\r\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\r\n    const filterQueryParamNames = getQueryParamNames(listingFieldsConfig, defaultFiltersConfig);\r\n\r\n    // Reset state\r\n    this.setState({ currentQueryParams: {} });\r\n\r\n    // Reset routing params\r\n    const queryParams = omit(urlQueryParams, filterQueryParamNames);\r\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration, {}, queryParams));\r\n  }\r\n\r\n  getHandleChangedValueFn(useHistoryPush) {\r\n    const { history, routeConfiguration, config } = this.props;\r\n    const { listingFields: listingFieldsConfig } = config?.listing || {};\r\n    const { defaultFilters: defaultFiltersConfig, sortConfig } = config?.search || {};\r\n\r\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\r\n\r\n    return updatedURLParams => {\r\n      const updater = prevState => {\r\n        const { address, bounds, keywords } = urlQueryParams;\r\n        const mergedQueryParams = { ...urlQueryParams, ...prevState.currentQueryParams };\r\n\r\n        // Address and bounds are handled outside of MainPanel.\r\n        // I.e. TopbarSearchForm && search by moving the map.\r\n        // We should always trust urlQueryParams with those.\r\n        // The same applies to keywords, if the main search type is keyword search.\r\n        const keywordsMaybe = isMainSearchTypeKeywords(config) ? { keywords } : {};\r\n        return {\r\n          currentQueryParams: {\r\n            ...mergedQueryParams,\r\n            ...updatedURLParams,\r\n            ...keywordsMaybe,\r\n            address,\r\n            bounds,\r\n          },\r\n        };\r\n      };\r\n\r\n      const callback = () => {\r\n        if (useHistoryPush) {\r\n          const searchParams = this.state.currentQueryParams;\r\n          const search = cleanSearchFromConflictingParams(\r\n            searchParams,\r\n            listingFieldsConfig,\r\n            defaultFiltersConfig,\r\n            sortConfig\r\n          );\r\n          history.push(createResourceLocatorString('SearchPage', routeConfiguration, {}, search));\r\n        }\r\n      };\r\n\r\n      this.setState(updater, callback);\r\n    };\r\n  }\r\n\r\n  handleSortBy(urlParam, values) {\r\n    const { history, routeConfiguration } = this.props;\r\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\r\n\r\n    const queryParams = values\r\n      ? { ...urlQueryParams, [urlParam]: values }\r\n      : omit(urlQueryParams, urlParam);\r\n\r\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration, {}, queryParams));\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      intl,\r\n      listings,\r\n      location,\r\n      onManageDisableScrolling,\r\n      pagination,\r\n      scrollingDisabled,\r\n      searchInProgress,\r\n      searchListingsError,\r\n      searchParams,\r\n      activeListingId,\r\n      onActivateListing,\r\n      routeConfiguration,\r\n      config,\r\n    } = this.props;\r\n\r\n    const { listingFields: listingFieldsConfig } = config?.listing || {};\r\n    const { defaultFilters: defaultFiltersConfig, sortConfig } = config?.search || {};\r\n\r\n    const activeListingTypes = config?.listing?.listingTypes.map(config => config.listingType);\r\n    const marketplaceCurrency = config.currency;\r\n\r\n    // Page transition might initially use values from previous search\r\n    // urlQueryParams doesn't contain page specific url params\r\n    // like mapSearch, page or origin (origin depends on config.maps.search.sortSearchByDistance)\r\n    const { searchParamsAreInSync, urlQueryParams, searchParamsInURL } = searchParamsPicker(\r\n      location.search,\r\n      searchParams,\r\n      listingFieldsConfig,\r\n      defaultFiltersConfig,\r\n      sortConfig,\r\n      isOriginInUse(config)\r\n    );\r\n\r\n    const validQueryParams = validFilterParams(\r\n      searchParamsInURL,\r\n      listingFieldsConfig,\r\n      defaultFiltersConfig,\r\n      false\r\n    );\r\n\r\n    const isWindowDefined = typeof window !== 'undefined';\r\n    const isMobileLayout = isWindowDefined && window.innerWidth < MODAL_BREAKPOINT;\r\n    const shouldShowSearchMap =\r\n      !isMobileLayout || (isMobileLayout && this.state.isSearchMapOpenOnMobile);\r\n\r\n    const isKeywordSearch = isMainSearchTypeKeywords(config);\r\n    const defaultFilters = isKeywordSearch\r\n      ? defaultFiltersConfig.filter(f => f.key !== 'keywords')\r\n      : defaultFiltersConfig;\r\n    const [customPrimaryFilters, customSecondaryFilters] = groupListingFieldConfigs(\r\n      listingFieldsConfig,\r\n      activeListingTypes\r\n    );\r\n    const availablePrimaryFilters = [...customPrimaryFilters, ...defaultFilters];\r\n    const availableFilters = [\r\n      ...customPrimaryFilters,\r\n      ...defaultFilters,\r\n      ...customSecondaryFilters,\r\n    ];\r\n\r\n    const hasSecondaryFilters = !!(customSecondaryFilters && customSecondaryFilters.length > 0);\r\n\r\n    // Selected aka active filters\r\n    const selectedFilters = validFilterParams(\r\n      validQueryParams,\r\n      listingFieldsConfig,\r\n      defaultFiltersConfig\r\n    );\r\n    const keysOfSelectedFilters = Object.keys(selectedFilters);\r\n    const selectedFiltersCountForMobile = isKeywordSearch\r\n      ? keysOfSelectedFilters.filter(f => f !== 'keywords').length\r\n      : keysOfSelectedFilters.length;\r\n    const isValidDatesFilter =\r\n      searchParamsInURL.dates == null ||\r\n      (searchParamsInURL.dates != null && searchParamsInURL.dates === selectedFilters.dates);\r\n\r\n    // Selected aka active secondary filters\r\n    const selectedSecondaryFilters = hasSecondaryFilters\r\n      ? validFilterParams(validQueryParams, customSecondaryFilters, [])\r\n      : {};\r\n    const selectedSecondaryFiltersCount = Object.keys(selectedSecondaryFilters).length;\r\n\r\n    const isSecondaryFiltersOpen = !!hasSecondaryFilters && this.state.isSecondaryFiltersOpen;\r\n    const propsForSecondaryFiltersToggle = hasSecondaryFilters\r\n      ? {\r\n          isSecondaryFiltersOpen: this.state.isSecondaryFiltersOpen,\r\n          toggleSecondaryFiltersOpen: isOpen => {\r\n            this.setState({ isSecondaryFiltersOpen: isOpen, currentQueryParams: {} });\r\n          },\r\n          selectedSecondaryFiltersCount,\r\n        }\r\n      : {};\r\n\r\n    const hasPaginationInfo = !!pagination && pagination.totalItems != null;\r\n    const totalItems =\r\n      searchParamsAreInSync && hasPaginationInfo\r\n        ? pagination.totalItems\r\n        : pagination?.paginationUnsupported\r\n        ? listings.length\r\n        : 0;\r\n    const listingsAreLoaded =\r\n      !searchInProgress &&\r\n      searchParamsAreInSync &&\r\n      !!(hasPaginationInfo || pagination?.paginationUnsupported);\r\n\r\n    const conflictingFilterActive = isAnyFilterActive(\r\n      sortConfig.conflictingFilters,\r\n      validQueryParams,\r\n      listingFieldsConfig,\r\n      defaultFiltersConfig\r\n    );\r\n    const sortBy = mode => {\r\n      return sortConfig.active ? (\r\n        <SortBy\r\n          sort={validQueryParams[sortConfig.queryParamName]}\r\n          isConflictingFilterActive={!!conflictingFilterActive}\r\n          hasConflictingFilters={!!(sortConfig.conflictingFilters?.length > 0)}\r\n          selectedFilters={selectedFilters}\r\n          onSelect={this.handleSortBy}\r\n          showAsPopup\r\n          mode={mode}\r\n          contentPlacementOffset={FILTER_DROPDOWN_OFFSET}\r\n        />\r\n      ) : null;\r\n    };\r\n    const noResultsInfo = (\r\n      <NoSearchResultsMaybe\r\n        listingsAreLoaded={listingsAreLoaded}\r\n        totalItems={totalItems}\r\n        location={location}\r\n        resetAll={this.resetAll}\r\n      />\r\n    );\r\n\r\n    const { bounds, origin } = searchParamsInURL || {};\r\n    const { title, description, schema } = createSearchResultSchema(\r\n      listings,\r\n      searchParamsInURL || {},\r\n      intl,\r\n      routeConfiguration,\r\n      config\r\n    );\r\n\r\n    // Set topbar class based on if a modal is open in\r\n    // a child component\r\n    const topbarClasses = this.state.isMobileModalOpen\r\n      ? classNames(css.topbarBehindModal, css.topbar)\r\n      : css.topbar;\r\n\r\n    // N.B. openMobileMap button is sticky.\r\n    // For some reason, stickyness doesn't work on Safari, if the element is <button>\r\n    return (\r\n      <Page\r\n        scrollingDisabled={scrollingDisabled}\r\n        description={description}\r\n        title={title}\r\n        schema={schema}\r\n      >\r\n        <TopbarContainer\r\n          rootClassName={topbarClasses}\r\n          currentPage=\"SearchPage\"\r\n          currentSearchParams={urlQueryParams}\r\n        />\r\n        <div className={css.container}>\r\n          <div className={css.searchResultContainer}>\r\n            <SearchFiltersMobile\r\n              className={css.searchFiltersMobileMap}\r\n              urlQueryParams={validQueryParams}\r\n              sortByComponent={sortBy('mobile')}\r\n              listingsAreLoaded={listingsAreLoaded}\r\n              resultsCount={totalItems}\r\n              searchInProgress={searchInProgress}\r\n              searchListingsError={searchListingsError}\r\n              showAsModalMaxWidth={MODAL_BREAKPOINT}\r\n              onMapIconClick={() => this.setState({ isSearchMapOpenOnMobile: true })}\r\n              onManageDisableScrolling={onManageDisableScrolling}\r\n              onOpenModal={this.onOpenMobileModal}\r\n              onCloseModal={this.onCloseMobileModal}\r\n              resetAll={this.resetAll}\r\n              selectedFiltersCount={selectedFiltersCountForMobile}\r\n              noResultsInfo={noResultsInfo}\r\n              isMapVariant\r\n            >\r\n              {availableFilters.map(config => {\r\n                return (\r\n                  <FilterComponent\r\n                    key={`SearchFiltersMobile.${config.scope || 'built-in'}.${config.key}`}\r\n                    idPrefix=\"SearchFiltersMobile\"\r\n                    config={config}\r\n                    marketplaceCurrency={marketplaceCurrency}\r\n                    urlQueryParams={validQueryParams}\r\n                    initialValues={initialValues(this.props, this.state.currentQueryParams)}\r\n                    getHandleChangedValueFn={this.getHandleChangedValueFn}\r\n                    intl={intl}\r\n                    liveEdit\r\n                    showAsPopup={false}\r\n                  />\r\n                );\r\n              })}\r\n            </SearchFiltersMobile>\r\n            <MainPanelHeader\r\n              className={css.mainPanelMapVariant}\r\n              sortByComponent={sortBy('desktop')}\r\n              isSortByActive={sortConfig.active}\r\n              listingsAreLoaded={listingsAreLoaded}\r\n              resultsCount={totalItems}\r\n              searchInProgress={searchInProgress}\r\n              searchListingsError={searchListingsError}\r\n              noResultsInfo={noResultsInfo}\r\n            >\r\n              <SearchFiltersPrimary {...propsForSecondaryFiltersToggle}>\r\n                {availablePrimaryFilters.map(config => {\r\n                  return (\r\n                    <FilterComponent\r\n                      key={`SearchFiltersPrimary.${config.scope || 'built-in'}.${config.key}`}\r\n                      idPrefix=\"SearchFiltersPrimary\"\r\n                      config={config}\r\n                      marketplaceCurrency={marketplaceCurrency}\r\n                      urlQueryParams={validQueryParams}\r\n                      initialValues={initialValues(this.props, this.state.currentQueryParams)}\r\n                      getHandleChangedValueFn={this.getHandleChangedValueFn}\r\n                      intl={intl}\r\n                      showAsPopup\r\n                      contentPlacementOffset={FILTER_DROPDOWN_OFFSET}\r\n                    />\r\n                  );\r\n                })}\r\n              </SearchFiltersPrimary>\r\n            </MainPanelHeader>\r\n            {isSecondaryFiltersOpen ? (\r\n              <div className={classNames(css.searchFiltersPanel)}>\r\n                <SearchFiltersSecondary\r\n                  urlQueryParams={validQueryParams}\r\n                  listingsAreLoaded={listingsAreLoaded}\r\n                  applyFilters={this.applyFilters}\r\n                  cancelFilters={this.cancelFilters}\r\n                  resetAll={this.resetAll}\r\n                  onClosePanel={() => this.setState({ isSecondaryFiltersOpen: false })}\r\n                >\r\n                  {customSecondaryFilters.map(config => {\r\n                    return (\r\n                      <FilterComponent\r\n                        key={`SearchFiltersSecondary.${config.scope || 'built-in'}.${config.key}`}\r\n                        idPrefix=\"SearchFiltersSecondary\"\r\n                        config={config}\r\n                        marketplaceCurrency={marketplaceCurrency}\r\n                        urlQueryParams={validQueryParams}\r\n                        initialValues={initialValues(this.props, this.state.currentQueryParams)}\r\n                        getHandleChangedValueFn={this.getHandleChangedValueFn}\r\n                        intl={intl}\r\n                        showAsPopup={false}\r\n                      />\r\n                    );\r\n                  })}\r\n                </SearchFiltersSecondary>\r\n              </div>\r\n            ) : (\r\n              <div\r\n                className={classNames(css.listingsForMapVariant, {\r\n                  [css.newSearchInProgress]: !(listingsAreLoaded || searchListingsError),\r\n                })}\r\n              >\r\n                {searchListingsError ? (\r\n                  <H3 className={css.error}>\r\n                    <FormattedMessage id=\"SearchPage.searchError\" />\r\n                  </H3>\r\n                ) : null}\r\n                {!isValidDatesFilter ? (\r\n                  <H5>\r\n                    <FormattedMessage id=\"SearchPage.invalidDatesFilter\" />\r\n                  </H5>\r\n                ) : null}\r\n                <SearchResultsPanel\r\n                  className={css.searchListingsPanel}\r\n                  listings={listings}\r\n                  pagination={listingsAreLoaded ? pagination : null}\r\n                  search={parse(location.search)}\r\n                  setActiveListing={onActivateListing}\r\n                  isMapVariant\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n          <ModalInMobile\r\n            className={css.mapPanel}\r\n            id=\"SearchPage.map\"\r\n            isModalOpenOnMobile={this.state.isSearchMapOpenOnMobile}\r\n            onClose={() => this.setState({ isSearchMapOpenOnMobile: false })}\r\n            showAsModalMaxWidth={MODAL_BREAKPOINT}\r\n            onManageDisableScrolling={onManageDisableScrolling}\r\n          >\r\n            <div className={css.mapWrapper} data-testid=\"searchMapContainer\">\r\n              {shouldShowSearchMap ? (\r\n                <SearchMap\r\n                  reusableContainerClassName={css.map}\r\n                  activeListingId={activeListingId}\r\n                  bounds={bounds}\r\n                  center={origin}\r\n                  isSearchMapOpenOnMobile={this.state.isSearchMapOpenOnMobile}\r\n                  location={location}\r\n                  listings={listings || []}\r\n                  onMapMoveEnd={this.onMapMoveEnd}\r\n                  onCloseAsModal={() => {\r\n                    onManageDisableScrolling('SearchPage.map', false);\r\n                  }}\r\n                  messages={intl.messages}\r\n                />\r\n              ) : null}\r\n            </div>\r\n          </ModalInMobile>\r\n        </div>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nSearchPageComponent.defaultProps = {\r\n  listings: [],\r\n  pagination: null,\r\n  searchListingsError: null,\r\n  searchParams: {},\r\n  activeListingId: null,\r\n};\r\n\r\nSearchPageComponent.propTypes = {\r\n  listings: array,\r\n  onActivateListing: func.isRequired,\r\n  onManageDisableScrolling: func.isRequired,\r\n  pagination: propTypes.pagination,\r\n  scrollingDisabled: bool.isRequired,\r\n  searchInProgress: bool.isRequired,\r\n  searchListingsError: propTypes.error,\r\n  searchParams: object,\r\n\r\n  // from useHistory\r\n  history: shape({\r\n    push: func.isRequired,\r\n  }).isRequired,\r\n  // from useLocation\r\n  location: shape({\r\n    search: string.isRequired,\r\n  }).isRequired,\r\n\r\n  // from useIntl\r\n  intl: intlShape.isRequired,\r\n\r\n  // from useConfiguration\r\n  config: object.isRequired,\r\n\r\n  // from useRouteConfiguration\r\n  routeConfiguration: arrayOf(propTypes.route).isRequired,\r\n};\r\n\r\nconst EnhancedSearchPage = props => {\r\n  const config = useConfiguration();\r\n  const routeConfiguration = useRouteConfiguration();\r\n  const intl = useIntl();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <SearchPageComponent\r\n      config={config}\r\n      routeConfiguration={routeConfiguration}\r\n      intl={intl}\r\n      history={history}\r\n      location={location}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const {\r\n    currentPageResultIds,\r\n    pagination,\r\n    searchInProgress,\r\n    searchListingsError,\r\n    searchParams,\r\n    activeListingId,\r\n  } = state.SearchPage;\r\n  const listings = getListingsById(state, currentPageResultIds);\r\n\r\n  return {\r\n    listings,\r\n    pagination,\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n    searchInProgress,\r\n    searchListingsError,\r\n    searchParams,\r\n    activeListingId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onManageDisableScrolling: (componentId, disableScrolling) =>\r\n    dispatch(manageDisableScrolling(componentId, disableScrolling)),\r\n  onActivateListing: listingId => dispatch(setActiveListing(listingId)),\r\n});\r\n\r\n// Note: it is important that the withRouter HOC is **outside** the\r\n// connect HOC, otherwise React Router won't rerender any Route\r\n// components since connect implements a shouldComponentUpdate\r\n// lifecycle hook.\r\n//\r\n// See: https://github.com/ReactTraining/react-router/issues/4671\r\nconst SearchPage = compose(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )\r\n)(EnhancedSearchPage);\r\n\r\nexport default SearchPage;\r\n","import { types as sdkTypes } from '../util/sdkLoader';\r\n\r\nconst { LatLng: SDKLatLng, LatLngBounds: SDKLatLngBounds } = sdkTypes;\r\n\r\nconst placeOrigin = place => {\r\n  if (place && place.geometry && place.geometry.location) {\r\n    return new SDKLatLng(place.geometry.location.lat(), place.geometry.location.lng());\r\n  }\r\n  return null;\r\n};\r\n\r\nconst placeBounds = place => {\r\n  if (place && place.geometry && place.geometry.viewport) {\r\n    const ne = place.geometry.viewport.getNorthEast();\r\n    const sw = place.geometry.viewport.getSouthWest();\r\n    return new SDKLatLngBounds(\r\n      new SDKLatLng(ne.lat(), ne.lng()),\r\n      new SDKLatLng(sw.lat(), sw.lng())\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * Get a detailed place object\r\n *\r\n * @param {String} placeId - ID for a place received from the\r\n * autocomplete service\r\n * @param {String} sessionToken - token to tie different autocomplete character searches together\r\n * with getPlaceDetails call\r\n *\r\n * @return {Promise<util.propTypes.place>} Promise that\r\n * resolves to the detailed place, rejects if the request failed\r\n */\r\nexport const getPlaceDetails = (placeId, sessionToken) =>\r\n  new Promise((resolve, reject) => {\r\n    const serviceStatus = window.google.maps.places.PlacesServiceStatus;\r\n    const el = document.createElement('div');\r\n    const service = new window.google.maps.places.PlacesService(el);\r\n    const fields = ['address_component', 'formatted_address', 'geometry', 'place_id'];\r\n    const sessionTokenMaybe = sessionToken ? { sessionToken } : {};\r\n\r\n    service.getDetails({ placeId, fields, ...sessionTokenMaybe }, (place, status) => {\r\n      if (status !== serviceStatus.OK) {\r\n        reject(\r\n          new Error(`Could not get details for place id \"${placeId}\", error status was \"${status}\"`)\r\n        );\r\n      } else {\r\n        resolve({\r\n          address: place.formatted_address,\r\n          origin: placeOrigin(place),\r\n          bounds: placeBounds(place),\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\nconst predictionSuccessful = status => {\r\n  const { OK, ZERO_RESULTS } = window.google.maps.places.PlacesServiceStatus;\r\n  return status === OK || status === ZERO_RESULTS;\r\n};\r\n\r\n/**\r\n * Get place predictions for the given search\r\n *\r\n * @param {String} search - place name or address to search\r\n * @param {String} sessionToken - token to tie different autocomplete character searches together\r\n * with getPlaceDetails call\r\n * @param {Object} searchConfigurations - defines the search configurations that can be used with\r\n * the autocomplete service. Used to restrict search to specific country (or countries).\r\n *\r\n * @return {Promise<{ search, predictions[] }>} - Promise of an object\r\n * with the original search query and an array of\r\n * `google.maps.places.AutocompletePrediction` objects\r\n */\r\nexport const getPlacePredictions = (search, sessionToken, searchConfigurations) =>\r\n  new Promise((resolve, reject) => {\r\n    const service = new window.google.maps.places.AutocompleteService();\r\n    const sessionTokenMaybe = sessionToken ? { sessionToken } : {};\r\n\r\n    service.getPlacePredictions(\r\n      { input: search, ...sessionTokenMaybe, ...searchConfigurations },\r\n      (predictions, status) => {\r\n        if (!predictionSuccessful(status)) {\r\n          reject(new Error(`Prediction service status not OK: ${status}`));\r\n        } else {\r\n          const results = {\r\n            search,\r\n            predictions: predictions || [],\r\n          };\r\n          resolve(results);\r\n        }\r\n      }\r\n    );\r\n  });\r\n\r\n/**\r\n * Deprecation: use function from src/util/maps.js\r\n * Cut some precision from bounds coordinates to tackle subtle map movements\r\n * when map is moved manually\r\n *\r\n * @param {LatLngBounds} sdkBounds - bounds to be changed to fixed precision\r\n * @param {Number} fixedPrecision - integer to be used on tofixed() change.\r\n *\r\n * @return {SDKLatLngBounds} - bounds cut to given fixed precision\r\n */\r\nexport const sdkBoundsToFixedCoordinates = (sdkBounds, fixedPrecision) => {\r\n  const fixed = n => Number.parseFloat(n.toFixed(fixedPrecision));\r\n  const ne = new SDKLatLng(fixed(sdkBounds.ne.lat), fixed(sdkBounds.ne.lng));\r\n  const sw = new SDKLatLng(fixed(sdkBounds.sw.lat), fixed(sdkBounds.sw.lng));\r\n\r\n  return new SDKLatLngBounds(ne, sw);\r\n};\r\n\r\n/**\r\n * Deprecation: use function from src/util/maps.js\r\n * Check if given bounds object have the same coordinates\r\n *\r\n * @param {LatLngBounds} sdkBounds1 - bounds #1 to be compared\r\n * @param {LatLngBounds} sdkBounds2 - bounds #2 to be compared\r\n *\r\n * @return {boolean} - true if bounds are the same\r\n */\r\nexport const hasSameSDKBounds = (sdkBounds1, sdkBounds2) => {\r\n  if (!(sdkBounds1 instanceof SDKLatLngBounds) || !(sdkBounds2 instanceof SDKLatLngBounds)) {\r\n    return false;\r\n  }\r\n  return (\r\n    sdkBounds1.ne.lat === sdkBounds2.ne.lat &&\r\n    sdkBounds1.ne.lng === sdkBounds2.ne.lng &&\r\n    sdkBounds1.sw.lat === sdkBounds2.sw.lat &&\r\n    sdkBounds1.sw.lng === sdkBounds2.sw.lng\r\n  );\r\n};\r\n\r\n/**\r\n * Calculate a bounding box in the given location\r\n *\r\n * @param {latlng} center - center of the bounding box\r\n * @param {distance} distance - distance in meters from the center to\r\n * the sides of the bounding box\r\n *\r\n * @return {LatLngBounds} bounding box around the given location\r\n *\r\n */\r\nexport const locationBounds = (latlng, distance) => {\r\n  const bounds = new window.google.maps.Circle({\r\n    center: new window.google.maps.LatLng(latlng.lat, latlng.lng),\r\n    radius: distance,\r\n  }).getBounds();\r\n\r\n  const ne = bounds.getNorthEast();\r\n  const sw = bounds.getSouthWest();\r\n\r\n  return new SDKLatLngBounds(new SDKLatLng(ne.lat(), ne.lng()), new SDKLatLng(sw.lat(), sw.lng()));\r\n};\r\n\r\n/**\r\n * Helper functions for handling Google OverlayView.\r\n * Based on https://github.com/tomchentw/react-google-maps/blob/v9.4.5/src/utils/OverlayViewHelper.js\r\n *\r\n * @param {element} containerElement - map container\r\n * @param {object} props - map props\r\n * @return position offset to allow custom position for the OverlayView\r\n */\r\nexport const getOffsetOverride = (containerElement, props) => {\r\n  const { getPixelPositionOffset } = props;\r\n  //\r\n  // Allows the component to control the visual position of the OverlayView\r\n  // relative to the LatLng pixel position.\r\n  //\r\n  if (typeof getPixelPositionOffset === 'function') {\r\n    return getPixelPositionOffset(containerElement.offsetWidth, containerElement.offsetHeight);\r\n  } else {\r\n    return {};\r\n  }\r\n};\r\n\r\n/**\r\n * Helper functions for handling Google OverlayView\r\n * Based on https://github.com/tomchentw/react-google-maps/blob/v9.4.5/src/utils/OverlayViewHelper.js\r\n *\r\n * @param {MapCanvasProjection} mapCanvasProjection - map projection.\r\n * @param {object} offset - position offset on map canvas.\r\n * @param {LatLngBounds} bounds - map bounds.\r\n *\r\n * @return styles to render the overlay within the projection.\r\n */\r\nconst getLayoutStylesByBounds = (mapCanvasProjection, offset, bounds) => {\r\n  const ne = mapCanvasProjection.fromLatLngToDivPixel(bounds.getNorthEast());\r\n  const sw = mapCanvasProjection.fromLatLngToDivPixel(bounds.getSouthWest());\r\n  if (ne && sw) {\r\n    return {\r\n      left: `${sw.x + offset.x}px`,\r\n      top: `${ne.y + offset.y}px`,\r\n      width: `${ne.x - sw.x - offset.x}px`,\r\n      height: `${sw.y - ne.y - offset.y}px`,\r\n    };\r\n  }\r\n  return {\r\n    left: `-9999px`,\r\n    top: `-9999px`,\r\n  };\r\n};\r\n\r\n/**\r\n * Helper functions for handling Google OverlayView\r\n * Based on https://github.com/tomchentw/react-google-maps/blob/v9.4.5/src/utils/OverlayViewHelper.js\r\n *\r\n * @param {MapCanvasProjection} mapCanvasProjection - map projection.\r\n * @param {object} offset - position offset on map canvas.\r\n * @param {LatLng} position - map position/location.\r\n *\r\n * @return  styles to render single coordinate pair within the projection.\r\n */\r\nconst getLayoutStylesByPosition = (mapCanvasProjection, offset, position) => {\r\n  const point = mapCanvasProjection.fromLatLngToDivPixel(position);\r\n  if (point) {\r\n    const { x, y } = point;\r\n    return {\r\n      left: `${x + offset.x}px`,\r\n      top: `${y + offset.y}px`,\r\n    };\r\n  }\r\n  return {\r\n    left: `-9999px`,\r\n    top: `-9999px`,\r\n  };\r\n};\r\n\r\n/**\r\n * Helper functions for handling Google OverlayView\r\n * Based on https://github.com/tomchentw/react-google-maps/blob/v9.4.5/src/utils/OverlayViewHelper.js\r\n *\r\n * @param {MapCanvasProjection} mapCanvasProjection - map projection.\r\n * @param {object} offset - position offset on map canvas.\r\n * @param {object} props - map props.\r\n *\r\n * @return styles to render an area or a single coordinate pair within the projection.\r\n */\r\nexport const getLayoutStyles = (mapCanvasProjection, offset, props) => {\r\n  const createLatLng = (inst, Type) => {\r\n    return new Type(inst.lat, inst.lng);\r\n  };\r\n\r\n  const createLatLngBounds = (inst, Type) => {\r\n    return new Type(\r\n      new window.google.maps.LatLng(inst.ne.lat, inst.ne.lng),\r\n      new window.google.maps.LatLng(inst.sw.lat, inst.sw.lng)\r\n    );\r\n  };\r\n\r\n  const ensureOfType = (inst, type, factory) => {\r\n    if (inst instanceof type) {\r\n      return inst;\r\n    } else {\r\n      return factory(inst, type);\r\n    }\r\n  };\r\n\r\n  if (props.bounds) {\r\n    const bounds = ensureOfType(props.bounds, window.google.maps.LatLngBounds, createLatLngBounds);\r\n    return getLayoutStylesByBounds(mapCanvasProjection, offset, bounds);\r\n  } else {\r\n    const position = ensureOfType(props.position, window.google.maps.LatLng, createLatLng);\r\n    return getLayoutStylesByPosition(mapCanvasProjection, offset, position);\r\n  }\r\n};\r\n"],"names":["hasParentWithClassName","target","className","document","querySelectorAll","concat","some","el","contains","groupedByCoordinates","mapListings","groupBy","l","g","attributes","geolocation","lat","lng","reducedToArray","reduce","acc","listing","SearchMapPriceLabel","Component","shouldComponentUpdate","nextProps","currentListing","ensureListing","this","props","nextListing","isSameListing","id","uuid","hasSamePrice","price","hasSameActiveStatus","isActive","hasSameRefreshToken","mapComponentRefreshToken","render","rootClassName","intl","onListingClicked","config","formattedPrice","currency","formatMoney","classes","classNames","css","priceLabelClasses","caretClasses","React","onClick","defaultProps","injectIntl","ListingCard","_firstImage$attribute","clickHandler","isInCarousel","urlToListing","title","firstImage","images","length","aspectWidth","aspectHeight","variantPrefix","layout","listingImage","variants","Object","keys","filter","k","startsWith","anchor","borderRadiusInheritTop","borderRadiusInheritBottom","alt","href","e","preventDefault","card","AspectRatioWrapper","aspectRatioWrapper","width","height","ResponsiveImage","rootForImage","noImageMessage","formatMessage","image","sizes","info","noPriceSetLabel","name","SearchMapInfoCard","currentListingIndex","setCurrentListingIndex","useState","listings","createURLToListing","onListingInfoCardClicked","hasCarousel","root","caretClass","caret","caretWithCarousel","caretShadow","paginationInfo","paginationPrev","stopPropagation","prevListingIndex","paginationPage","paginationNext","compose","SearchMapGroupLabel","hasSameAmountOfListings","countLabelClasses","arrayOf","func","string","PropTypes","LABEL_HANDLE","INFO_CARD_HANDLE","SOURCE_AUTOCOMPLETE","LatLng","SDKLatLng","LatLngBounds","SDKLatLngBounds","sdkTypes","fitMapToBounds","map","bounds","options","padding","isAutocompleteSearch","mapBounds","sdkBoundsToMapboxBounds","paddingOptionMaybe","eventData","searchSource","fitBounds","linear","duration","mapboxLngLatToSDKLatLng","lngLat","mapboxLng","mapboxBoundsToSDKBounds","mapboxBounds","ne","getNorthEast","sw","getSouthWest","getMapBounds","getBounds","getMapCenter","getCenter","isMapsLibLoaded","window","mapboxgl","SearchMapWithMapbox","constructor","super","mapboxMap","currentMarkers","currentInfoCard","state","mapContainer","isMapReady","viewportBounds","onMount","bind","onMoveend","initializeMap","handleDoubleClickOnInfoCard","handleMobilePinchZoom","componentDidUpdate","prevProps","isEqual","location","mapSearch","parse","search","latlng","latlngBounds","currentBounds","onMapLoad","componentWillUnmount","markerContainer","removeEventListener","element","addEventListener","setState","reusableMapHiddenHandle","parentElement","classList","viewportMapBounds","viewportMapCenter","sdkBoundsToFixedCoordinates","viewportBoundsChanged","hasSameSDKBounds","onMapMoveEnd","offsetHeight","offsetWidth","Map","container","style","scrollZoom","nav","NavigationControl","showCompass","addControl","on","body","zoom","activeListingId","infoCardOpen","labels","priceLabelsInLocations","reverse","listingArr","find","infoCardOpenIds","Array","isArray","includes","key","markerId","type","componentProps","differenceBy","forEach","rm","marker","remove","creShwcsearker","data","Marker","setLngLat","addTo","v","m","existingMarkerId","findIndex","rest","createElement","setAttribute","add","infoCard","infoCardComponent","listingsArray","firstListing","infoCardContainer","ref","isMapReadyForMarkers","portalDOMContainer","getElementById","ReactDOM","assign","center","priceLabels","OVERLAY_MOUSE_TARGET","north","east","south","west","googleLatLngToSDKLatLng","googleLatLng","googleBoundsToSDKBounds","googleBounds","google","maps","CustomOverlayView","context","overlayView","OverlayView","onAdd","draw","onRemove","onPositionElement","setMap","containerElement","parentNode","removeChild","match","position","mapPaneName","invariant","getPanes","appendChild","forceUpdate","mapCanvasProjection","getProjection","offset","x","y","getOffsetOverride","layoutStyles","getLayoutStyles","only","children","getPixelPositionOffset","SearchMapPriceLabelWithOverlay","SearchMapGroupLabelWithOverlay","PriceLabelsAndGroups","latLngLiteral","InfoCardComponent","styles","zIndex","SearchMapWithGoogleMaps","idleListener","onIdle","setOptions","disableDoubleClickZoom","zoomOutToShowEarth","mapConfig","mapTypeControl","scrollwheel","fullscreenControl","clickableIcons","streetViewControl","zoomControlOptions","ControlPosition","LEFT_TOP","event","addListener","ReusableMapContainer","reusableSearchMapElement","console","warn","mapLayoutClassName","mountNode","renderSearchMap","componentDidMount","renderChildren","messages","IntlProvider","locale","localization","textComponent","firstChild","onReattach","node","REUSABLE_MAP_HIDDEN_HANDLE","getSearchMapVariant","mapProvider","searchMapGoogleMaps","searchMapMapbox","SearchMapComponent","mapRef","mapReattachmentCount","onMapClicked","onMapLoadHandler","routes","routeConfiguration","pathParams","slug","createSlug","createResourceLocatorString","onCloseAsModal","history","push","variantHandles","searchMapVariant","labelHandle","infoCardHandle","getSearchMapVariantHandles","labelClicked","nativeEvent","infoCardClicked","reusableContainerClassName","originalListings","listingsWithLocation","fuzzy","enabled","withCoordinatesObfuscated","origGeolocation","cacheKey","obfuscatedCoordinates","hasApiAccessForMapProvider","getMapProviderApiAccess","SearchMapVariantComponent","default","getSearchMapVariantComponent","forceUpdateHandler","mapRootClassName","useConfiguration","useRouteConfiguration","useHistory","SearchFiltersSecondaryComponent","currentQueryParams","urlQueryParams","applyFilters","cancelFilters","resetAll","onClosePanel","currentTarget","blur","InlineTextButton","FormattedMessage","SearchFiltersPrimaryComponent","isSecondaryFiltersOpen","toggleSecondaryFiltersOpen","selectedSecondaryFiltersCount","toggleSecondaryFiltersOpenButton","PopupOpenerButton","isSelected","toggleOpen","values","count","SearchPageComponent","isSearchMapOpenOnMobile","isMobileModalOpen","validUrlQueryParamsFromProps","debounce","onOpenMobileModal","onCloseMobileModal","getHandleChangedValueFn","handleSortBy","viewportCenter","searchPagePath","pathByRouteName","currentPath","pathname","listingFields","listingFieldsConfig","defaultFilters","defaultFiltersConfig","address","dropNonFilterParams","searchParams","isOriginInUse","origin","validFilterParams","sortConfig","cleanSearchFromConflictingParams","filterQueryParamNames","getQueryParamNames","queryParams","omit","useHistoryPush","updatedURLParams","prevState","keywords","mergedQueryParams","keywordsMaybe","isMainSearchTypeKeywords","callback","urlParam","_config$listing","onManageDisableScrolling","pagination","scrollingDisabled","searchInProgress","searchListingsError","onActivateListing","activeListingTypes","listingTypes","listingType","marketplaceCurrency","searchParamsAreInSync","searchParamsInURL","searchParamsPicker","validQueryParams","isMobileLayout","innerWidth","shouldShowSearchMap","isKeywordSearch","f","customPrimaryFilters","customSecondaryFilters","groupListingFieldConfigs","availablePrimaryFilters","availableFilters","hasSecondaryFilters","selectedFilters","keysOfSelectedFilters","selectedFiltersCountForMobile","isValidDatesFilter","dates","selectedSecondaryFilters","propsForSecondaryFiltersToggle","isOpen","hasPaginationInfo","totalItems","paginationUnsupported","listingsAreLoaded","conflictingFilterActive","isAnyFilterActive","conflictingFilters","sortBy","mode","_sortConfig$conflicti","active","SortBy","sort","queryParamName","isConflictingFilterActive","hasConflictingFilters","onSelect","showAsPopup","contentPlacementOffset","noResultsInfo","NoSearchResultsMaybe","description","schema","createSearchResultSchema","topbarClasses","topbarBehindModal","topbar","Page","TopbarContainer","currentPage","currentSearchParams","searchResultContainer","SearchFiltersMobile","searchFiltersMobileMap","sortByComponent","resultsCount","showAsModalMaxWidth","onMapIconClick","onOpenModal","onCloseModal","selectedFiltersCount","isMapVariant","FilterComponent","scope","idPrefix","initialValues","liveEdit","MainPanelHeader","mainPanelMapVariant","isSortByActive","SearchFiltersPrimary","searchFiltersPanel","SearchFiltersSecondary","listingsForMapVariant","newSearchInProgress","H3","error","H5","SearchResultsPanel","searchListingsPanel","setActiveListing","ModalInMobile","mapPanel","isModalOpenOnMobile","onClose","mapWrapper","SearchMap","connect","currentPageResultIds","SearchPage","getListingsById","isScrollingDisabled","dispatch","componentId","disableScrolling","manageDisableScrolling","listingId","useIntl","useLocation","placeOrigin","place","geometry","placeBounds","viewport","getPlaceDetails","placeId","sessionToken","Promise","resolve","reject","serviceStatus","places","PlacesServiceStatus","service","PlacesService","sessionTokenMaybe","getDetails","fields","status","OK","Error","formatted_address","getPlacePredictions","searchConfigurations","AutocompleteService","input","predictions","ZERO_RESULTS","predictionSuccessful","locationBounds","distance","Circle","radius","createLatLng","inst","Type","createLatLngBounds","ensureOfType","factory","getLayoutStylesByBounds","fromLatLngToDivPixel","left","top","getLayoutStylesByPosition","point"],"sourceRoot":""}