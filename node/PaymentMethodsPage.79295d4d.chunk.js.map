{"version":3,"file":"PaymentMethodsPage.79295d4d.chunk.js","mappings":"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","sources":["webpack://app/./src/containers/PaymentMethodsPage/PaymentMethodsForm/PaymentMethodsForm.module.css?cc00","containers/PaymentMethodsPage/PaymentMethodsForm/PaymentMethodsForm.js","webpack://app/./src/containers/PaymentMethodsPage/PaymentMethodsPage.module.css?1449","containers/PaymentMethodsPage/PaymentMethodsPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PaymentMethodsForm_root__IjHRq\",\"card\":\"PaymentMethodsForm_card__piZp1 marketplaceInputStyles\",\"cardError\":\"PaymentMethodsForm_cardError__3uteV\",\"error\":\"PaymentMethodsForm_error__L9do+\",\"errorMessage\":\"PaymentMethodsForm_errorMessage__Zq0Am\",\"paymentHeading\":\"PaymentMethodsForm_paymentHeading__P1KfT\",\"messageHeading\":\"PaymentMethodsForm_messageHeading__3ZLXi\",\"messageLabel\":\"PaymentMethodsForm_messageLabel__qIBFX\",\"messageOptional\":\"PaymentMethodsForm_messageOptional__44RXZ\",\"message\":\"PaymentMethodsForm_message__ok9Pb\",\"submitContainer\":\"PaymentMethodsForm_submitContainer__9szIN\",\"infoText\":\"PaymentMethodsForm_infoText__Wunwb h5\",\"submitButton\":\"PaymentMethodsForm_submitButton__ltWAh\",\"missingStripeKey\":\"PaymentMethodsForm_missingStripeKey__5o2CU\",\"paymentAddressField\":\"PaymentMethodsForm_paymentAddressField__jgaak\",\"formRow\":\"PaymentMethodsForm_formRow__TODWa\",\"postalCode\":\"PaymentMethodsForm_postalCode__4wOQC\",\"city\":\"PaymentMethodsForm_city__iz67K\",\"field\":\"PaymentMethodsForm_field__lXCiE\"};","/**\r\n * Note: This form is using card from Stripe Elements https://stripe.com/docs/stripe-js#elements\r\n * Card is not a Final Form field so it's not available trough Final Form.\r\n * It's also handled separately in handleSubmit function.\r\n */\r\nimport React, { Component } from 'react';\r\nimport { func, object, string } from 'prop-types';\r\nimport { Form as FinalForm } from 'react-final-form';\r\nimport classNames from 'classnames';\r\n\r\nimport { useConfiguration } from '../../../context/configurationContext';\r\nimport { FormattedMessage, useIntl, intlShape } from '../../../util/reactIntl';\r\n\r\nimport { Form, PrimaryButton, FieldTextInput, StripePaymentAddress, H4 } from '../../../components';\r\n\r\nimport css from './PaymentMethodsForm.module.css';\r\n\r\n/**\r\n * Translate a Stripe API error object.\r\n *\r\n * To keep up with possible keys from the Stripe API, see:\r\n *\r\n * https://stripe.com/docs/api#errors\r\n *\r\n * Note that at least at moment, the above link doesn't list all the\r\n * error codes that the API returns.\r\n *\r\n * @param {Object} intl - react-intl object from injectIntl\r\n * @param {Object} stripeError - error object from Stripe API\r\n *\r\n * @return {String} translation message for the specific Stripe error,\r\n * or the given error message (not translated) if the specific error\r\n * type/code is not defined in the translations\r\n *\r\n */\r\nconst stripeErrorTranslation = (intl, stripeError) => {\r\n  const { message, code, type } = stripeError;\r\n\r\n  if (!code || !type) {\r\n    // Not a proper Stripe error object\r\n    return intl.formatMessage({ id: 'PaymentMethodsForm.genericError' });\r\n  }\r\n\r\n  const translationId =\r\n    type === 'validation_error'\r\n      ? `PaymentMethodsForm.stripe.validation_error.${code}`\r\n      : `PaymentMethodsForm.stripe.${type}`;\r\n\r\n  return intl.formatMessage({\r\n    id: translationId,\r\n    defaultMessage: message,\r\n  });\r\n};\r\n\r\nconst stripeElementsOptions = {\r\n  fonts: [\r\n    {\r\n      cssSrc: 'https://fonts.googleapis.com/css?family=Inter',\r\n    },\r\n  ],\r\n};\r\n\r\n// card (being a Stripe Elements component), can have own styling passed to it.\r\n// However, its internal width-calculation seems to break if font-size is too big\r\n// compared to component's own width.\r\nconst isMobile = typeof window !== 'undefined' && window.innerWidth < 768;\r\nconst cardStyles = {\r\n  base: {\r\n    fontFamily: '-apple-system, BlinkMacSystemFont, \"Inter var\", Helvetica, Arial, sans-serif',\r\n    fontSize: isMobile ? '14px' : '16px',\r\n    fontSmoothing: 'antialiased',\r\n    lineHeight: '24px',\r\n    letterSpacing: '-0.1px',\r\n    color: '#4A4A4A',\r\n    '::placeholder': {\r\n      color: '#B2B2B2',\r\n    },\r\n  },\r\n};\r\n\r\nconst initialState = {\r\n  error: null,\r\n  cardValueValid: false,\r\n};\r\n\r\n/**\r\n * Payment methods form that asks for credit card info using Stripe Elements.\r\n *\r\n * When the card is valid and the user submits the form, a request is\r\n * sent to the Stripe API to handle card setup. `stripe.handleCardSetup`\r\n * may ask more details from cardholder if 3D security steps are needed.\r\n *\r\n * See: https://stripe.com/docs/payments/payment-intents\r\n *      https://stripe.com/docs/elements\r\n */\r\nclass PaymentMethodsForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = initialState;\r\n    this.handleCardValueChange = this.handleCardValueChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.paymentForm = this.paymentForm.bind(this);\r\n    this.finalFormAPI = null;\r\n    this.stripe = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!window.Stripe) {\r\n      throw new Error('Stripe must be loaded for PaymentMethodsForm');\r\n    }\r\n\r\n    const publishableKey = this.props.config?.stripe?.publishableKey;\r\n    if (publishableKey) {\r\n      this.stripe = window.Stripe(publishableKey);\r\n\r\n      const elements = this.stripe.elements(stripeElementsOptions);\r\n      this.card = elements.create('card', { style: cardStyles });\r\n      this.card.mount(this.cardContainer);\r\n      this.card.addEventListener('change', this.handleCardValueChange);\r\n      // EventListener is the only way to simulate breakpoints with Stripe.\r\n      window.addEventListener('resize', () => {\r\n        if (window.innerWidth < 768) {\r\n          this.card.update({ style: { base: { fontSize: '14px', lineHeight: '24px' } } });\r\n        } else {\r\n          this.card.update({ style: { base: { fontSize: '18px', lineHeight: '24px' } } });\r\n        }\r\n      });\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    if (this.card) {\r\n      this.card.removeEventListener('change', this.handleCardValueChange);\r\n      this.card.unmount();\r\n    }\r\n  }\r\n  handleCardValueChange(event) {\r\n    const { intl } = this.props;\r\n    const { error, complete } = event;\r\n\r\n    const postalCode = event.value.postalCode;\r\n    if (this.finalFormAPI) {\r\n      this.finalFormAPI.change('postal', postalCode);\r\n    }\r\n\r\n    this.setState(prevState => {\r\n      return {\r\n        error: error ? stripeErrorTranslation(intl, error) : null,\r\n        cardValueValid: complete,\r\n      };\r\n    });\r\n  }\r\n  handleSubmit(values) {\r\n    const { onSubmit, inProgress, formId } = this.props;\r\n    const cardInputNeedsAttention = !this.state.cardValueValid;\r\n\r\n    if (inProgress || cardInputNeedsAttention) {\r\n      // Already submitting or card value incomplete/invalid\r\n      return;\r\n    }\r\n\r\n    const params = {\r\n      stripe: this.stripe,\r\n      card: this.card,\r\n      formId,\r\n      formValues: values,\r\n    };\r\n\r\n    onSubmit(params);\r\n  }\r\n\r\n  paymentForm(formRenderProps) {\r\n    const {\r\n      className,\r\n      rootClassName,\r\n      inProgress: submitInProgress,\r\n      formId,\r\n      intl,\r\n      invalid,\r\n      handleSubmit,\r\n      addPaymentMethodError,\r\n      deletePaymentMethodError,\r\n      createStripeCustomerError,\r\n      handleCardSetupError,\r\n      form,\r\n      config,\r\n    } = formRenderProps;\r\n\r\n    this.finalFormAPI = form;\r\n    const cardInputNeedsAttention = !this.state.cardValueValid;\r\n    const submitDisabled = invalid || cardInputNeedsAttention || submitInProgress;\r\n    const hasCardError = this.state.error && !submitInProgress;\r\n    const classes = classNames(rootClassName || css.root, className);\r\n    const cardClasses = classNames(css.card, {\r\n      [css.cardSuccess]: this.state.cardValueValid,\r\n      [css.cardError]: hasCardError,\r\n    });\r\n\r\n    const hasErrors =\r\n      addPaymentMethodError ||\r\n      deletePaymentMethodError ||\r\n      createStripeCustomerError ||\r\n      handleCardSetupError;\r\n\r\n    const errorMessage = intl.formatMessage({ id: 'PaymentMethodsForm.genericError' });\r\n\r\n    const billingDetailsNameLabel = intl.formatMessage({\r\n      id: 'PaymentMethodsForm.billingDetailsNameLabel',\r\n    });\r\n\r\n    const billingDetailsNamePlaceholder = intl.formatMessage({\r\n      id: 'PaymentMethodsForm.billingDetailsNamePlaceholder',\r\n    });\r\n\r\n    const infoText = intl.formatMessage(\r\n      {\r\n        id: 'PaymentMethodsForm.infoText',\r\n      },\r\n      { marketplaceName: config.marketplaceName }\r\n    );\r\n\r\n    // Stripe recommends asking billing address.\r\n    // In PaymentMethodsForm, we send name and email as billing details, but address only if it exists.\r\n    const billingAddress = (\r\n      <StripePaymentAddress\r\n        intl={intl}\r\n        form={form}\r\n        fieldId={formId}\r\n        card={this.card}\r\n        locale={config.localization.locale}\r\n      />\r\n    );\r\n\r\n    const hasStripeKey = config.stripe.publishableKey;\r\n\r\n    return hasStripeKey ? (\r\n      <Form className={classes} onSubmit={handleSubmit}>\r\n        <label className={css.paymentLabel} htmlFor={`${formId}-card`}>\r\n          <FormattedMessage id=\"PaymentMethodsForm.paymentCardDetails\" />\r\n        </label>\r\n\r\n        <div\r\n          className={cardClasses}\r\n          id={`${formId}-card`}\r\n          ref={el => {\r\n            this.cardContainer = el;\r\n          }}\r\n        />\r\n        <div className={css.infoText}>{infoText}</div>\r\n        {hasCardError ? <span className={css.error}>{this.state.error}</span> : null}\r\n        <div className={css.paymentAddressField}>\r\n          <H4 as=\"h3\">\r\n            <FormattedMessage id=\"PaymentMethodsForm.billingDetails\" />\r\n          </H4>\r\n\r\n          <FieldTextInput\r\n            className={css.field}\r\n            type=\"text\"\r\n            id=\"name\"\r\n            name=\"name\"\r\n            autoComplete=\"cc-name\"\r\n            label={billingDetailsNameLabel}\r\n            placeholder={billingDetailsNamePlaceholder}\r\n          />\r\n\r\n          {billingAddress}\r\n        </div>\r\n\r\n        <div className={css.submitContainer}>\r\n          {hasErrors ? (\r\n            <span className={css.errorMessage}>\r\n              {hasErrors.message ? hasErrors.message : errorMessage}\r\n            </span>\r\n          ) : null}\r\n          <PrimaryButton\r\n            className={css.submitButton}\r\n            type=\"submit\"\r\n            inProgress={submitInProgress}\r\n            disabled={submitDisabled}\r\n          >\r\n            <FormattedMessage id=\"PaymentMethodsForm.submitPaymentInfo\" />\r\n          </PrimaryButton>\r\n        </div>\r\n      </Form>\r\n    ) : (\r\n      <div className={css.missingStripeKey}>\r\n        <FormattedMessage id=\"PaymentMethodsForm.missingStripeKey\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { onSubmit, ...rest } = this.props;\r\n    return <FinalForm onSubmit={this.handleSubmit} {...rest} render={this.paymentForm} />;\r\n  }\r\n}\r\n\r\nPaymentMethodsForm.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n  inProgress: false,\r\n  onSubmit: null,\r\n  addPaymentMethodError: null,\r\n  deletePaymentMethodError: null,\r\n  createStripeCustomerError: null,\r\n  handleCardSetupError: null,\r\n  form: null,\r\n};\r\n\r\nPaymentMethodsForm.propTypes = {\r\n  formId: string,\r\n  onSubmit: func,\r\n  addPaymentMethodError: object,\r\n  deletePaymentMethodError: object,\r\n  createStripeCustomerError: object,\r\n  handleCardSetupError: object,\r\n  form: object,\r\n\r\n  // from useIntl\r\n  intl: intlShape.isRequired,\r\n  // from useConfiguration\r\n  config: object.isRequired,\r\n};\r\n\r\nconst EnhancedPaymentMethodsForm = props => {\r\n  const config = useConfiguration();\r\n  const intl = useIntl();\r\n  return <PaymentMethodsForm config={config} intl={intl} {...props} />;\r\n};\r\nexport default EnhancedPaymentMethodsForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"PaymentMethodsPage_content__3X1Dt\",\"desktopTopbar\":\"PaymentMethodsPage_desktopTopbar__W5r3o\",\"mobileTopbar\":\"PaymentMethodsPage_mobileTopbar__9YjSm\"};","import React, { useState } from 'react';\r\nimport { bool, func, object } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\r\nimport { ensureCurrentUser, ensureStripeCustomer, ensurePaymentMethodCard } from '../../util/data';\r\nimport { propTypes } from '../../util/types';\r\nimport { savePaymentMethod, deletePaymentMethod } from '../../ducks/paymentMethods.duck';\r\nimport { handleCardSetup } from '../../ducks/stripe.duck';\r\nimport { manageDisableScrolling, isScrollingDisabled } from '../../ducks/ui.duck';\r\n\r\nimport { H3, SavedCardDetails, Page, UserNav, LayoutSideNavigation } from '../../components';\r\n\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\nimport FooterContainer from '../../containers/FooterContainer/FooterContainer';\r\n\r\nimport PaymentMethodsForm from './PaymentMethodsForm/PaymentMethodsForm';\r\n\r\nimport { createStripeSetupIntent, stripeCustomer } from './PaymentMethodsPage.duck.js';\r\n\r\nimport css from './PaymentMethodsPage.module.css';\r\n\r\nconst PaymentMethodsPageComponent = props => {\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [cardState, setCardState] = useState(null);\r\n\r\n  const {\r\n    currentUser,\r\n    addPaymentMethodError,\r\n    deletePaymentMethodError,\r\n    createStripeCustomerError,\r\n    handleCardSetupError,\r\n    deletePaymentMethodInProgress,\r\n    onCreateSetupIntent,\r\n    onHandleCardSetup,\r\n    onSavePaymentMethod,\r\n    onDeletePaymentMethod,\r\n    fetchStripeCustomer,\r\n    scrollingDisabled,\r\n    onManageDisableScrolling,\r\n    intl,\r\n    stripeCustomerFetched,\r\n  } = props;\r\n\r\n  const getClientSecret = setupIntent => {\r\n    return setupIntent && setupIntent.attributes ? setupIntent.attributes.clientSecret : null;\r\n  };\r\n  const getPaymentParams = (currentUser, formValues) => {\r\n    const { name, addressLine1, addressLine2, postal, state, city, country } = formValues;\r\n    const addressMaybe =\r\n      addressLine1 && postal\r\n        ? {\r\n            address: {\r\n              city: city,\r\n              country: country,\r\n              line1: addressLine1,\r\n              line2: addressLine2,\r\n              postal_code: postal,\r\n              state: state,\r\n            },\r\n          }\r\n        : {};\r\n    const billingDetails = {\r\n      name,\r\n      email: ensureCurrentUser(currentUser).attributes.email,\r\n      ...addressMaybe,\r\n    };\r\n\r\n    const paymentParams = {\r\n      payment_method_data: {\r\n        billing_details: billingDetails,\r\n      },\r\n    };\r\n\r\n    return paymentParams;\r\n  };\r\n\r\n  const handleSubmit = params => {\r\n    setIsSubmitting(true);\r\n    const ensuredCurrentUser = ensureCurrentUser(currentUser);\r\n    const stripeCustomer = ensuredCurrentUser.stripeCustomer;\r\n    const { stripe, card, formValues } = params;\r\n\r\n    onCreateSetupIntent()\r\n      .then(setupIntent => {\r\n        const stripeParams = {\r\n          stripe,\r\n          card,\r\n          setupIntentClientSecret: getClientSecret(setupIntent),\r\n          paymentParams: getPaymentParams(currentUser, formValues),\r\n        };\r\n\r\n        return onHandleCardSetup(stripeParams);\r\n      })\r\n      .then(result => {\r\n        const newPaymentMethod = result.setupIntent.payment_method;\r\n        // Note: stripe.handleCardSetup might return an error inside successful call (200), but those are rejected in thunk functions.\r\n\r\n        return onSavePaymentMethod(stripeCustomer, newPaymentMethod);\r\n      })\r\n      .then(() => {\r\n        // Update currentUser entity and its sub entities: stripeCustomer and defaultPaymentMethod\r\n        fetchStripeCustomer();\r\n        setIsSubmitting(false);\r\n        setCardState('default');\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n        setIsSubmitting(false);\r\n      });\r\n  };\r\n\r\n  const handleRemovePaymentMethod = () => {\r\n    onDeletePaymentMethod().then(() => {\r\n      fetchStripeCustomer();\r\n    });\r\n  };\r\n\r\n  const title = intl.formatMessage({ id: 'PaymentMethodsPage.title' });\r\n\r\n  const ensuredCurrentUser = ensureCurrentUser(currentUser);\r\n  const currentUserLoaded = !!ensuredCurrentUser.id;\r\n\r\n  const hasDefaultPaymentMethod =\r\n    currentUser &&\r\n    ensureStripeCustomer(currentUser.stripeCustomer).attributes.stripeCustomerId &&\r\n    ensurePaymentMethodCard(currentUser.stripeCustomer.defaultPaymentMethod).id;\r\n\r\n  // Get first and last name of the current user and use it in the StripePaymentForm to autofill the name field\r\n  const userName = currentUserLoaded\r\n    ? `${ensuredCurrentUser.attributes.profile.firstName} ${ensuredCurrentUser.attributes.profile.lastName}`\r\n    : null;\r\n\r\n  const initalValuesForStripePayment = { name: userName };\r\n\r\n  const card = hasDefaultPaymentMethod\r\n    ? ensurePaymentMethodCard(currentUser.stripeCustomer.defaultPaymentMethod).attributes.card\r\n    : null;\r\n\r\n  const showForm = cardState === 'replaceCard' || !hasDefaultPaymentMethod;\r\n  const showCardDetails = !!hasDefaultPaymentMethod;\r\n  return (\r\n    <Page title={title} scrollingDisabled={scrollingDisabled}>\r\n      <LayoutSideNavigation\r\n        topbar={\r\n          <>\r\n            <TopbarContainer\r\n              currentPage=\"PaymentMethodsPage\"\r\n              desktopClassName={css.desktopTopbar}\r\n              mobileClassName={css.mobileTopbar}\r\n            />\r\n            <UserNav currentPage=\"PaymentMethodsPage\" />\r\n          </>\r\n        }\r\n        sideNav={null}\r\n        useAccountSettingsNav\r\n        currentPage=\"PaymentMethodsPage\"\r\n        footer={<FooterContainer />}\r\n      >\r\n        <div className={css.content}>\r\n          <H3 as=\"h1\">\r\n            <FormattedMessage id=\"PaymentMethodsPage.heading\" />\r\n          </H3>\r\n          {!stripeCustomerFetched ? null : (\r\n            <>\r\n              {showCardDetails ? (\r\n                <SavedCardDetails\r\n                  card={card}\r\n                  onManageDisableScrolling={onManageDisableScrolling}\r\n                  onChange={setCardState}\r\n                  onDeleteCard={handleRemovePaymentMethod}\r\n                  deletePaymentMethodInProgress={deletePaymentMethodInProgress}\r\n                />\r\n              ) : null}\r\n              {showForm ? (\r\n                <PaymentMethodsForm\r\n                  className={css.paymentForm}\r\n                  formId=\"PaymentMethodsForm\"\r\n                  initialValues={initalValuesForStripePayment}\r\n                  onSubmit={handleSubmit}\r\n                  handleRemovePaymentMethod={handleRemovePaymentMethod}\r\n                  hasDefaultPaymentMethod={hasDefaultPaymentMethod}\r\n                  addPaymentMethodError={addPaymentMethodError}\r\n                  deletePaymentMethodError={deletePaymentMethodError}\r\n                  createStripeCustomerError={createStripeCustomerError}\r\n                  handleCardSetupError={handleCardSetupError}\r\n                  inProgress={isSubmitting}\r\n                />\r\n              ) : null}\r\n            </>\r\n          )}\r\n        </div>\r\n      </LayoutSideNavigation>\r\n    </Page>\r\n  );\r\n};\r\n\r\nPaymentMethodsPageComponent.defaultProps = {\r\n  currentUser: null,\r\n  addPaymentMethodError: null,\r\n  deletePaymentMethodError: null,\r\n  createStripeCustomerError: null,\r\n  handleCardSetupError: null,\r\n};\r\n\r\nPaymentMethodsPageComponent.propTypes = {\r\n  currentUser: propTypes.currentUser,\r\n  scrollingDisabled: bool.isRequired,\r\n  addPaymentMethodError: object,\r\n  deletePaymentMethodError: object,\r\n  createStripeCustomerError: object,\r\n  handleCardSetupError: object,\r\n  onCreateSetupIntent: func.isRequired,\r\n  onHandleCardSetup: func.isRequired,\r\n  onSavePaymentMethod: func.isRequired,\r\n  onDeletePaymentMethod: func.isRequired,\r\n  fetchStripeCustomer: func.isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const { currentUser } = state.user;\r\n\r\n  const {\r\n    deletePaymentMethodInProgress,\r\n    addPaymentMethodError,\r\n    deletePaymentMethodError,\r\n    createStripeCustomerError,\r\n  } = state.paymentMethods;\r\n\r\n  const { stripeCustomerFetched } = state.PaymentMethodsPage;\r\n\r\n  const { handleCardSetupError } = state.stripe;\r\n  return {\r\n    currentUser,\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n    deletePaymentMethodInProgress,\r\n    addPaymentMethodError,\r\n    deletePaymentMethodError,\r\n    createStripeCustomerError,\r\n    handleCardSetupError,\r\n    stripeCustomerFetched,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onManageDisableScrolling: (componentId, disableScrolling) =>\r\n    dispatch(manageDisableScrolling(componentId, disableScrolling)),\r\n  fetchStripeCustomer: () => dispatch(stripeCustomer()),\r\n  onHandleCardSetup: params => dispatch(handleCardSetup(params)),\r\n  onCreateSetupIntent: params => dispatch(createStripeSetupIntent(params)),\r\n  onSavePaymentMethod: (stripeCustomer, newPaymentMethod) =>\r\n    dispatch(savePaymentMethod(stripeCustomer, newPaymentMethod)),\r\n  onDeletePaymentMethod: params => dispatch(deletePaymentMethod(params)),\r\n});\r\n\r\nconst PaymentMethodsPage = compose(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  ),\r\n  injectIntl\r\n)(PaymentMethodsPageComponent);\r\n\r\nexport default PaymentMethodsPage;\r\n"],"names":["stripeErrorTranslation","intl","stripeError","message","code","type","formatMessage","id","translationId","concat","defaultMessage","stripeElementsOptions","fonts","cssSrc","cardStyles","base","fontFamily","fontSize","window","innerWidth","fontSmoothing","lineHeight","letterSpacing","color","initialState","error","cardValueValid","PaymentMethodsForm","Component","constructor","props","super","this","state","handleCardValueChange","bind","handleSubmit","paymentForm","finalFormAPI","stripe","componentDidMount","_this$props$config","_this$props$config$st","Stripe","Error","publishableKey","config","elements","card","create","style","mount","cardContainer","addEventListener","update","componentWillUnmount","removeEventListener","unmount","event","complete","postalCode","value","change","setState","prevState","values","onSubmit","inProgress","formId","cardInputNeedsAttention","formValues","formRenderProps","className","rootClassName","submitInProgress","invalid","addPaymentMethodError","deletePaymentMethodError","createStripeCustomerError","handleCardSetupError","form","submitDisabled","hasCardError","classes","classNames","css","root","cardClasses","cardSuccess","cardError","hasErrors","errorMessage","billingDetailsNameLabel","billingDetailsNamePlaceholder","infoText","marketplaceName","billingAddress","React","StripePaymentAddress","fieldId","locale","localization","Form","paymentLabel","htmlFor","FormattedMessage","ref","el","paymentAddressField","H4","as","FieldTextInput","field","name","autoComplete","label","placeholder","submitContainer","PrimaryButton","submitButton","disabled","missingStripeKey","render","rest","FinalForm","Object","assign","defaultProps","useConfiguration","useIntl","PaymentMethodsPageComponent","isSubmitting","setIsSubmitting","useState","cardState","setCardState","currentUser","deletePaymentMethodInProgress","onCreateSetupIntent","onHandleCardSetup","onSavePaymentMethod","onDeletePaymentMethod","fetchStripeCustomer","scrollingDisabled","onManageDisableScrolling","stripeCustomerFetched","getClientSecret","setupIntent","attributes","clientSecret","getPaymentParams","addressLine1","addressLine2","postal","city","country","addressMaybe","address","line1","line2","postal_code","payment_method_data","billing_details","email","ensureCurrentUser","handleRemovePaymentMethod","then","title","ensuredCurrentUser","currentUserLoaded","hasDefaultPaymentMethod","ensureStripeCustomer","stripeCustomer","stripeCustomerId","ensurePaymentMethodCard","defaultPaymentMethod","initalValuesForStripePayment","profile","firstName","lastName","showForm","showCardDetails","Page","LayoutSideNavigation","topbar","TopbarContainer","currentPage","desktopClassName","desktopTopbar","mobileClassName","mobileTopbar","UserNav","sideNav","useAccountSettingsNav","footer","FooterContainer","content","H3","SavedCardDetails","onChange","onDeleteCard","initialValues","params","stripeParams","setupIntentClientSecret","paymentParams","result","newPaymentMethod","payment_method","catch","console","compose","connect","user","paymentMethods","PaymentMethodsPage","isScrollingDisabled","dispatch","componentId","disableScrolling","manageDisableScrolling","handleCardSetup","createStripeSetupIntent","savePaymentMethod","deletePaymentMethod","injectIntl"],"sourceRoot":""}