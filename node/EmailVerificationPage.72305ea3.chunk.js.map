{"version":3,"file":"EmailVerificationPage.72305ea3.chunk.js","mappings":"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","sources":["webpack://app/./src/containers/EmailVerificationPage/EmailVerificationForm/EmailVerificationForm.module.css?242f","containers/EmailVerificationPage/EmailVerificationForm/EmailVerificationForm.js","webpack://app/./src/containers/EmailVerificationPage/EmailVerificationPage.module.css?44da","containers/EmailVerificationPage/EmailVerificationPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"EmailVerificationForm_root__e7Hr4 marketplaceModalFormRootStyles\",\"bottomWrapper\":\"EmailVerificationForm_bottomWrapper__VbUp7 marketplaceModalBottomWrapper\",\"modalTitle\":\"EmailVerificationForm_modalTitle__Rjtu4 marketplaceModalTitleStyles\",\"modalMessage\":\"EmailVerificationForm_modalMessage__1F4OP marketplaceModalParagraphStyles\",\"error\":\"EmailVerificationForm_error__2WAt+ marketplaceModalPasswordMargins\",\"submitButton\":\"EmailVerificationForm_submitButton__Lcur6 buttonPrimary\",\"modalIcon\":\"EmailVerificationForm_modalIcon__51R3S marketplaceModalIconStyles\"};","import React from 'react';\r\nimport { bool } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\n\r\nimport { FormattedMessage, injectIntl } from '../../../util/reactIntl';\r\nimport { propTypes } from '../../../util/types';\r\nimport {\r\n  Heading,\r\n  Form,\r\n  NamedLink,\r\n  IconEmailAttention,\r\n  IconEmailSuccess,\r\n  PrimaryButton,\r\n} from '../../../components';\r\n\r\nimport css from './EmailVerificationForm.module.css';\r\n\r\nconst EmailVerificationFormComponent = props => (\r\n  <FinalForm\r\n    {...props}\r\n    render={formRenderProps => {\r\n      const { currentUser, inProgress, handleSubmit, verificationError } = formRenderProps;\r\n\r\n      const { email, emailVerified, pendingEmail, profile } = currentUser.attributes;\r\n      const emailToVerify = <strong>{pendingEmail || email}</strong>;\r\n      const name = profile.firstName;\r\n\r\n      const errorMessage = (\r\n        <div className={css.error}>\r\n          <FormattedMessage id=\"EmailVerificationForm.verificationFailed\" />\r\n        </div>\r\n      );\r\n\r\n      const submitInProgress = inProgress;\r\n      const submitDisabled = submitInProgress;\r\n\r\n      const verifyEmail = (\r\n        <div className={css.root}>\r\n          <div>\r\n            <IconEmailAttention className={css.modalIcon} />\r\n            <Heading as=\"h1\" rootClassName={css.modalTitle}>\r\n              <FormattedMessage id=\"EmailVerificationForm.verifyEmailAddress\" />\r\n            </Heading>\r\n\r\n            <p className={css.modalMessage}>\r\n              <FormattedMessage\r\n                id=\"EmailVerificationForm.finishAccountSetup\"\r\n                values={{ email: emailToVerify }}\r\n              />\r\n            </p>\r\n\r\n            {verificationError ? errorMessage : null}\r\n          </div>\r\n\r\n          <Form onSubmit={handleSubmit}>\r\n            <Field component=\"input\" type=\"hidden\" name=\"verificationToken\" />\r\n\r\n            <div className={css.bottomWrapper}>\r\n              <PrimaryButton type=\"submit\" inProgress={submitInProgress} disabled={submitDisabled}>\r\n                {inProgress ? (\r\n                  <FormattedMessage id=\"EmailVerificationForm.verifying\" />\r\n                ) : (\r\n                  <FormattedMessage id=\"EmailVerificationForm.verify\" />\r\n                )}\r\n              </PrimaryButton>\r\n            </div>\r\n          </Form>\r\n        </div>\r\n      );\r\n\r\n      const alreadyVerified = (\r\n        <div className={css.root}>\r\n          <div>\r\n            <IconEmailSuccess className={css.modalIcon} />\r\n            <Heading as=\"h1\" rootClassName={css.modalTitle}>\r\n              <FormattedMessage id=\"EmailVerificationForm.successTitle\" values={{ name }} />\r\n            </Heading>\r\n\r\n            <p className={css.modalMessage}>\r\n              <FormattedMessage id=\"EmailVerificationForm.successText\" />\r\n            </p>\r\n          </div>\r\n\r\n          <div className={css.bottomWrapper}>\r\n            <NamedLink className={css.submitButton} name=\"LandingPage\">\r\n              <FormattedMessage id=\"EmailVerificationForm.successButtonText\" />\r\n            </NamedLink>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n      const currentEmail = <strong>{email}</strong>;\r\n      const alreadyVerifiedButErrorReturned = (\r\n        <div className={css.root}>\r\n          <div>\r\n            <IconEmailSuccess className={css.modalIcon} />\r\n            <Heading as=\"h1\" rootClassName={css.modalTitle}>\r\n              <FormattedMessage id=\"EmailVerificationForm.noPendingTitle\" values={{ name }} />\r\n            </Heading>\r\n\r\n            <p className={css.modalMessage}>\r\n              <FormattedMessage\r\n                id=\"EmailVerificationForm.noPendingText\"\r\n                values={{ email: currentEmail, lineBreak: <br /> }}\r\n              />\r\n            </p>\r\n          </div>\r\n\r\n          <div className={css.bottomWrapper}>\r\n            <NamedLink className={css.submitButton} name=\"LandingPage\">\r\n              <FormattedMessage id=\"EmailVerificationForm.successButtonText\" />\r\n            </NamedLink>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n      const anyPendingEmailHasBeenVerifiedForCurrentUser = emailVerified && !pendingEmail;\r\n      return anyPendingEmailHasBeenVerifiedForCurrentUser && verificationError\r\n        ? alreadyVerifiedButErrorReturned\r\n        : anyPendingEmailHasBeenVerifiedForCurrentUser\r\n        ? alreadyVerified\r\n        : verifyEmail;\r\n    }}\r\n  />\r\n);\r\n\r\nEmailVerificationFormComponent.defaultProps = {\r\n  currentUser: null,\r\n  inProgress: false,\r\n  verificationError: null,\r\n};\r\n\r\nEmailVerificationFormComponent.propTypes = {\r\n  inProgress: bool,\r\n  currentUser: propTypes.currentUser.isRequired,\r\n  verificationError: propTypes.error,\r\n};\r\n\r\nconst EmailVerificationForm = compose(injectIntl)(EmailVerificationFormComponent);\r\n\r\nexport default EmailVerificationForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"layoutWrapperMain\":\"EmailVerificationPage_layoutWrapperMain__Lkj6T\",\"root\":\"EmailVerificationPage_root__JAhpS\",\"contentContainer\":\"EmailVerificationPage_contentContainer__BIS88 marketplaceModalRootStyles\",\"content\":\"EmailVerificationPage_content__5A5OM marketplaceModalBaseStyles\",\"error\":\"EmailVerificationPage_error__k+OgN marketplaceModalPasswordMargins\"};","import React from 'react';\r\nimport { bool, func, shape, string } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport { useConfiguration } from '../../context/configurationContext';\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\r\nimport { propTypes } from '../../util/types';\r\nimport { parse } from '../../util/urlHelpers';\r\nimport { ensureCurrentUser } from '../../util/data';\r\nimport { verify } from '../../ducks/emailVerification.duck';\r\nimport { isScrollingDisabled } from '../../ducks/ui.duck';\r\nimport {\r\n  Page,\r\n  ResponsiveBackgroundImageContainer,\r\n  NamedRedirect,\r\n  LayoutSingleColumn,\r\n} from '../../components';\r\n\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\nimport FooterContainer from '../../containers/FooterContainer/FooterContainer';\r\n\r\nimport EmailVerificationForm from './EmailVerificationForm/EmailVerificationForm';\r\n\r\nimport css from './EmailVerificationPage.module.css';\r\n\r\n/**\r\n  Parse verification token from URL\r\n\r\n  Returns stringified token, if the token is provided.\r\n\r\n  Returns `null` if verification token is not provided.\r\n\r\n  Please note that we need to explicitely stringify the token, because\r\n  the unwanted result of the `parse` method is that it automatically\r\n  parses the token to number.\r\n*/\r\nconst parseVerificationToken = search => {\r\n  const urlParams = parse(search);\r\n  const verificationToken = urlParams.t;\r\n\r\n  if (verificationToken) {\r\n    return `${verificationToken}`;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const EmailVerificationPageComponent = props => {\r\n  const config = useConfiguration();\r\n  const {\r\n    currentUser,\r\n    intl,\r\n    scrollingDisabled,\r\n    submitVerification,\r\n    isVerified,\r\n    emailVerificationInProgress,\r\n    verificationError,\r\n    location,\r\n  } = props;\r\n\r\n  const initialValues = {\r\n    verificationToken: parseVerificationToken(location ? location.search : null),\r\n  };\r\n  const user = ensureCurrentUser(currentUser);\r\n\r\n  // The first attempt to verify email is done when the page is loaded\r\n  // If the verify API call is successfull and the user has verified email\r\n  // We can redirect user forward from email verification page.\r\n  if (isVerified && user && user.attributes.emailVerified) {\r\n    return <NamedRedirect name=\"LandingPage\" />;\r\n  }\r\n\r\n  return (\r\n    <Page\r\n      title={intl.formatMessage({\r\n        id: 'EmailVerificationPage.title',\r\n      })}\r\n      scrollingDisabled={scrollingDisabled}\r\n      referrer=\"origin\"\r\n    >\r\n      <LayoutSingleColumn\r\n        mainColumnClassName={css.layoutWrapperMain}\r\n        topbar={<TopbarContainer />}\r\n        footer={<FooterContainer />}\r\n      >\r\n        <ResponsiveBackgroundImageContainer\r\n          className={css.root}\r\n          childrenWrapperClassName={css.contentContainer}\r\n          as=\"section\"\r\n          image={config.branding.brandImage}\r\n          sizes=\"100%\"\r\n          useOverlay\r\n        >\r\n          <div className={css.content}>\r\n            {user.id ? (\r\n              <EmailVerificationForm\r\n                initialValues={initialValues}\r\n                onSubmit={submitVerification}\r\n                currentUser={user}\r\n                inProgress={emailVerificationInProgress}\r\n                verificationError={verificationError}\r\n              />\r\n            ) : (\r\n              <FormattedMessage id=\"EmailVerificationPage.loadingUserInformation\" />\r\n            )}\r\n          </div>\r\n        </ResponsiveBackgroundImageContainer>\r\n      </LayoutSingleColumn>\r\n    </Page>\r\n  );\r\n};\r\n\r\nEmailVerificationPageComponent.defaultProps = {\r\n  currentUser: null,\r\n  verificationError: null,\r\n};\r\n\r\nEmailVerificationPageComponent.propTypes = {\r\n  currentUser: propTypes.currentUser,\r\n  scrollingDisabled: bool.isRequired,\r\n  submitVerification: func.isRequired,\r\n  isVerified: bool,\r\n  emailVerificationInProgress: bool.isRequired,\r\n  verificationError: propTypes.error,\r\n\r\n  // from withRouter\r\n  location: shape({\r\n    search: string,\r\n  }).isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const { currentUser } = state.user;\r\n  const { isVerified, verificationError, verificationInProgress } = state.emailVerification;\r\n  return {\r\n    isVerified,\r\n    verificationError,\r\n    emailVerificationInProgress: verificationInProgress,\r\n    currentUser,\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  submitVerification: ({ verificationToken }) => {\r\n    return dispatch(verify(verificationToken));\r\n  },\r\n});\r\n\r\n// Note: it is important that the withRouter HOC is **outside** the\r\n// connect HOC, otherwise React Router won't rerender any Route\r\n// components since connect implements a shouldComponentUpdate\r\n// lifecycle hook.\r\n//\r\n// See: https://github.com/ReactTraining/react-router/issues/4671\r\nconst EmailVerificationPage = compose(\r\n  withRouter,\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  ),\r\n  injectIntl\r\n)(EmailVerificationPageComponent);\r\n\r\nexport default EmailVerificationPage;\r\n"],"names":["EmailVerificationFormComponent","props","React","FinalForm","Object","assign","render","formRenderProps","currentUser","inProgress","handleSubmit","verificationError","email","emailVerified","pendingEmail","profile","attributes","emailToVerify","name","firstName","errorMessage","className","css","FormattedMessage","id","submitInProgress","submitDisabled","verifyEmail","IconEmailAttention","Heading","as","rootClassName","values","Form","onSubmit","Field","component","type","PrimaryButton","disabled","alreadyVerified","IconEmailSuccess","NamedLink","currentEmail","alreadyVerifiedButErrorReturned","lineBreak","anyPendingEmailHasBeenVerifiedForCurrentUser","defaultProps","compose","injectIntl","parseVerificationToken","search","verificationToken","parse","t","concat","EmailVerificationPageComponent","config","useConfiguration","intl","scrollingDisabled","submitVerification","isVerified","emailVerificationInProgress","location","initialValues","user","ensureCurrentUser","NamedRedirect","Page","title","formatMessage","referrer","LayoutSingleColumn","mainColumnClassName","topbar","TopbarContainer","footer","FooterContainer","ResponsiveBackgroundImageContainer","childrenWrapperClassName","image","branding","brandImage","sizes","useOverlay","EmailVerificationForm","withRouter","connect","state","verificationInProgress","emailVerification","isScrollingDisabled","dispatch","_ref","verify"],"sourceRoot":""}