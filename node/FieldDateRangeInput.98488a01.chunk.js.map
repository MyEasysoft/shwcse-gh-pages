{"version":3,"file":"FieldDateRangeInput.98488a01.chunk.js","mappings":"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","sources":["webpack://app/./src/components/FieldDateRangeInput/DateRangeInput.module.css?8250","components/FieldDateRangeInput/DateRangeInput.js","webpack://app/./src/components/FieldDateRangeInput/FieldDateRangeInput.module.css?00bf","components/FieldDateRangeInput/FieldDateRangeInput.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"inputRoot\":\"DateRangeInput_inputRoot__Ms+ns\",\"withMobileMargins\":\"DateRangeInput_withMobileMargins__1epGR\",\"arrowIcon\":\"DateRangeInput_arrowIcon__1mTBN\"};","/**\r\n * DateRangeInput wraps DateRangePicker from React-dates and gives a list of all default props we use.\r\n * Styles for DateRangePicker can be found from 'public/reactDates.css'.\r\n *\r\n * N.B. *isOutsideRange* in defaultProps is defining what dates are available to booking.\r\n */\r\nimport React, { Component } from 'react';\r\nimport { bool, func, instanceOf, oneOf, shape, string } from 'prop-types';\r\nimport { DateRangePicker } from 'react-dates';\r\nimport classNames from 'classnames';\r\nimport moment from 'moment';\r\n\r\nimport { intlShape, injectIntl } from '../../util/reactIntl';\r\nimport { START_DATE, END_DATE } from '../../util/dates';\r\n\r\nimport { IconArrowHead } from '../../components';\r\nimport css from './DateRangeInput.module.css';\r\n\r\nexport const HORIZONTAL_ORIENTATION = 'horizontal';\r\nexport const ANCHOR_LEFT = 'left';\r\n\r\n// When the unit type is day, the endDate of booking range is exclusive.\r\n// In the UI picker, we show only inclusive dates\r\nconst apiEndDateToPickerDate = (isDaily, endDate) => {\r\n  const isValid = endDate instanceof Date;\r\n\r\n  // API end dates are exlusive, so we need to shift them with daily\r\n  // booking.\r\n  return isValid && isDaily\r\n    ? moment(endDate).subtract(1, 'days')\r\n    : isValid\r\n    ? moment(endDate)\r\n    : null;\r\n};\r\n\r\n// When the unit type is day, the endDate of booking range is exclusive.\r\n// In the UI picker, we show only inclusive dates\r\nconst pickerEndDateToApiDate = (isDaily, endDate) => {\r\n  const isValid = endDate instanceof moment;\r\n\r\n  // API end dates are exlusive, so we need to shift them with daily\r\n  // booking.\r\n  return isValid && isDaily\r\n    ? endDate\r\n        .clone()\r\n        .add(1, 'days')\r\n        .toDate()\r\n    : isValid\r\n    ? endDate.toDate()\r\n    : null;\r\n};\r\n\r\n// Since final-form tracks the onBlur event for marking the field as\r\n// touched (which triggers possible error validation rendering), only\r\n// trigger the event asynchronously when no other input within this\r\n// component has received focus.\r\n//\r\n// This prevents showing the validation error when the user selects a\r\n// value and moves on to another input within this component.\r\nconst BLUR_TIMEOUT = 100;\r\n\r\n// IconArrowHead component might not be defined if exposed directly to the file.\r\n// This component is called before IconArrowHead component in components/index.js\r\nconst PrevIcon = props => (\r\n  <IconArrowHead {...props} direction=\"left\" rootClassName={css.arrowIcon} />\r\n);\r\nconst NextIcon = props => (\r\n  <IconArrowHead {...props} direction=\"right\" rootClassName={css.arrowIcon} />\r\n);\r\n\r\n// Possible configuration options of React-dates\r\nconst defaultProps = {\r\n  initialDates: null, // Possible initial date passed for the component\r\n  value: null, // Value should keep track of selected date.\r\n\r\n  // input related props\r\n  startDateId: 'startDate',\r\n  endDateId: 'endDate',\r\n  startDatePlaceholderText: null, // Handled inside component\r\n  endDatePlaceholderText: null, // Handled inside component\r\n  disabled: false,\r\n  required: false,\r\n  readOnly: false,\r\n  screenReaderInputMessage: null, // Handled inside component\r\n  showClearDates: false,\r\n  showDefaultInputIcon: false,\r\n  customArrowIcon: <span />,\r\n  customInputIcon: null,\r\n  customCloseIcon: null,\r\n  noBorder: true,\r\n  block: false,\r\n\r\n  // calendar presentation and interaction related props\r\n  renderMonthText: null,\r\n  orientation: HORIZONTAL_ORIENTATION,\r\n  anchorDirection: ANCHOR_LEFT,\r\n  horizontalMargin: 0,\r\n  withPortal: false,\r\n  withFullScreenPortal: false,\r\n  appendToBody: false,\r\n  disableScroll: false,\r\n  daySize: 38,\r\n  isRTL: false,\r\n  initialVisibleMonth: null,\r\n  // This gets default value at FieldDateRangeInput\r\n  firstDayOfWeek: 0,\r\n  numberOfMonths: 1,\r\n  keepOpenOnDateSelect: false,\r\n  reopenPickerOnClearDates: false,\r\n  renderCalendarInfo: null,\r\n  hideKeyboardShortcutsPanel: true,\r\n\r\n  // navigation related props\r\n  navPrev: <PrevIcon />,\r\n  navNext: <NextIcon />,\r\n  onPrevMonthClick() {},\r\n  onNextMonthClick() {},\r\n  transitionDuration: 200, // milliseconds between next month changes etc.\r\n\r\n  renderCalendarDay: undefined, // If undefined, renders react-dates/lib/components/CalendarDay\r\n  // day presentation and interaction related props\r\n  renderDayContents: day => {\r\n    return <span className=\"renderedDay\">{day.format('D')}</span>;\r\n  },\r\n  minimumNights: 0,\r\n  enableOutsideDays: false,\r\n  isDayBlocked: () => () => false,\r\n\r\n  // This gets default value at FieldDateRangeInput\r\n  isOutsideRange: day => false,\r\n  isDayHighlighted: () => {},\r\n\r\n  // Internationalization props\r\n  // Multilocale support can be achieved with displayFormat like moment.localeData.longDateFormat('L')\r\n  // https://momentjs.com/\r\n  displayFormat: 'ddd, MMM D',\r\n  monthFormat: 'MMMM YYYY',\r\n  weekDayFormat: 'dd',\r\n};\r\n\r\nclass DateRangeInputComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      focusedInput: null,\r\n      currentStartDate: null,\r\n    };\r\n\r\n    this.blurTimeoutId = null;\r\n    this.onDatesChange = this.onDatesChange.bind(this);\r\n    this.onFocusChange = this.onFocusChange.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    // Update focusedInput in case a new value for it is\r\n    // passed in the props. This may occur if the focus\r\n    // is manually set to the date picker.\r\n    if (this.props.focusedInput && this.props.focusedInput !== prevProps.focusedInput) {\r\n      this.setState({ focusedInput: this.props.focusedInput });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.clearTimeout(this.blurTimeoutId);\r\n  }\r\n\r\n  onDatesChange(dates) {\r\n    const { isDaily, isBlockedBetween } = this.props;\r\n    const { startDate, endDate } = dates;\r\n\r\n    // both dates are selected, a new start date before the previous start\r\n    // date is selected\r\n    const startDateUpdated =\r\n      isBlockedBetween &&\r\n      startDate &&\r\n      endDate &&\r\n      this.state.currentStartDate &&\r\n      startDate.isBefore(this.state.currentStartDate);\r\n\r\n    let startDateAsDate = startDate instanceof moment ? startDate.startOf('day').toDate() : null;\r\n    let endDateAsDate = pickerEndDateToApiDate(isDaily, endDate);\r\n\r\n    if (startDateUpdated) {\r\n      // clear the end date in case a blocked date can be found\r\n      // between previous start date and new start date\r\n      const clearEndDate = isBlockedBetween(\r\n        startDate,\r\n        moment(this.state.currentStartDate).add(1, 'days')\r\n      );\r\n      endDateAsDate = clearEndDate ? null : pickerEndDateToApiDate(isDaily, endDate);\r\n    }\r\n\r\n    this.setState(() => ({\r\n      currentStartDate: startDateAsDate,\r\n    }));\r\n\r\n    this.props.onChange({ startDate: startDateAsDate, endDate: endDateAsDate });\r\n  }\r\n\r\n  onFocusChange(focusedInput) {\r\n    // DateRangePicker requires 'onFocusChange' function and 'focusedInput'\r\n    // but Fields of React-Form deals with onFocus & onBlur instead\r\n    this.setState({ focusedInput });\r\n\r\n    if (focusedInput) {\r\n      window.clearTimeout(this.blurTimeoutId);\r\n      this.props.onFocus(focusedInput);\r\n    } else {\r\n      window.clearTimeout(this.blurTimeoutId);\r\n      this.blurTimeoutId = window.setTimeout(() => {\r\n        this.props.onBlur();\r\n      }, BLUR_TIMEOUT);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      className,\r\n      isDaily,\r\n      initialDates,\r\n      intl,\r\n      name,\r\n      startDatePlaceholderText,\r\n      endDatePlaceholderText,\r\n      onBlur,\r\n      onChange,\r\n      onFocus,\r\n      screenReaderInputMessage,\r\n      useMobileMargins,\r\n      value,\r\n      children,\r\n      render,\r\n      isBlockedBetween,\r\n      isDayBlocked,\r\n      isOutsideRange,\r\n      ...datePickerProps\r\n    } = this.props;\r\n\r\n    const initialStartMoment = initialDates ? moment(initialDates.startDate) : null;\r\n    const initialEndMoment = initialDates ? moment(initialDates.endDate) : null;\r\n    const startDate =\r\n      value && value.startDate instanceof Date ? moment(value.startDate) : initialStartMoment;\r\n    const endDate =\r\n      apiEndDateToPickerDate(isDaily, value ? value.endDate : null) || initialEndMoment;\r\n\r\n    const startDatePlaceholderTxt =\r\n      startDatePlaceholderText ||\r\n      intl.formatMessage({ id: 'FieldDateRangeInput.startDatePlaceholderText' });\r\n    const endDatePlaceholderTxt =\r\n      endDatePlaceholderText ||\r\n      intl.formatMessage({ id: 'FieldDateRangeInput.endDatePlaceholderText' });\r\n    const screenReaderInputText =\r\n      screenReaderInputMessage ||\r\n      intl.formatMessage({ id: 'FieldDateRangeInput.screenReaderInputMessage' });\r\n\r\n    const classes = classNames(css.inputRoot, className, {\r\n      [css.withMobileMargins]: useMobileMargins,\r\n    });\r\n\r\n    return (\r\n      <div className={classes}>\r\n        <DateRangePicker\r\n          {...datePickerProps}\r\n          isDayBlocked={isDayBlocked(this.state.focusedInput)}\r\n          isOutsideRange={isOutsideRange(this.state.focusedInput)}\r\n          focusedInput={this.state.focusedInput}\r\n          onFocusChange={this.onFocusChange}\r\n          startDate={startDate}\r\n          endDate={endDate}\r\n          minimumNights={isDaily ? 0 : 1}\r\n          onDatesChange={this.onDatesChange}\r\n          startDatePlaceholderText={startDatePlaceholderTxt}\r\n          endDatePlaceholderText={endDatePlaceholderTxt}\r\n          screenReaderInputMessage={screenReaderInputText}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDateRangeInputComponent.defaultProps = {\r\n  className: null,\r\n  useMobileMargins: false,\r\n  ...defaultProps,\r\n};\r\n\r\nDateRangeInputComponent.propTypes = {\r\n  className: string,\r\n  startDateId: string,\r\n  endDateId: string,\r\n  isDaily: bool.isRequired,\r\n  focusedInput: oneOf([START_DATE, END_DATE]),\r\n  initialDates: instanceOf(Date),\r\n  name: string.isRequired,\r\n  isBlockedBetween: func,\r\n  isDayBlocked: func,\r\n  isOutsideRange: func,\r\n  onChange: func.isRequired,\r\n  onBlur: func.isRequired,\r\n  onFocus: func.isRequired,\r\n  useMobileMargins: bool,\r\n  startDatePlaceholderText: string,\r\n  endDatePlaceholderText: string,\r\n  screenReaderInputMessage: string,\r\n  value: shape({\r\n    startDate: instanceOf(Date),\r\n    endDate: instanceOf(Date),\r\n  }),\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nexport default injectIntl(DateRangeInputComponent);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"fieldRoot\":\"FieldDateRangeInput_fieldRoot__ErWf7\",\"labels\":\"FieldDateRangeInput_labels__F3WuV\",\"mobileMargins\":\"FieldDateRangeInput_mobileMargins__+fD1s\",\"startDateLabel\":\"FieldDateRangeInput_startDateLabel__4nRGS\",\"endDateLabel\":\"FieldDateRangeInput_endDateLabel__nNsQl\",\"input\":\"FieldDateRangeInput_input__n+Bkj\"};","/**\r\n * Provides a date picker for Final Forms (using https://github.com/airbnb/react-dates)\r\n *\r\n * NOTE: If you are using this component inside BookingDatesForm,\r\n * you should convert value.date to start date and end date before submitting it to API\r\n */\r\n\r\nimport React, { Component } from 'react';\r\nimport { bool, func, object, oneOf, string, number } from 'prop-types';\r\nimport { isInclusivelyAfterDay, isInclusivelyBeforeDay } from 'react-dates';\r\nimport { Field } from 'react-final-form';\r\nimport classNames from 'classnames';\r\nimport moment from 'moment';\r\n\r\nimport { useConfiguration } from '../../context/configurationContext';\r\nimport { START_DATE, END_DATE } from '../../util/dates';\r\nimport { ValidationError } from '../../components';\r\n\r\nimport DateRangeInput from './DateRangeInput';\r\nimport css from './FieldDateRangeInput.module.css';\r\n\r\nconst MAX_MOBILE_SCREEN_WIDTH = 768;\r\n\r\nclass FieldDateRangeInputComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { focusedInput: null };\r\n    this.handleBlur = this.handleBlur.bind(this);\r\n    this.handleFocus = this.handleFocus.bind(this);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    // Update focusedInput in case a new value for it is\r\n    // passed in the props. This may occur if the focus\r\n    // is manually set to the date picker.\r\n    if (this.props.focusedInput && this.props.focusedInput !== prevProps.focusedInput) {\r\n      this.setState({ focusedInput: this.props.focusedInput });\r\n    }\r\n  }\r\n\r\n  handleBlur(focusedInput) {\r\n    this.setState({ focusedInput: null });\r\n    this.props.input.onBlur(focusedInput);\r\n    // Notify the containing component that the focused\r\n    // input has changed.\r\n    if (this.props.onFocusedInputChange) {\r\n      this.props.onFocusedInputChange(null);\r\n    }\r\n  }\r\n\r\n  handleFocus(focusedInput) {\r\n    this.setState({ focusedInput });\r\n    this.props.input.onFocus(focusedInput);\r\n  }\r\n\r\n  render() {\r\n    /* eslint-disable no-unused-vars */\r\n    const {\r\n      className,\r\n      rootClassName,\r\n      isDaily,\r\n      startDateId,\r\n      startDateLabel,\r\n      endDateId,\r\n      endDateLabel,\r\n      input,\r\n      meta,\r\n      useMobileMargins,\r\n      // Extract focusedInput and onFocusedInputChange so that\r\n      // the same values will not be passed on to subcomponents.\r\n      focusedInput,\r\n      onFocusedInputChange,\r\n      ...rest\r\n    } = this.props;\r\n    /* eslint-disable no-unused-vars */\r\n\r\n    if (startDateLabel && !startDateId) {\r\n      throw new Error('startDateId required when a startDateLabel is given');\r\n    }\r\n\r\n    if (endDateLabel && !endDateId) {\r\n      throw new Error('endDateId required when a endDateLabel is given');\r\n    }\r\n\r\n    // If startDate is valid label changes color and bottom border changes color too\r\n    const startDateLabelClasses = classNames(css.startDateLabel);\r\n\r\n    // If endDate is valid label changes color and bottom border changes color too\r\n    const endDateLabelClasses = classNames(css.endDateLabel);\r\n\r\n    const label =\r\n      startDateLabel && endDateLabel ? (\r\n        <div className={classNames(css.labels, { [css.mobileMargins]: useMobileMargins })}>\r\n          <label className={startDateLabelClasses} htmlFor={startDateId}>\r\n            {startDateLabel}\r\n          </label>\r\n          <label className={endDateLabelClasses} htmlFor={endDateId}>\r\n            {endDateLabel}\r\n          </label>\r\n        </div>\r\n      ) : null;\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    const { onBlur, onFocus, type, checked, ...restOfInput } = input;\r\n    const inputProps = {\r\n      isDaily,\r\n      minimumNights: isDaily ? 0 : 1,\r\n      onBlur: this.handleBlur,\r\n      onFocus: this.handleFocus,\r\n      useMobileMargins,\r\n      readOnly: typeof window !== 'undefined' && window.innerWidth < MAX_MOBILE_SCREEN_WIDTH,\r\n      ...restOfInput,\r\n      ...rest,\r\n      focusedInput: this.state.focusedInput,\r\n      startDateId,\r\n      endDateId,\r\n    };\r\n    const classes = classNames(rootClassName || css.fieldRoot, className);\r\n    const errorClasses = classNames({ [css.mobileMargins]: useMobileMargins });\r\n\r\n    return (\r\n      <div className={classes}>\r\n        {label}\r\n        <DateRangeInput {...inputProps} />\r\n        <ValidationError className={errorClasses} fieldMeta={meta} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFieldDateRangeInputComponent.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n  useMobileMargins: false,\r\n  endDateId: null,\r\n  endDateLabel: null,\r\n  endDatePlaceholderText: null,\r\n  startDateId: null,\r\n  startDateLabel: null,\r\n  startDatePlaceholderText: null,\r\n  focusedInput: null,\r\n  onFocusedInputChange: null,\r\n};\r\n\r\nFieldDateRangeInputComponent.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n  isDaily: bool.isRequired,\r\n  useMobileMargins: bool,\r\n  endDateId: string,\r\n  endDateLabel: string,\r\n  endDatePlaceholderText: string,\r\n  startDateId: string,\r\n  startDateLabel: string,\r\n  startDatePlaceholderText: string,\r\n  input: object.isRequired,\r\n  meta: object.isRequired,\r\n  focusedInput: oneOf([START_DATE, END_DATE]),\r\n  onFocusedInputChange: func,\r\n\r\n  isOutsideRange: func.isRequired,\r\n  firstDayOfWeek: number.isRequired,\r\n};\r\n\r\nconst FieldDateRangeInput = props => {\r\n  const config = useConfiguration();\r\n  const { isOutsideRange, firstDayOfWeek, ...rest } = props;\r\n\r\n  // Outside range -><- today ... today+available days -1 -><- outside range\r\n  const defaultIsOutSideRange = day => {\r\n    const endOfRange = config.stripe.dayCountAvailableForBooking - 1;\r\n    return (\r\n      !isInclusivelyAfterDay(day, moment()) ||\r\n      !isInclusivelyBeforeDay(day, moment().add(endOfRange, 'days'))\r\n    );\r\n  };\r\n  const defaultFirstDayOfWeek = config.localization.firstDayOfWeek;\r\n\r\n  return (\r\n    <Field\r\n      component={FieldDateRangeInputComponent}\r\n      isOutsideRange={isOutsideRange || defaultIsOutSideRange}\r\n      firstDayOfWeek={firstDayOfWeek || defaultFirstDayOfWeek}\r\n      {...rest}\r\n    />\r\n  );\r\n};\r\n\r\nexport { DateRangeInput };\r\nexport default FieldDateRangeInput;\r\n"],"names":["pickerEndDateToApiDate","isDaily","endDate","isValid","moment","clone","add","toDate","PrevIcon","props","React","IconArrowHead","Object","assign","direction","rootClassName","css","NextIcon","defaultProps","initialDates","value","startDateId","endDateId","startDatePlaceholderText","endDatePlaceholderText","disabled","required","readOnly","screenReaderInputMessage","showClearDates","showDefaultInputIcon","customArrowIcon","customInputIcon","customCloseIcon","noBorder","block","renderMonthText","orientation","anchorDirection","horizontalMargin","withPortal","withFullScreenPortal","appendToBody","disableScroll","daySize","isRTL","initialVisibleMonth","firstDayOfWeek","numberOfMonths","keepOpenOnDateSelect","reopenPickerOnClearDates","renderCalendarInfo","hideKeyboardShortcutsPanel","navPrev","navNext","onPrevMonthClick","onNextMonthClick","transitionDuration","renderCalendarDay","undefined","renderDayContents","day","className","format","minimumNights","enableOutsideDays","isDayBlocked","isOutsideRange","isDayHighlighted","displayFormat","monthFormat","weekDayFormat","DateRangeInputComponent","Component","constructor","super","this","state","focusedInput","currentStartDate","blurTimeoutId","onDatesChange","bind","onFocusChange","componentDidUpdate","prevProps","setState","componentWillUnmount","window","clearTimeout","dates","isBlockedBetween","startDate","startDateUpdated","isBefore","startDateAsDate","startOf","endDateAsDate","onChange","onFocus","setTimeout","onBlur","render","intl","name","useMobileMargins","children","datePickerProps","initialStartMoment","initialEndMoment","Date","apiEndDateToPickerDate","subtract","startDatePlaceholderTxt","formatMessage","id","endDatePlaceholderTxt","screenReaderInputText","classes","classNames","DateRangePicker","injectIntl","FieldDateRangeInputComponent","handleBlur","handleFocus","input","onFocusedInputChange","startDateLabel","endDateLabel","meta","rest","Error","startDateLabelClasses","endDateLabelClasses","label","htmlFor","type","checked","restOfInput","inputProps","innerWidth","errorClasses","DateRangeInput","ValidationError","fieldMeta","config","useConfiguration","defaultFirstDayOfWeek","localization","Field","component","endOfRange","stripe","dayCountAvailableForBooking","isInclusivelyAfterDay","isInclusivelyBeforeDay"],"sourceRoot":""}