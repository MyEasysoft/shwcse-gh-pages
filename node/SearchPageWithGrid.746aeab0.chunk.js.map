{"version":3,"file":"SearchPageWithGrid.746aeab0.chunk.js","mappings":"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","sources":["containers/SearchPage/SearchPageWithGrid.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { array, bool, func, oneOf, object, shape, string, arrayOf } from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport omit from 'lodash/omit';\r\nimport classNames from 'classnames';\r\n\r\nimport { useIntl, intlShape, FormattedMessage } from '../../util/reactIntl';\r\nimport { useConfiguration } from '../../context/configurationContext';\r\nimport { useRouteConfiguration } from '../../context/routeConfigurationContext';\r\n\r\nimport { createResourceLocatorString } from '../../util/routes';\r\nimport {\r\n  isAnyFilterActive,\r\n  isMainSearchTypeKeywords,\r\n  getQueryParamNames,\r\n  isOriginInUse,\r\n} from '../../util/search';\r\nimport { parse } from '../../util/urlHelpers';\r\nimport { propTypes } from '../../util/types';\r\nimport { getListingsById } from '../../ducks/marketplaceData.duck';\r\nimport { manageDisableScrolling, isScrollingDisabled } from '../../ducks/ui.duck';\r\n\r\nimport { H3, H5, Page } from '../../components';\r\nimport TopbarContainer from '../TopbarContainer/TopbarContainer';\r\nimport FooterContainer from '../FooterContainer/FooterContainer';\r\n\r\nimport {\r\n  groupListingFieldConfigs,\r\n  initialValues,\r\n  searchParamsPicker,\r\n  validUrlQueryParamsFromProps,\r\n  validFilterParams,\r\n  cleanSearchFromConflictingParams,\r\n  createSearchResultSchema,\r\n} from './SearchPage.shared';\r\n\r\nimport FilterComponent from './FilterComponent';\r\nimport MainPanelHeader from './MainPanelHeader/MainPanelHeader';\r\nimport SearchFiltersMobile from './SearchFiltersMobile/SearchFiltersMobile';\r\nimport SortBy from './SortBy/SortBy';\r\nimport SearchResultsPanel from './SearchResultsPanel/SearchResultsPanel';\r\nimport NoSearchResultsMaybe from './NoSearchResultsMaybe/NoSearchResultsMaybe';\r\n\r\nimport css from './SearchPage.module.css';\r\n\r\nconst MODAL_BREAKPOINT = 768; // Search is in modal on mobile layout\r\n\r\n// SortBy component has its content in dropdown-popup.\r\n// With this offset we move the dropdown a few pixels on desktop layout.\r\nconst FILTER_DROPDOWN_OFFSET = -14;\r\n\r\nexport class SearchPageComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isMobileModalOpen: false,\r\n      currentQueryParams: validUrlQueryParamsFromProps(props),\r\n    };\r\n\r\n    this.onOpenMobileModal = this.onOpenMobileModal.bind(this);\r\n    this.onCloseMobileModal = this.onCloseMobileModal.bind(this);\r\n\r\n    // Filter functions\r\n    this.resetAll = this.resetAll.bind(this);\r\n    this.getHandleChangedValueFn = this.getHandleChangedValueFn.bind(this);\r\n\r\n    // SortBy\r\n    this.handleSortBy = this.handleSortBy.bind(this);\r\n  }\r\n\r\n  // Invoked when a modal is opened from a child component,\r\n  // for example when a filter modal is opened in mobile view\r\n  onOpenMobileModal() {\r\n    this.setState({ isMobileModalOpen: true });\r\n  }\r\n\r\n  // Invoked when a modal is closed from a child component,\r\n  // for example when a filter modal is opened in mobile view\r\n  onCloseMobileModal() {\r\n    this.setState({ isMobileModalOpen: false });\r\n  }\r\n\r\n  // Reset all filter query parameters\r\n  resetAll(e) {\r\n    const { history, routeConfiguration, config } = this.props;\r\n    const { listingFields: listingFieldsConfig } = config?.listing || {};\r\n    const { defaultFilters: defaultFiltersConfig } = config?.search || {};\r\n\r\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\r\n    const filterQueryParamNames = getQueryParamNames(listingFieldsConfig, defaultFiltersConfig);\r\n\r\n    // Reset state\r\n    this.setState({ currentQueryParams: {} });\r\n\r\n    // Reset routing params\r\n    const queryParams = omit(urlQueryParams, filterQueryParamNames);\r\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration, {}, queryParams));\r\n  }\r\n\r\n  getHandleChangedValueFn(useHistoryPush) {\r\n    const { history, routeConfiguration, config } = this.props;\r\n    const { listingFields: listingFieldsConfig } = config?.listing || {};\r\n    const { defaultFilters: defaultFiltersConfig, sortConfig } = config?.search || {};\r\n\r\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\r\n\r\n    return updatedURLParams => {\r\n      const updater = prevState => {\r\n        const { address, bounds, keywords } = urlQueryParams;\r\n        const mergedQueryParams = { ...urlQueryParams, ...prevState.currentQueryParams };\r\n\r\n        // Address and bounds are handled outside of MainPanel.\r\n        // I.e. TopbarSearchForm && search by moving the map.\r\n        // We should always trust urlQueryParams with those.\r\n        // The same applies to keywords, if the main search type is keyword search.\r\n        const keywordsMaybe = isMainSearchTypeKeywords(config) ? { keywords } : {};\r\n        return {\r\n          currentQueryParams: {\r\n            ...mergedQueryParams,\r\n            ...updatedURLParams,\r\n            ...keywordsMaybe,\r\n            address,\r\n            bounds,\r\n          },\r\n        };\r\n      };\r\n\r\n      const callback = () => {\r\n        if (useHistoryPush) {\r\n          const searchParams = this.state.currentQueryParams;\r\n          const search = cleanSearchFromConflictingParams(\r\n            searchParams,\r\n            listingFieldsConfig,\r\n            defaultFiltersConfig,\r\n            sortConfig\r\n          );\r\n          history.push(createResourceLocatorString('SearchPage', routeConfiguration, {}, search));\r\n        }\r\n      };\r\n\r\n      this.setState(updater, callback);\r\n    };\r\n  }\r\n\r\n  handleSortBy(urlParam, values) {\r\n    const { history, routeConfiguration } = this.props;\r\n    const urlQueryParams = validUrlQueryParamsFromProps(this.props);\r\n\r\n    const queryParams = values\r\n      ? { ...urlQueryParams, [urlParam]: values }\r\n      : omit(urlQueryParams, urlParam);\r\n\r\n    history.push(createResourceLocatorString('SearchPage', routeConfiguration, {}, queryParams));\r\n  }\r\n\r\n  // Reset all filter query parameters\r\n  handleResetAll(e) {\r\n    this.resetAll(e);\r\n\r\n    // blur event target if event is passed\r\n    if (e && e.currentTarget) {\r\n      e.currentTarget.blur();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      intl,\r\n      listings,\r\n      location,\r\n      onManageDisableScrolling,\r\n      pagination,\r\n      scrollingDisabled,\r\n      searchInProgress,\r\n      searchListingsError,\r\n      searchParams,\r\n      routeConfiguration,\r\n      config,\r\n    } = this.props;\r\n\r\n    const { listingFields: listingFieldsConfig } = config?.listing || {};\r\n    const { defaultFilters: defaultFiltersConfig, sortConfig } = config?.search || {};\r\n    const activeListingTypes = config?.listing?.listingTypes.map(config => config.listingType);\r\n    const marketplaceCurrency = config.currency;\r\n\r\n    // Page transition might initially use values from previous search\r\n    // urlQueryParams doesn't contain page specific url params\r\n    // like mapSearch, page or origin (origin depends on config.maps.search.sortSearchByDistance)\r\n    const { searchParamsAreInSync, urlQueryParams, searchParamsInURL } = searchParamsPicker(\r\n      location.search,\r\n      searchParams,\r\n      listingFieldsConfig,\r\n      defaultFiltersConfig,\r\n      sortConfig,\r\n      isOriginInUse(config)\r\n    );\r\n\r\n    const validQueryParams = validFilterParams(\r\n      searchParamsInURL,\r\n      listingFieldsConfig,\r\n      defaultFiltersConfig,\r\n      false\r\n    );\r\n\r\n    const isKeywordSearch = isMainSearchTypeKeywords(config);\r\n    const defaultFilters = isKeywordSearch\r\n      ? defaultFiltersConfig.filter(f => f.key !== 'keywords')\r\n      : defaultFiltersConfig;\r\n    const [customPrimaryFilters, customSecondaryFilters] = groupListingFieldConfigs(\r\n      listingFieldsConfig,\r\n      activeListingTypes\r\n    );\r\n    const availableFilters = [\r\n      ...customPrimaryFilters,\r\n      ...defaultFilters,\r\n      ...customSecondaryFilters,\r\n    ];\r\n\r\n    // Selected aka active filters\r\n    const selectedFilters = validFilterParams(\r\n      validQueryParams,\r\n      listingFieldsConfig,\r\n      defaultFiltersConfig\r\n    );\r\n    const isValidDatesFilter =\r\n      searchParamsInURL.dates == null ||\r\n      (searchParamsInURL.dates != null && searchParamsInURL.dates === selectedFilters.dates);\r\n    const keysOfSelectedFilters = Object.keys(selectedFilters);\r\n    const selectedFiltersCountForMobile = isKeywordSearch\r\n      ? keysOfSelectedFilters.filter(f => f !== 'keywords').length\r\n      : keysOfSelectedFilters.length;\r\n\r\n    const hasPaginationInfo = !!pagination && pagination.totalItems != null;\r\n    const totalItems =\r\n      searchParamsAreInSync && hasPaginationInfo\r\n        ? pagination.totalItems\r\n        : pagination?.paginationUnsupported\r\n        ? listings.length\r\n        : 0;\r\n    const listingsAreLoaded =\r\n      !searchInProgress &&\r\n      searchParamsAreInSync &&\r\n      !!(hasPaginationInfo || pagination?.paginationUnsupported);\r\n\r\n    const conflictingFilterActive = isAnyFilterActive(\r\n      sortConfig.conflictingFilters,\r\n      validQueryParams,\r\n      listingFieldsConfig,\r\n      defaultFiltersConfig\r\n    );\r\n    const sortBy = mode => {\r\n      return sortConfig.active ? (\r\n        <SortBy\r\n          sort={validQueryParams[sortConfig.queryParamName]}\r\n          isConflictingFilterActive={!!conflictingFilterActive}\r\n          hasConflictingFilters={!!(sortConfig.conflictingFilters?.length > 0)}\r\n          selectedFilters={selectedFilters}\r\n          onSelect={this.handleSortBy}\r\n          showAsPopup\r\n          mode={mode}\r\n          contentPlacementOffset={FILTER_DROPDOWN_OFFSET}\r\n        />\r\n      ) : null;\r\n    };\r\n    const noResultsInfo = (\r\n      <NoSearchResultsMaybe\r\n        listingsAreLoaded={listingsAreLoaded}\r\n        totalItems={totalItems}\r\n        location={location}\r\n        resetAll={this.resetAll}\r\n      />\r\n    );\r\n\r\n    const { title, description, schema } = createSearchResultSchema(\r\n      listings,\r\n      searchParamsInURL || {},\r\n      intl,\r\n      routeConfiguration,\r\n      config\r\n    );\r\n\r\n    // Set topbar class based on if a modal is open in\r\n    // a child component\r\n    const topbarClasses = this.state.isMobileModalOpen\r\n      ? classNames(css.topbarBehindModal, css.topbar)\r\n      : css.topbar;\r\n\r\n    // N.B. openMobileMap button is sticky.\r\n    // For some reason, stickyness doesn't work on Safari, if the element is <button>\r\n    return (\r\n      <Page\r\n        scrollingDisabled={scrollingDisabled}\r\n        description={description}\r\n        title={title}\r\n        schema={schema}\r\n      >\r\n        <TopbarContainer\r\n          rootClassName={topbarClasses}\r\n          currentPage=\"SearchPage\"\r\n          currentSearchParams={urlQueryParams}\r\n        />\r\n        <div className={css.layoutWrapperContainer}>\r\n          <aside className={css.layoutWrapperFilterColumn} data-testid=\"filterColumnAside\">\r\n            <div className={css.filterColumnContent}>\r\n              {availableFilters.map(config => {\r\n                return (\r\n                  <FilterComponent\r\n                    key={`SearchFiltersMobile.${config.scope || 'built-in'}.${config.key}`}\r\n                    idPrefix=\"SearchFiltersMobile\"\r\n                    className={css.filter}\r\n                    config={config}\r\n                    marketplaceCurrency={marketplaceCurrency}\r\n                    urlQueryParams={urlQueryParams}\r\n                    initialValues={initialValues(this.props, this.state.currentQueryParams)}\r\n                    getHandleChangedValueFn={this.getHandleChangedValueFn}\r\n                    intl={intl}\r\n                    liveEdit\r\n                    showAsPopup={false}\r\n                    isDesktop\r\n                  />\r\n                );\r\n              })}\r\n              <button className={css.resetAllButton} onClick={e => this.handleResetAll(e)}>\r\n                <FormattedMessage id={'SearchFiltersMobile.resetAll'} />\r\n              </button>\r\n            </div>\r\n          </aside>\r\n\r\n          <div className={css.layoutWrapperMain} role=\"main\">\r\n            <div className={css.searchResultContainer}>\r\n              <SearchFiltersMobile\r\n                className={css.searchFiltersMobileList}\r\n                urlQueryParams={validQueryParams}\r\n                sortByComponent={sortBy('mobile')}\r\n                listingsAreLoaded={listingsAreLoaded}\r\n                resultsCount={totalItems}\r\n                searchInProgress={searchInProgress}\r\n                searchListingsError={searchListingsError}\r\n                showAsModalMaxWidth={MODAL_BREAKPOINT}\r\n                onManageDisableScrolling={onManageDisableScrolling}\r\n                onOpenModal={this.onOpenMobileModal}\r\n                onCloseModal={this.onCloseMobileModal}\r\n                resetAll={this.resetAll}\r\n                selectedFiltersCount={selectedFiltersCountForMobile}\r\n                isMapVariant={false}\r\n                noResultsInfo={noResultsInfo}\r\n              >\r\n                {availableFilters.map(config => {\r\n                  return (\r\n                    <FilterComponent\r\n                      key={`SearchFiltersMobile.${config.scope || 'built-in'}.${config.key}`}\r\n                      idPrefix=\"SearchFiltersMobile\"\r\n                      config={config}\r\n                      marketplaceCurrency={marketplaceCurrency}\r\n                      urlQueryParams={validQueryParams}\r\n                      initialValues={initialValues(this.props, this.state.currentQueryParams)}\r\n                      getHandleChangedValueFn={this.getHandleChangedValueFn}\r\n                      intl={intl}\r\n                      liveEdit\r\n                      showAsPopup={false}\r\n                    />\r\n                  );\r\n                })}\r\n              </SearchFiltersMobile>\r\n              <MainPanelHeader\r\n                className={css.mainPanel}\r\n                sortByComponent={sortBy('desktop')}\r\n                isSortByActive={sortConfig.active}\r\n                listingsAreLoaded={listingsAreLoaded}\r\n                resultsCount={totalItems}\r\n                searchInProgress={searchInProgress}\r\n                searchListingsError={searchListingsError}\r\n                noResultsInfo={noResultsInfo}\r\n              />\r\n              <div\r\n                className={classNames(css.listingsForGridVariant, {\r\n                  [css.newSearchInProgress]: !(listingsAreLoaded || searchListingsError),\r\n                })}\r\n              >\r\n                {searchListingsError ? (\r\n                  <H3 className={css.error}>\r\n                    <FormattedMessage id=\"SearchPage.searchError\" />\r\n                  </H3>\r\n                ) : null}\r\n                {!isValidDatesFilter ? (\r\n                  <H5>\r\n                    <FormattedMessage id=\"SearchPage.invalidDatesFilter\" />\r\n                  </H5>\r\n                ) : null}\r\n                <SearchResultsPanel\r\n                  className={css.searchListingsPanel}\r\n                  listings={listings}\r\n                  pagination={listingsAreLoaded ? pagination : null}\r\n                  search={parse(location.search)}\r\n                  isMapVariant={false}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <FooterContainer />\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nSearchPageComponent.defaultProps = {\r\n  listings: [],\r\n  pagination: null,\r\n  searchListingsError: null,\r\n  searchParams: {},\r\n};\r\n\r\nSearchPageComponent.propTypes = {\r\n  listings: array,\r\n  onManageDisableScrolling: func.isRequired,\r\n  pagination: propTypes.pagination,\r\n  scrollingDisabled: bool.isRequired,\r\n  searchInProgress: bool.isRequired,\r\n  searchListingsError: propTypes.error,\r\n  searchParams: object,\r\n\r\n  // from useHistory\r\n  history: shape({\r\n    push: func.isRequired,\r\n  }).isRequired,\r\n  // from useLocation\r\n  location: shape({\r\n    search: string.isRequired,\r\n  }).isRequired,\r\n\r\n  // from useIntl\r\n  intl: intlShape.isRequired,\r\n\r\n  // from useConfiguration\r\n  config: object.isRequired,\r\n\r\n  // from useRouteConfiguration\r\n  routeConfiguration: arrayOf(propTypes.route).isRequired,\r\n};\r\n\r\nconst EnhancedSearchPage = props => {\r\n  const config = useConfiguration();\r\n  const routeConfiguration = useRouteConfiguration();\r\n  const intl = useIntl();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <SearchPageComponent\r\n      config={config}\r\n      routeConfiguration={routeConfiguration}\r\n      intl={intl}\r\n      history={history}\r\n      location={location}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const {\r\n    currentPageResultIds,\r\n    pagination,\r\n    searchInProgress,\r\n    searchListingsError,\r\n    searchParams,\r\n  } = state.SearchPage;\r\n  const listings = getListingsById(state, currentPageResultIds);\r\n\r\n  return {\r\n    listings,\r\n    pagination,\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n    searchInProgress,\r\n    searchListingsError,\r\n    searchParams,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onManageDisableScrolling: (componentId, disableScrolling) =>\r\n    dispatch(manageDisableScrolling(componentId, disableScrolling)),\r\n});\r\n\r\n// Note: it is important that the withRouter HOC is **outside** the\r\n// connect HOC, otherwise React Router won't rerender any Route\r\n// components since connect implements a shouldComponentUpdate\r\n// lifecycle hook.\r\n//\r\n// See: https://github.com/ReactTraining/react-router/issues/4671\r\nconst SearchPage = compose(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )\r\n)(EnhancedSearchPage);\r\n\r\nexport default SearchPage;\r\n"],"names":["SearchPageComponent","Component","constructor","props","super","this","state","isMobileModalOpen","currentQueryParams","validUrlQueryParamsFromProps","onOpenMobileModal","bind","onCloseMobileModal","resetAll","getHandleChangedValueFn","handleSortBy","setState","e","history","routeConfiguration","config","listingFields","listingFieldsConfig","listing","defaultFilters","defaultFiltersConfig","search","urlQueryParams","filterQueryParamNames","getQueryParamNames","queryParams","omit","push","createResourceLocatorString","useHistoryPush","sortConfig","updatedURLParams","prevState","address","bounds","keywords","mergedQueryParams","keywordsMaybe","isMainSearchTypeKeywords","callback","searchParams","cleanSearchFromConflictingParams","urlParam","values","handleResetAll","currentTarget","blur","render","_config$listing","intl","listings","location","onManageDisableScrolling","pagination","scrollingDisabled","searchInProgress","searchListingsError","activeListingTypes","listingTypes","map","listingType","marketplaceCurrency","currency","searchParamsAreInSync","searchParamsInURL","searchParamsPicker","isOriginInUse","validQueryParams","validFilterParams","isKeywordSearch","filter","f","key","customPrimaryFilters","customSecondaryFilters","groupListingFieldConfigs","availableFilters","selectedFilters","isValidDatesFilter","dates","keysOfSelectedFilters","Object","keys","selectedFiltersCountForMobile","length","hasPaginationInfo","totalItems","paginationUnsupported","listingsAreLoaded","conflictingFilterActive","isAnyFilterActive","conflictingFilters","sortBy","mode","_sortConfig$conflicti","active","React","SortBy","sort","queryParamName","isConflictingFilterActive","hasConflictingFilters","onSelect","showAsPopup","contentPlacementOffset","noResultsInfo","NoSearchResultsMaybe","title","description","schema","createSearchResultSchema","topbarClasses","classNames","css","topbarBehindModal","topbar","Page","TopbarContainer","rootClassName","currentPage","currentSearchParams","className","layoutWrapperContainer","layoutWrapperFilterColumn","filterColumnContent","FilterComponent","concat","scope","idPrefix","initialValues","liveEdit","isDesktop","resetAllButton","onClick","FormattedMessage","id","layoutWrapperMain","role","searchResultContainer","SearchFiltersMobile","searchFiltersMobileList","sortByComponent","resultsCount","showAsModalMaxWidth","onOpenModal","onCloseModal","selectedFiltersCount","isMapVariant","MainPanelHeader","mainPanel","isSortByActive","listingsForGridVariant","newSearchInProgress","H3","error","H5","SearchResultsPanel","searchListingsPanel","parse","FooterContainer","defaultProps","compose","connect","currentPageResultIds","SearchPage","getListingsById","isScrollingDisabled","dispatch","componentId","disableScrolling","manageDisableScrolling","useConfiguration","useRouteConfiguration","useIntl","useHistory","useLocation","assign"],"sourceRoot":""}