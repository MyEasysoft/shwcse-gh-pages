{"version":3,"file":"ProfileSettingsPage.813c404e.chunk.js","mappings":"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","sources":["webpack://app/./src/containers/ProfileSettingsPage/ProfileSettingsForm/ProfileSettingsForm.module.css?5b2d","containers/ProfileSettingsPage/ProfileSettingsForm/ProfileSettingsForm.js","webpack://app/./src/containers/ProfileSettingsPage/ProfileSettingsPage.module.css?ce6b","containers/ProfileSettingsPage/ProfileSettingsPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ProfileSettingsForm_root__08ZA6\",\"sectionContainer\":\"ProfileSettingsForm_sectionContainer__b-9mI\",\"sectionTitle\":\"ProfileSettingsForm_sectionTitle__7hzrL\",\"lastSection\":\"ProfileSettingsForm_lastSection__RAzhW\",\"uploadAvatarInput\":\"ProfileSettingsForm_uploadAvatarInput__RyQpK\",\"uploadAvatarWrapper\":\"ProfileSettingsForm_uploadAvatarWrapper__4f6Ov\",\"label\":\"ProfileSettingsForm_label__8dLxQ\",\"avatarPlaceholder\":\"ProfileSettingsForm_avatarPlaceholder__RyHC7\",\"avatarContainer\":\"ProfileSettingsForm_avatarContainer__Ctpxb\",\"avatarPlaceholderTextMobile\":\"ProfileSettingsForm_avatarPlaceholderTextMobile__nKz01\",\"avatarPlaceholderText\":\"ProfileSettingsForm_avatarPlaceholderText__8Q6-J\",\"avatarUploadError\":\"ProfileSettingsForm_avatarUploadError__8eEut\",\"error\":\"ProfileSettingsForm_error__sXHS5 h4\",\"avatar\":\"ProfileSettingsForm_avatar__JxnAW\",\"changeAvatar\":\"ProfileSettingsForm_changeAvatar__8Gnur h5\",\"uploadingImage\":\"ProfileSettingsForm_uploadingImage__miU4s\",\"uploadingImageOverlay\":\"ProfileSettingsForm_uploadingImageOverlay__kwAOr\",\"avatarInvisible\":\"ProfileSettingsForm_avatarInvisible__71PPr\",\"tip\":\"ProfileSettingsForm_tip__U1C9Z marketplaceDefaultFontStyles\",\"fileInfo\":\"ProfileSettingsForm_fileInfo__DBGRG h5\",\"nameContainer\":\"ProfileSettingsForm_nameContainer__7aef9\",\"firstName\":\"ProfileSettingsForm_firstName__RjFd2\",\"lastName\":\"ProfileSettingsForm_lastName__orpIw\",\"bioInfo\":\"ProfileSettingsForm_bioInfo__HTT+j textSmall\",\"submitButton\":\"ProfileSettingsForm_submitButton__WjN6X\"};","import React, { Component } from 'react';\r\nimport { bool, string } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { Field, Form as FinalForm } from 'react-final-form';\r\nimport isEqual from 'lodash/isEqual';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport { ensureCurrentUser } from '../../../util/data';\r\nimport { propTypes } from '../../../util/types';\r\nimport * as validators from '../../../util/validators';\r\nimport { isUploadImageOverLimitError } from '../../../util/errors';\r\n\r\nimport {\r\n  Form,\r\n  Avatar,\r\n  Button,\r\n  ImageFromFile,\r\n  IconSpinner,\r\n  FieldTextInput,\r\n  H4,\r\n} from '../../../components';\r\n\r\nimport css from './ProfileSettingsForm.module.css';\r\n\r\nconst ACCEPT_IMAGES = 'image/*';\r\nconst UPLOAD_CHANGE_DELAY = 2000; // Show spinner so that browser has time to load img srcset\r\n\r\nclass ProfileSettingsFormComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.uploadDelayTimeoutId = null;\r\n    this.state = { uploadDelay: false };\r\n    this.submittedValues = {};\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    // Upload delay is additional time window where Avatar is added to the DOM,\r\n    // but not yet visible (time to load image URL from srcset)\r\n    if (prevProps.uploadInProgress && !this.props.uploadInProgress) {\r\n      this.setState({ uploadDelay: true });\r\n      this.uploadDelayTimeoutId = window.setTimeout(() => {\r\n        this.setState({ uploadDelay: false });\r\n      }, UPLOAD_CHANGE_DELAY);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.clearTimeout(this.uploadDelayTimeoutId);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <FinalForm\r\n        {...this.props}\r\n        render={fieldRenderProps => {\r\n          const {\r\n            className,\r\n            currentUser,\r\n            handleSubmit,\r\n            intl,\r\n            invalid,\r\n            onImageUpload,\r\n            pristine,\r\n            profileImage,\r\n            rootClassName,\r\n            updateInProgress,\r\n            updateProfileError,\r\n            uploadImageError,\r\n            uploadInProgress,\r\n            form,\r\n            marketplaceName,\r\n            values,\r\n          } = fieldRenderProps;\r\n\r\n          const user = ensureCurrentUser(currentUser);\r\n\r\n          // First name\r\n          const firstNameLabel = intl.formatMessage({\r\n            id: 'ProfileSettingsForm.firstNameLabel',\r\n          });\r\n          const firstNamePlaceholder = intl.formatMessage({\r\n            id: 'ProfileSettingsForm.firstNamePlaceholder',\r\n          });\r\n          const firstNameRequiredMessage = intl.formatMessage({\r\n            id: 'ProfileSettingsForm.firstNameRequired',\r\n          });\r\n          const firstNameRequired = validators.required(firstNameRequiredMessage);\r\n\r\n          // Last name\r\n          const lastNameLabel = intl.formatMessage({\r\n            id: 'ProfileSettingsForm.lastNameLabel',\r\n          });\r\n          const lastNamePlaceholder = intl.formatMessage({\r\n            id: 'ProfileSettingsForm.lastNamePlaceholder',\r\n          });\r\n          const lastNameRequiredMessage = intl.formatMessage({\r\n            id: 'ProfileSettingsForm.lastNameRequired',\r\n          });\r\n          const lastNameRequired = validators.required(lastNameRequiredMessage);\r\n\r\n          // Bio\r\n          const bioLabel = intl.formatMessage({\r\n            id: 'ProfileSettingsForm.bioLabel',\r\n          });\r\n          const bioPlaceholder = intl.formatMessage({\r\n            id: 'ProfileSettingsForm.bioPlaceholder',\r\n          });\r\n\r\n          const uploadingOverlay =\r\n            uploadInProgress || this.state.uploadDelay ? (\r\n              <div className={css.uploadingImageOverlay}>\r\n                <IconSpinner />\r\n              </div>\r\n            ) : null;\r\n\r\n          const hasUploadError = !!uploadImageError && !uploadInProgress;\r\n          const errorClasses = classNames({ [css.avatarUploadError]: hasUploadError });\r\n          const transientUserProfileImage = profileImage.uploadedImage || user.profileImage;\r\n          const transientUser = { ...user, profileImage: transientUserProfileImage };\r\n\r\n          // Ensure that file exists if imageFromFile is used\r\n          const fileExists = !!profileImage.file;\r\n          const fileUploadInProgress = uploadInProgress && fileExists;\r\n          const delayAfterUpload = profileImage.imageId && this.state.uploadDelay;\r\n          const imageFromFile =\r\n            fileExists && (fileUploadInProgress || delayAfterUpload) ? (\r\n              <ImageFromFile\r\n                id={profileImage.id}\r\n                className={errorClasses}\r\n                rootClassName={css.uploadingImage}\r\n                aspectWidth={1}\r\n                aspectHeight={1}\r\n                file={profileImage.file}\r\n              >\r\n                {uploadingOverlay}\r\n              </ImageFromFile>\r\n            ) : null;\r\n\r\n          // Avatar is rendered in hidden during the upload delay\r\n          // Upload delay smoothes image change process:\r\n          // responsive img has time to load srcset stuff before it is shown to user.\r\n          const avatarClasses = classNames(errorClasses, css.avatar, {\r\n            [css.avatarInvisible]: this.state.uploadDelay,\r\n          });\r\n          const avatarComponent =\r\n            !fileUploadInProgress && profileImage.imageId ? (\r\n              <Avatar\r\n                className={avatarClasses}\r\n                renderSizes=\"(max-width: 767px) 96px, 240px\"\r\n                user={transientUser}\r\n                disableProfileLink\r\n              />\r\n            ) : null;\r\n\r\n          const chooseAvatarLabel =\r\n            profileImage.imageId || fileUploadInProgress ? (\r\n              <div className={css.avatarContainer}>\r\n                {imageFromFile}\r\n                {avatarComponent}\r\n                <div className={css.changeAvatar}>\r\n                  <FormattedMessage id=\"ProfileSettingsForm.changeAvatar\" />\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className={css.avatarPlaceholder}>\r\n                <div className={css.avatarPlaceholderText}>\r\n                  <FormattedMessage id=\"ProfileSettingsForm.addYourProfilePicture\" />\r\n                </div>\r\n                <div className={css.avatarPlaceholderTextMobile}>\r\n                  <FormattedMessage id=\"ProfileSettingsForm.addYourProfilePictureMobile\" />\r\n                </div>\r\n              </div>\r\n            );\r\n\r\n          const submitError = updateProfileError ? (\r\n            <div className={css.error}>\r\n              <FormattedMessage id=\"ProfileSettingsForm.updateProfileFailed\" />\r\n            </div>\r\n          ) : null;\r\n\r\n          const classes = classNames(rootClassName || css.root, className);\r\n          const submitInProgress = updateInProgress;\r\n          const submittedOnce = Object.keys(this.submittedValues).length > 0;\r\n          const pristineSinceLastSubmit = submittedOnce && isEqual(values, this.submittedValues);\r\n          const submitDisabled =\r\n            invalid || pristine || pristineSinceLastSubmit || uploadInProgress || submitInProgress;\r\n\r\n          return (\r\n            <Form\r\n              className={classes}\r\n              onSubmit={e => {\r\n                this.submittedValues = values;\r\n                handleSubmit(e);\r\n              }}\r\n            >\r\n              <div className={css.sectionContainer}>\r\n                <H4 as=\"h2\" className={css.sectionTitle}>\r\n                  <FormattedMessage id=\"ProfileSettingsForm.yourProfilePicture\" />\r\n                </H4>\r\n                <Field\r\n                  accept={ACCEPT_IMAGES}\r\n                  id=\"profileImage\"\r\n                  name=\"profileImage\"\r\n                  label={chooseAvatarLabel}\r\n                  type=\"file\"\r\n                  form={null}\r\n                  uploadImageError={uploadImageError}\r\n                  disabled={uploadInProgress}\r\n                >\r\n                  {fieldProps => {\r\n                    const { accept, id, input, label, disabled, uploadImageError } = fieldProps;\r\n                    const { name, type } = input;\r\n                    const onChange = e => {\r\n                      const file = e.target.files[0];\r\n                      form.change(`profileImage`, file);\r\n                      form.blur(`profileImage`);\r\n                      if (file != null) {\r\n                        const tempId = `${file.name}_${Date.now()}`;\r\n                        onImageUpload({ id: tempId, file });\r\n                      }\r\n                    };\r\n\r\n                    let error = null;\r\n\r\n                    if (isUploadImageOverLimitError(uploadImageError)) {\r\n                      error = (\r\n                        <div className={css.error}>\r\n                          <FormattedMessage id=\"ProfileSettingsForm.imageUploadFailedFileTooLarge\" />\r\n                        </div>\r\n                      );\r\n                    } else if (uploadImageError) {\r\n                      error = (\r\n                        <div className={css.error}>\r\n                          <FormattedMessage id=\"ProfileSettingsForm.imageUploadFailed\" />\r\n                        </div>\r\n                      );\r\n                    }\r\n\r\n                    return (\r\n                      <div className={css.uploadAvatarWrapper}>\r\n                        <label className={css.label} htmlFor={id}>\r\n                          {label}\r\n                        </label>\r\n                        <input\r\n                          accept={accept}\r\n                          id={id}\r\n                          name={name}\r\n                          className={css.uploadAvatarInput}\r\n                          disabled={disabled}\r\n                          onChange={onChange}\r\n                          type={type}\r\n                        />\r\n                        {error}\r\n                      </div>\r\n                    );\r\n                  }}\r\n                </Field>\r\n                <div className={css.tip}>\r\n                  <FormattedMessage id=\"ProfileSettingsForm.tip\" />\r\n                </div>\r\n                <div className={css.fileInfo}>\r\n                  <FormattedMessage id=\"ProfileSettingsForm.fileInfo\" />\r\n                </div>\r\n              </div>\r\n              <div className={css.sectionContainer}>\r\n                <H4 as=\"h2\" className={css.sectionTitle}>\r\n                  <FormattedMessage id=\"ProfileSettingsForm.yourName\" />\r\n                </H4>\r\n                <div className={css.nameContainer}>\r\n                  <FieldTextInput\r\n                    className={css.firstName}\r\n                    type=\"text\"\r\n                    id=\"firstName\"\r\n                    name=\"firstName\"\r\n                    label={firstNameLabel}\r\n                    placeholder={firstNamePlaceholder}\r\n                    validate={firstNameRequired}\r\n                  />\r\n                  <FieldTextInput\r\n                    className={css.lastName}\r\n                    type=\"text\"\r\n                    id=\"lastName\"\r\n                    name=\"lastName\"\r\n                    label={lastNameLabel}\r\n                    placeholder={lastNamePlaceholder}\r\n                    validate={lastNameRequired}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className={classNames(css.sectionContainer, css.lastSection)}>\r\n                <H4 as=\"h2\" className={css.sectionTitle}>\r\n                  <FormattedMessage id=\"ProfileSettingsForm.bioHeading\" />\r\n                </H4>\r\n                <FieldTextInput\r\n                  type=\"textarea\"\r\n                  id=\"bio\"\r\n                  name=\"bio\"\r\n                  label={bioLabel}\r\n                  placeholder={bioPlaceholder}\r\n                />\r\n                <p className={css.bioInfo}>\r\n                  <FormattedMessage id=\"ProfileSettingsForm.bioInfo\" values={{ marketplaceName }} />\r\n                </p>\r\n              </div>\r\n              {submitError}\r\n              <Button\r\n                className={css.submitButton}\r\n                type=\"submit\"\r\n                inProgress={submitInProgress}\r\n                disabled={submitDisabled}\r\n                ready={pristineSinceLastSubmit}\r\n              >\r\n                <FormattedMessage id=\"ProfileSettingsForm.saveChanges\" />\r\n              </Button>\r\n            </Form>\r\n          );\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nProfileSettingsFormComponent.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  uploadImageError: null,\r\n  updateProfileError: null,\r\n  updateProfileReady: false,\r\n};\r\n\r\nProfileSettingsFormComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n\r\n  uploadImageError: propTypes.error,\r\n  uploadInProgress: bool.isRequired,\r\n  updateInProgress: bool.isRequired,\r\n  updateProfileError: propTypes.error,\r\n  updateProfileReady: bool,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst ProfileSettingsForm = compose(injectIntl)(ProfileSettingsFormComponent);\r\n\r\nProfileSettingsForm.displayName = 'ProfileSettingsForm';\r\n\r\nexport default ProfileSettingsForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ProfileSettingsPage_root__Wc4ke\",\"content\":\"ProfileSettingsPage_content__U-ScU\",\"headingContainer\":\"ProfileSettingsPage_headingContainer__w4e5o\",\"heading\":\"ProfileSettingsPage_heading__BCBVA\",\"profileLink\":\"ProfileSettingsPage_profileLink__Q8Pad buttonSecondaryInline\"};","import React from 'react';\r\nimport { bool, func, object, shape, string } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useConfiguration } from '../../context/configurationContext';\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\r\nimport { propTypes } from '../../util/types';\r\nimport { ensureCurrentUser } from '../../util/data';\r\nimport { isScrollingDisabled } from '../../ducks/ui.duck';\r\n\r\nimport { H3, Page, UserNav, NamedLink, LayoutSingleColumn } from '../../components';\r\n\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\nimport FooterContainer from '../../containers/FooterContainer/FooterContainer';\r\n\r\nimport ProfileSettingsForm from './ProfileSettingsForm/ProfileSettingsForm';\r\n\r\nimport { updateProfile, uploadImage } from './ProfileSettingsPage.duck';\r\nimport css from './ProfileSettingsPage.module.css';\r\n\r\nconst onImageUploadHandler = (values, fn) => {\r\n  const { id, imageId, file } = values;\r\n  if (file) {\r\n    fn({ id, imageId, file });\r\n  }\r\n};\r\n\r\nexport const ProfileSettingsPageComponent = props => {\r\n  const config = useConfiguration();\r\n  const {\r\n    currentUser,\r\n    image,\r\n    onImageUpload,\r\n    onUpdateProfile,\r\n    scrollingDisabled,\r\n    updateInProgress,\r\n    updateProfileError,\r\n    uploadImageError,\r\n    uploadInProgress,\r\n    intl,\r\n  } = props;\r\n\r\n  const handleSubmit = values => {\r\n    const { firstName, lastName, bio: rawBio } = values;\r\n\r\n    // Ensure that the optional bio is a string\r\n    const bio = rawBio || '';\r\n\r\n    const profile = {\r\n      firstName: firstName.trim(),\r\n      lastName: lastName.trim(),\r\n      bio,\r\n    };\r\n    const uploadedImage = props.image;\r\n\r\n    // Update profileImage only if file system has been accessed\r\n    const updatedValues =\r\n      uploadedImage && uploadedImage.imageId && uploadedImage.file\r\n        ? { ...profile, profileImageId: uploadedImage.imageId }\r\n        : profile;\r\n\r\n    onUpdateProfile(updatedValues);\r\n  };\r\n\r\n  const user = ensureCurrentUser(currentUser);\r\n  const { firstName, lastName, bio } = user.attributes.profile;\r\n  const profileImageId = user.profileImage ? user.profileImage.id : null;\r\n  const profileImage = image || { imageId: profileImageId };\r\n\r\n  const profileSettingsForm = user.id ? (\r\n    <ProfileSettingsForm\r\n      className={css.form}\r\n      currentUser={currentUser}\r\n      initialValues={{ firstName, lastName, bio, profileImage: user.profileImage }}\r\n      profileImage={profileImage}\r\n      onImageUpload={e => onImageUploadHandler(e, onImageUpload)}\r\n      uploadInProgress={uploadInProgress}\r\n      updateInProgress={updateInProgress}\r\n      uploadImageError={uploadImageError}\r\n      updateProfileError={updateProfileError}\r\n      onSubmit={handleSubmit}\r\n      marketplaceName={config.marketplaceName}\r\n    />\r\n  ) : null;\r\n\r\n  const title = intl.formatMessage({ id: 'ProfileSettingsPage.title' });\r\n\r\n  return (\r\n    <Page className={css.root} title={title} scrollingDisabled={scrollingDisabled}>\r\n      <LayoutSingleColumn\r\n        topbar={\r\n          <>\r\n            <TopbarContainer currentPage=\"ProfileSettingsPage\" />\r\n            <UserNav currentPage=\"ProfileSettingsPage\" />\r\n          </>\r\n        }\r\n        footer={<FooterContainer />}\r\n      >\r\n        <div className={css.content}>\r\n          <div className={css.headingContainer}>\r\n            <H3 as=\"h1\" className={css.heading}>\r\n              <FormattedMessage id=\"ProfileSettingsPage.heading\" />\r\n            </H3>\r\n            {user.id ? (\r\n              <NamedLink\r\n                className={css.profileLink}\r\n                name=\"ProfilePage\"\r\n                params={{ id: user.id.uuid }}\r\n              >\r\n                <FormattedMessage id=\"ProfileSettingsPage.viewProfileLink\" />\r\n              </NamedLink>\r\n            ) : null}\r\n          </div>\r\n          {profileSettingsForm}\r\n        </div>\r\n      </LayoutSingleColumn>\r\n    </Page>\r\n  );\r\n};\r\n\r\nProfileSettingsPageComponent.defaultProps = {\r\n  currentUser: null,\r\n  uploadImageError: null,\r\n  updateProfileError: null,\r\n  image: null,\r\n  config: null,\r\n};\r\n\r\nProfileSettingsPageComponent.propTypes = {\r\n  currentUser: propTypes.currentUser,\r\n  image: shape({\r\n    id: string,\r\n    imageId: propTypes.uuid,\r\n    file: object,\r\n    uploadedImage: propTypes.image,\r\n  }),\r\n  onImageUpload: func.isRequired,\r\n  onUpdateProfile: func.isRequired,\r\n  scrollingDisabled: bool.isRequired,\r\n  updateInProgress: bool.isRequired,\r\n  updateProfileError: propTypes.error,\r\n  uploadImageError: propTypes.error,\r\n  uploadInProgress: bool.isRequired,\r\n\r\n  // from useConfiguration()\r\n  config: object,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const { currentUser } = state.user;\r\n  const {\r\n    image,\r\n    uploadImageError,\r\n    uploadInProgress,\r\n    updateInProgress,\r\n    updateProfileError,\r\n  } = state.ProfileSettingsPage;\r\n  return {\r\n    currentUser,\r\n    image,\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n    updateInProgress,\r\n    updateProfileError,\r\n    uploadImageError,\r\n    uploadInProgress,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onImageUpload: data => dispatch(uploadImage(data)),\r\n  onUpdateProfile: data => dispatch(updateProfile(data)),\r\n});\r\n\r\nconst ProfileSettingsPage = compose(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  ),\r\n  injectIntl\r\n)(ProfileSettingsPageComponent);\r\n\r\nexport default ProfileSettingsPage;\r\n"],"names":["ProfileSettingsFormComponent","Component","constructor","props","super","this","uploadDelayTimeoutId","state","uploadDelay","submittedValues","componentDidUpdate","prevProps","uploadInProgress","setState","window","setTimeout","componentWillUnmount","clearTimeout","render","React","FinalForm","Object","assign","fieldRenderProps","className","currentUser","handleSubmit","intl","invalid","onImageUpload","pristine","profileImage","rootClassName","updateInProgress","updateProfileError","uploadImageError","form","marketplaceName","values","user","ensureCurrentUser","firstNameLabel","formatMessage","id","firstNamePlaceholder","firstNameRequiredMessage","firstNameRequired","validators","lastNameLabel","lastNamePlaceholder","lastNameRequiredMessage","lastNameRequired","bioLabel","bioPlaceholder","uploadingOverlay","css","IconSpinner","hasUploadError","errorClasses","classNames","transientUserProfileImage","uploadedImage","transientUser","fileExists","file","fileUploadInProgress","delayAfterUpload","imageId","imageFromFile","ImageFromFile","aspectWidth","aspectHeight","avatarClasses","avatarComponent","Avatar","renderSizes","disableProfileLink","chooseAvatarLabel","FormattedMessage","submitError","classes","submitInProgress","pristineSinceLastSubmit","keys","length","isEqual","submitDisabled","Form","onSubmit","e","H4","as","Field","accept","name","label","type","disabled","fieldProps","input","error","isUploadImageOverLimitError","htmlFor","onChange","target","files","change","blur","tempId","concat","Date","now","FieldTextInput","placeholder","validate","Button","inProgress","ready","defaultProps","updateProfileReady","ProfileSettingsForm","compose","injectIntl","displayName","ProfileSettingsPageComponent","config","useConfiguration","image","onUpdateProfile","scrollingDisabled","firstName","lastName","bio","attributes","profile","profileImageId","profileSettingsForm","initialValues","onImageUploadHandler","fn","rawBio","trim","updatedValues","title","Page","root","LayoutSingleColumn","topbar","TopbarContainer","currentPage","UserNav","footer","FooterContainer","content","headingContainer","H3","heading","NamedLink","profileLink","params","uuid","ProfileSettingsPage","connect","isScrollingDisabled","dispatch","data","uploadImage","updateProfile"],"sourceRoot":""}