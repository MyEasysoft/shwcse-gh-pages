{"version":3,"file":"TransactionPage.2f8fc762.chunk.js","mappings":"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","sources":["webpack://app/./src/containers/TransactionPage/DisputeModal/DisputeModal.module.css?c0c2","containers/TransactionPage/DisputeModal/DisputeModal.js","webpack://app/./src/containers/TransactionPage/ReviewModal/ReviewModal.module.css?992f","containers/TransactionPage/ReviewModal/ReviewModal.js","containers/TransactionPage/TransactionPanel/BreakdownMaybe.js","containers/TransactionPage/TransactionPanel/DetailCardHeadingsMaybe.js","containers/TransactionPage/TransactionPanel/DetailCardImage.js","containers/TransactionPage/TransactionPanel/AddressLinkMaybe.js","containers/TransactionPage/TransactionPanel/DeliveryInfoMaybe.js","containers/TransactionPage/TransactionPanel/BookingLocationMaybe.js","containers/TransactionPage/TransactionPanel/InquiryMessageMaybe.js","containers/TransactionPage/TransactionPanel/FeedSection.js","containers/TransactionPage/TransactionPanel/ActionButtonsMaybe.js","containers/TransactionPage/TransactionPanel/DiminishedActionButtonMaybe.js","containers/TransactionPage/TransactionPanel/TransactionPanel.js","util/userAgent.js","webpack://app/./src/containers/TransactionPage/TransactionPage.module.css?d01a","containers/TransactionPage/TransactionPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"DisputeModal_root__fYhdZ marketplaceModalBaseStyles\",\"modalContent\":\"DisputeModal_modalContent__K900t\",\"modalIcon\":\"DisputeModal_modalIcon__3lXfI marketplaceModalIconStyles\",\"modalTitle\":\"DisputeModal_modalTitle__zcpYJ marketplaceModalTitleStyles\",\"modalMessage\":\"DisputeModal_modalMessage__LihTB marketplaceModalParagraphStyles\",\"formRoot\":\"DisputeModal_formRoot__kyVhn\",\"errorPlaceholder\":\"DisputeModal_errorPlaceholder__tGpUX\",\"disputeMessage\":\"DisputeModal_disputeMessage__hzvM5\",\"submitButton\":\"DisputeModal_submitButton__U5hSU\"};","import React from 'react';\r\nimport { bool, func, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { Form as FinalForm } from 'react-final-form';\r\n\r\nimport { useConfiguration } from '../../../context/configurationContext';\r\nimport { FormattedMessage, intlShape, injectIntl } from '../../../util/reactIntl';\r\nimport { propTypes } from '../../../util/types';\r\nimport { required } from '../../../util/validators';\r\n\r\nimport { FieldTextInput, Form, IconDisputeOrder, Modal, PrimaryButton } from '../../../components';\r\n\r\nimport css from './DisputeModal.module.css';\r\n\r\nconst DisputeForm = props => (\r\n  <FinalForm\r\n    {...props}\r\n    render={fieldRenderProps => {\r\n      const {\r\n        className,\r\n        rootClassName,\r\n        disabled,\r\n        handleSubmit,\r\n        intl,\r\n        formId,\r\n        invalid,\r\n        disputeSubmitted,\r\n        disputeError,\r\n        disputeInProgress,\r\n      } = fieldRenderProps;\r\n\r\n      const errorMessageMaybe = disputeError ? (\r\n        <FormattedMessage id=\"DisputeModal.disputeSubmitFailed\" />\r\n      ) : null;\r\n\r\n      const classes = classNames(rootClassName || css.formRoot, className);\r\n      const submitInProgress = disputeInProgress;\r\n      const submitDisabled = invalid || disabled || submitInProgress || disputeSubmitted;\r\n\r\n      return (\r\n        <Form className={classes} onSubmit={handleSubmit}>\r\n          <FieldTextInput\r\n            className={css.disputeMessage}\r\n            type=\"textarea\"\r\n            id={formId ? `${formId}.disputeReason` : 'disputeReason'}\r\n            name=\"disputeReason\"\r\n            label={intl.formatMessage({ id: 'DisputeModal.label' })}\r\n            placeholder={intl.formatMessage({ id: 'DisputeModal.disputePlaceholder' })}\r\n            validate={required(intl.formatMessage({ id: 'DisputeModal.disputeReasonRequired' }))}\r\n          />\r\n          <p className={css.errorPlaceholder}>{errorMessageMaybe}</p>\r\n          <PrimaryButton\r\n            className={css.submitButton}\r\n            type=\"submit\"\r\n            inProgress={disputeInProgress}\r\n            disabled={submitDisabled}\r\n            ready={disputeSubmitted}\r\n          >\r\n            {intl.formatMessage({ id: 'DisputeModal.submit' })}\r\n          </PrimaryButton>\r\n        </Form>\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\n// Show dispute form\r\nconst DisputeInfo = props => {\r\n  const config = useConfiguration();\r\n  const marketplaceName = config.marketplaceName;\r\n\r\n  return (\r\n    <>\r\n      <p className={css.modalTitle}>\r\n        <FormattedMessage id=\"DisputeModal.title\" />\r\n      </p>\r\n      <p className={css.modalMessage}>\r\n        <FormattedMessage id=\"DisputeModal.description\" values={{ marketplaceName }} />\r\n      </p>\r\n      <DisputeForm\r\n        onSubmit={props.onDisputeOrder}\r\n        disputeSubmitted={props.disputeSubmitted}\r\n        disputeInProgress={props.disputeInProgress}\r\n        disputeError={props.disputeError}\r\n        intl={props.intl}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\n// Show info that dispute form has been sent already.\r\nconst DisputeSentInfo = props => (\r\n  <>\r\n    <p className={css.modalTitle}>\r\n      <FormattedMessage id=\"DisputeModal.sentTitle\" />\r\n    </p>\r\n    <p className={css.modalMessage}>\r\n      <FormattedMessage id=\"DisputeModal.sentMessage\" />\r\n    </p>\r\n    <p className={css.modalMessage}>\r\n      <FormattedMessage id=\"DisputeModal.sentNextStep\" />\r\n    </p>\r\n  </>\r\n);\r\n\r\n// Dispute modal\r\nconst DisputeModal = props => {\r\n  const {\r\n    className,\r\n    rootClassName,\r\n    id,\r\n    intl,\r\n    isOpen,\r\n    onCloseModal,\r\n    onManageDisableScrolling,\r\n    onDisputeOrder,\r\n    disputeSubmitted,\r\n    disputeInProgress,\r\n    disputeError,\r\n  } = props;\r\n  const classes = classNames(rootClassName || css.root, className);\r\n\r\n  return (\r\n    <Modal\r\n      id={id}\r\n      containerClassName={classes}\r\n      contentClassName={css.modalContent}\r\n      isOpen={isOpen}\r\n      onClose={onCloseModal}\r\n      onManageDisableScrolling={onManageDisableScrolling}\r\n      usePortal\r\n      closeButtonMessage={intl.formatMessage({ id: 'DisputeModal.close' })}\r\n    >\r\n      <IconDisputeOrder className={css.modalIcon} />\r\n      {disputeSubmitted ? (\r\n        <DisputeSentInfo />\r\n      ) : (\r\n        <DisputeInfo\r\n          onDisputeOrder={onDisputeOrder}\r\n          disputeSubmitted={disputeSubmitted}\r\n          disputeInProgress={disputeInProgress}\r\n          disputeError={disputeError}\r\n          intl={intl}\r\n        />\r\n      )}\r\n    </Modal>\r\n  );\r\n};\r\n\r\nDisputeModal.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n  isOpen: false,\r\n  disputeSubmitted: false,\r\n  disputeInProgress: false,\r\n  disputeError: null,\r\n};\r\n\r\nDisputeModal.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n  id: string.isRequired,\r\n  isOpen: bool,\r\n  intl: intlShape.isRequired,\r\n  onCloseModal: func.isRequired,\r\n  onManageDisableScrolling: func.isRequired,\r\n  onDisputeOrder: func.isRequired,\r\n  disputeSubmitted: bool,\r\n  disputeInProgress: bool,\r\n  disputeError: propTypes.error,\r\n};\r\n\r\nexport default injectIntl(DisputeModal);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ReviewModal_root__fIlBS marketplaceModalBaseStyles\",\"modalContent\":\"ReviewModal_modalContent__db5Iu\",\"modalIcon\":\"ReviewModal_modalIcon__mOvmv marketplaceModalIconStyles\",\"modalTitle\":\"ReviewModal_modalTitle__pDkDS marketplaceModalTitleStyles\",\"reviewee\":\"ReviewModal_reviewee__4Vr8h\",\"modalMessage\":\"ReviewModal_modalMessage__outW6 marketplaceModalParagraphStyles\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage, intlShape, injectIntl } from '../../../util/reactIntl';\r\nimport { propTypes } from '../../../util/types';\r\nimport { IconReviewUser, Modal } from '../../../components';\r\n\r\nimport ReviewForm from '../ReviewForm/ReviewForm';\r\n\r\nimport css from './ReviewModal.module.css';\r\n\r\nconst ReviewModal = props => {\r\n  const {\r\n    className,\r\n    rootClassName,\r\n    id,\r\n    marketplaceName,\r\n    intl,\r\n    isOpen,\r\n    onCloseModal,\r\n    onManageDisableScrolling,\r\n    onSubmitReview,\r\n    revieweeName,\r\n    reviewSent,\r\n    sendReviewInProgress,\r\n    sendReviewError,\r\n  } = props;\r\n\r\n  const classes = classNames(rootClassName || css.root, className);\r\n  const closeButtonMessage = intl.formatMessage({ id: 'ReviewModal.later' });\r\n  const reviewee = <span className={css.reviewee}>{revieweeName}</span>;\r\n\r\n  return (\r\n    <Modal\r\n      id={id}\r\n      containerClassName={classes}\r\n      contentClassName={css.modalContent}\r\n      isOpen={isOpen}\r\n      onClose={onCloseModal}\r\n      onManageDisableScrolling={onManageDisableScrolling}\r\n      usePortal\r\n      closeButtonMessage={closeButtonMessage}\r\n    >\r\n      <IconReviewUser className={css.modalIcon} />\r\n      <p className={css.modalTitle}>\r\n        <FormattedMessage id=\"ReviewModal.title\" values={{ revieweeName: reviewee }} />\r\n      </p>\r\n      <p className={css.modalMessage}>\r\n        <FormattedMessage id=\"ReviewModal.description\" values={{ marketplaceName }} />\r\n      </p>\r\n      <ReviewForm\r\n        onSubmit={onSubmitReview}\r\n        reviewSent={reviewSent}\r\n        sendReviewInProgress={sendReviewInProgress}\r\n        sendReviewError={sendReviewError}\r\n      />\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst { bool, string } = PropTypes;\r\n\r\nReviewModal.defaultProps = {\r\n  className: null,\r\n  rootClassName: null,\r\n  reviewSent: false,\r\n  sendReviewInProgress: false,\r\n  sendReviewError: null,\r\n};\r\n\r\nReviewModal.propTypes = {\r\n  className: string,\r\n  rootClassName: string,\r\n  intl: intlShape.isRequired,\r\n  reviewSent: bool,\r\n  sendReviewInProgress: bool,\r\n  sendReviewError: propTypes.error,\r\n  marketplaceName: string.isRequired,\r\n};\r\n\r\nexport default injectIntl(ReviewModal);\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage } from '../../../util/reactIntl';\r\nimport { H6 } from '../../../components';\r\n\r\nimport css from './TransactionPanel.module.css';\r\n\r\n// Functional component as a helper to build OrderBreakdown\r\nconst BreakdownMaybe = props => {\r\n  const { className, rootClassName, orderBreakdown, processName } = props;\r\n  const classes = classNames(rootClassName || css.breakdownMaybe, className);\r\n\r\n  return orderBreakdown ? (\r\n    <div className={classes}>\r\n      <H6 as=\"h3\" className={css.orderBreakdownTitle}>\r\n        <FormattedMessage id={`TransactionPanel.${processName}.orderBreakdownTitle`} />\r\n      </H6>\r\n      <hr className={css.totalDivider} />\r\n      {orderBreakdown}\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nexport default BreakdownMaybe;\r\n","import React from 'react';\r\nimport { H4 } from '../../../components';\r\n\r\nimport css from './TransactionPanel.module.css';\r\nimport { formatMoney } from '../../../util/currency';\r\n\r\n// Functional component as a helper to build detail card headings\r\nconst DetailCardHeadingsMaybe = props => {\r\n  const { showDetailCardHeadings, listingTitle, subTitle, showPrice, price, intl } = props;\r\n\r\n  return showDetailCardHeadings ? (\r\n    <div className={css.detailCardHeadings}>\r\n      <H4 as=\"h2\" className={css.detailCardTitle}>\r\n        {listingTitle}\r\n\r\n        {showPrice && price ? (\r\n          <>\r\n            <br />\r\n            <span className={css.inquiryPrice}>{formatMoney(intl, price)}</span>\r\n          </>\r\n        ) : null}\r\n      </H4>\r\n      {subTitle ? <p className={css.detailCardSubtitle}>{subTitle}</p> : null}\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nexport default DetailCardHeadingsMaybe;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport { AvatarMedium, AspectRatioWrapper, ResponsiveImage } from '../../../components';\r\n\r\nimport css from './TransactionPanel.module.css';\r\n\r\nconst DetailCardImage = props => {\r\n  const {\r\n    className,\r\n    rootClassName,\r\n    avatarWrapperClassName,\r\n    listingTitle,\r\n    image,\r\n    provider,\r\n    isCustomer,\r\n    listingImageConfig,\r\n  } = props;\r\n  const classes = classNames(rootClassName || css.detailCardImageWrapper, className);\r\n  const { aspectWidth = 1, aspectHeight = 1, variantPrefix = 'listing-card' } = listingImageConfig;\r\n  const variants = image\r\n    ? Object.keys(image?.attributes?.variants).filter(k => k.startsWith(variantPrefix))\r\n    : [];\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AspectRatioWrapper width={aspectWidth} height={aspectHeight} className={classes}>\r\n        <ResponsiveImage\r\n          rootClassName={css.rootForImage}\r\n          alt={listingTitle}\r\n          image={image}\r\n          variants={variants}\r\n        />\r\n      </AspectRatioWrapper>\r\n      {isCustomer ? (\r\n        <div className={avatarWrapperClassName || css.avatarWrapper}>\r\n          <AvatarMedium user={provider} />\r\n        </div>\r\n      ) : null}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DetailCardImage;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage } from '../../../util/reactIntl';\r\n\r\nimport { ExternalLink } from '../../../components';\r\n\r\nimport css from './TransactionPanel.module.css';\r\n\r\n// Functional component as a helper to build AddressLinkMaybe\r\nconst AddressLinkMaybe = props => {\r\n  const { className, rootClassName, linkRootClassName, location, geolocation, showAddress } = props;\r\n  const { address, building } = location || {};\r\n  const { lat, lng } = geolocation || {};\r\n  const hrefToGoogleMaps = geolocation\r\n    ? `https://maps.google.com/?q=${lat},${lng}`\r\n    : address\r\n    ? `https://maps.google.com/?q=${encodeURIComponent(address)}`\r\n    : null;\r\n\r\n  const fullAddress =\r\n    typeof building === 'string' && building.length > 0 ? `${building}, ${address}` : address;\r\n\r\n  const classes = classNames(rootClassName || css.address, className);\r\n  return showAddress && hrefToGoogleMaps ? (\r\n    <p className={classes}>\r\n      {fullAddress} <br />\r\n      <span className={css.viewOnGoogleMapsWrapper}>\r\n        <ExternalLink className={linkRootClassName} href={hrefToGoogleMaps}>\r\n          <FormattedMessage id=\"AddressLinkMaybe.viewOnGoogleMaps\" />\r\n        </ExternalLink>\r\n      </span>\r\n    </p>\r\n  ) : null;\r\n};\r\n\r\nexport default AddressLinkMaybe;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport getCountryCodes from '../../../translations/countryCodes';\r\nimport { FormattedMessage } from '../../../util/reactIntl';\r\nimport { Heading } from '../../../components';\r\n\r\nimport AddressLinkMaybe from './AddressLinkMaybe';\r\n\r\nimport css from './TransactionPanel.module.css';\r\n\r\n// Functional component as a helper to build ActivityFeed section\r\nconst DeliveryInfoMaybe = props => {\r\n  const { className, rootClassName, protectedData, listing, locale } = props;\r\n  const classes = classNames(rootClassName || css.deliveryInfoContainer, className);\r\n  const deliveryMethod = protectedData?.deliveryMethod;\r\n  const isShipping = deliveryMethod === 'shipping';\r\n  const isPickup = deliveryMethod === 'pickup';\r\n\r\n  if (isPickup) {\r\n    const pickupLocation = listing?.attributes?.publicData?.location || {};\r\n    return (\r\n      <div className={classes}>\r\n        <Heading as=\"h3\" rootClassName={css.sectionHeading}>\r\n          <FormattedMessage id=\"TransactionPanel.pickupInfoHeading\" />\r\n        </Heading>\r\n        <div className={css.pickupInfoContent}>\r\n          <AddressLinkMaybe\r\n            linkRootClassName={css.pickupAddress}\r\n            location={pickupLocation}\r\n            geolocation={listing?.attributes?.geolocation}\r\n            showAddress={true}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  } else if (isShipping) {\r\n    const { name, phoneNumber, address } = protectedData?.shippingDetails || {};\r\n    const { line1, line2, city, postalCode, state, country: countryCode } = address || {};\r\n    const phoneMaybe = !!phoneNumber ? (\r\n      <>\r\n        {phoneNumber}\r\n        <br />\r\n      </>\r\n    ) : null;\r\n\r\n    const countryCodes = getCountryCodes(locale);\r\n    const countryInfo = countryCodes.find(c => c.code === countryCode);\r\n    const country = countryInfo?.name;\r\n\r\n    return (\r\n      <div className={classes}>\r\n        <Heading as=\"h3\" rootClassName={css.sectionHeading}>\r\n          <FormattedMessage id=\"TransactionPanel.shippingInfoHeading\" />\r\n        </Heading>\r\n        <div className={css.shippingInfoContent}>\r\n          {name}\r\n          <br />\r\n          {phoneMaybe}\r\n          {line1}\r\n          {line2 ? `, ${line2}` : ''}\r\n          <br />\r\n          {postalCode}, {city}\r\n          <br />\r\n          {state ? `${state}, ` : ''}\r\n          {country}\r\n          <br />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default DeliveryInfoMaybe;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage } from '../../../util/reactIntl';\r\nimport { Heading } from '../../../components';\r\n\r\nimport AddressLinkMaybe from './AddressLinkMaybe';\r\n\r\nimport css from './TransactionPanel.module.css';\r\n\r\n// Functional component as a helper to build ActivityFeed section\r\nconst BookingLocationMaybe = props => {\r\n  const { className, rootClassName, listing, showBookingLocation } = props;\r\n  const classes = classNames(rootClassName || css.bookingLocationContainer, className);\r\n\r\n  if (showBookingLocation) {\r\n    const location = listing?.attributes?.publicData?.location || {};\r\n    return (\r\n      <div className={classes}>\r\n        <Heading as=\"h3\" rootClassName={css.sectionHeading}>\r\n          <FormattedMessage id=\"TransactionPanel.bookingLocationHeading\" />\r\n        </Heading>\r\n        <div className={css.bookingLocationContent}>\r\n          <AddressLinkMaybe\r\n            linkRootClassName={css.bookingLocationAddress}\r\n            location={location}\r\n            geolocation={listing?.attributes?.geolocation}\r\n            showAddress={true}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default BookingLocationMaybe;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage } from '../../../util/reactIntl';\r\nimport { Heading } from '../../../components';\r\n\r\nimport css from './TransactionPanel.module.css';\r\n\r\n// Functional component as a helper to build ActivityFeed section\r\nconst InquiryMessageMaybe = props => {\r\n  const { className, rootClassName, protectedData, showInquiryMessage, isCustomer } = props;\r\n  const classes = classNames(rootClassName || css.deliveryInfoContainer, className);\r\n  const inquiryMsgClasses = isCustomer ? css.ownInquiryMessage : css.inquiryMessage;\r\n\r\n  if (showInquiryMessage) {\r\n    return (\r\n      <div className={classes}>\r\n        <Heading as=\"h3\" rootClassName={css.sectionHeading}>\r\n          <FormattedMessage id=\"TransactionPanel.inquiryMessageHeading\" />\r\n        </Heading>\r\n        <p className={inquiryMsgClasses}>{protectedData?.inquiryMessage}</p>\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default InquiryMessageMaybe;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage } from '../../../util/reactIntl';\r\nimport { Heading } from '../../../components';\r\n\r\nimport css from './TransactionPanel.module.css';\r\n\r\n// Functional component as a helper to build ActivityFeed section\r\nconst FeedSection = props => {\r\n  const {\r\n    className,\r\n    rootClassName,\r\n    activityFeed,\r\n    hasTransitions,\r\n    fetchMessagesError,\r\n    initialMessageFailed,\r\n    hasMessages,\r\n    isConversation,\r\n  } = props;\r\n\r\n  const showFeed = hasMessages || hasTransitions || initialMessageFailed || fetchMessagesError;\r\n\r\n  const classes = classNames(rootClassName || css.feedContainer, className);\r\n\r\n  return showFeed ? (\r\n    <div className={classes}>\r\n      <Heading as=\"h3\" rootClassName={css.sectionHeading}>\r\n        {isConversation ? (\r\n          <FormattedMessage id=\"TransactionPanel.conversationHeading\" />\r\n        ) : (\r\n          <FormattedMessage id=\"TransactionPanel.activityHeading\" />\r\n        )}\r\n      </Heading>\r\n      {initialMessageFailed ? (\r\n        <p className={css.messageError}>\r\n          <FormattedMessage id=\"TransactionPanel.initialMessageFailed\" />\r\n        </p>\r\n      ) : null}\r\n      {fetchMessagesError ? (\r\n        <p className={css.messageError}>\r\n          <FormattedMessage id=\"TransactionPanel.messageLoadingFailed\" />\r\n        </p>\r\n      ) : null}\r\n      <div className={css.feedContent}>{activityFeed}</div>\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nexport default FeedSection;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport { PrimaryButton, SecondaryButton } from '../../../components';\r\n\r\nimport css from './TransactionPanel.module.css';\r\n\r\n// Functional component as a helper to build ActionButtons\r\nconst ActionButtonsMaybe = props => {\r\n  const {\r\n    className,\r\n    rootClassName,\r\n    showButtons,\r\n    primaryButtonProps,\r\n    secondaryButtonProps,\r\n    isListingDeleted,\r\n    isProvider,\r\n  } = props;\r\n\r\n  // In default processes default processes need special handling\r\n  // Booking: provider should not be able to accept on-going transactions\r\n  // Product: customer should be able to dispute etc. on-going transactions\r\n  if (isListingDeleted && isProvider) {\r\n    return null;\r\n  }\r\n\r\n  const buttonsDisabled = primaryButtonProps?.inProgress || secondaryButtonProps?.inProgress;\r\n\r\n  const primaryButton = primaryButtonProps ? (\r\n    <PrimaryButton\r\n      inProgress={primaryButtonProps.inProgress}\r\n      disabled={buttonsDisabled}\r\n      onClick={primaryButtonProps.onAction}\r\n    >\r\n      {primaryButtonProps.buttonText}\r\n    </PrimaryButton>\r\n  ) : null;\r\n  const primaryErrorMessage = primaryButtonProps?.error ? (\r\n    <p className={css.actionError}>{primaryButtonProps?.errorText}</p>\r\n  ) : null;\r\n\r\n  const secondaryButton = secondaryButtonProps ? (\r\n    <SecondaryButton\r\n      inProgress={secondaryButtonProps?.inProgress}\r\n      disabled={buttonsDisabled}\r\n      onClick={secondaryButtonProps.onAction}\r\n    >\r\n      {secondaryButtonProps.buttonText}\r\n    </SecondaryButton>\r\n  ) : null;\r\n  const secondaryErrorMessage = secondaryButtonProps?.error ? (\r\n    <p className={css.actionError}>{secondaryButtonProps?.errorText}</p>\r\n  ) : null;\r\n\r\n  const classes = classNames(rootClassName || css.actionButtons, className);\r\n\r\n  return showButtons ? (\r\n    <div className={classes}>\r\n      <div className={css.actionErrors}>\r\n        {primaryErrorMessage}\r\n        {secondaryErrorMessage}\r\n      </div>\r\n      <div className={css.actionButtonWrapper}>\r\n        {secondaryButton}\r\n        {primaryButton}\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nexport default ActionButtonsMaybe;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport { FormattedMessage } from '../../../util/reactIntl';\r\n\r\nimport { InlineTextButton } from '../../../components';\r\n\r\nimport css from './TransactionPanel.module.css';\r\n\r\n// Functional component as a helper to build ActionButtons\r\n// Currently this is only used to show \"dispute order\" modal,\r\n// but like ActionButtonsMayne, this could be customized to handle different actions too.\r\n// Essentially, this is just a placeholder for diminished actions.\r\nconst DiminishedActionButtonMaybe = props => {\r\n  const { className, rootClassName, showDispute, onOpenDisputeModal } = props;\r\n\r\n  const diminishedActionButton = onOpenDisputeModal ? (\r\n    <InlineTextButton className={css.diminishedActionButton} onClick={onOpenDisputeModal}>\r\n      <FormattedMessage id=\"TransactionPanel.disputeOrder\" />\r\n    </InlineTextButton>\r\n  ) : null;\r\n\r\n  const classes = classNames(rootClassName || css.diminishedActionButtonRoot, className);\r\n\r\n  return showDispute ? <div className={classes}>{diminishedActionButton}</div> : null;\r\n};\r\n\r\nexport default DiminishedActionButtonMaybe;\r\n","import React, { Component } from 'react';\r\nimport { arrayOf, bool, func, node, object, oneOf, string } from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport { displayPrice } from '../../../util/configHelpers';\r\nimport { propTypes } from '../../../util/types';\r\nimport { userDisplayNameAsString } from '../../../util/data';\r\nimport { isMobileSafari } from '../../../util/userAgent';\r\nimport { createSlug } from '../../../util/urlHelpers';\r\n\r\nimport { AvatarLarge, NamedLink, UserDisplayName } from '../../../components';\r\n\r\nimport { stateDataShape } from '../TransactionPage.stateData';\r\nimport SendMessageForm from '../SendMessageForm/SendMessageForm';\r\n\r\n// These are internal components that make this file more readable.\r\nimport BreakdownMaybe from './BreakdownMaybe';\r\nimport DetailCardHeadingsMaybe from './DetailCardHeadingsMaybe';\r\nimport DetailCardImage from './DetailCardImage';\r\nimport DeliveryInfoMaybe from './DeliveryInfoMaybe';\r\nimport BookingLocationMaybe from './BookingLocationMaybe';\r\nimport InquiryMessageMaybe from './InquiryMessageMaybe';\r\nimport FeedSection from './FeedSection';\r\nimport ActionButtonsMaybe from './ActionButtonsMaybe';\r\nimport DiminishedActionButtonMaybe from './DiminishedActionButtonMaybe';\r\nimport PanelHeading from './PanelHeading';\r\n\r\nimport css from './TransactionPanel.module.css';\r\n\r\n// Helper function to get display names for different roles\r\nconst displayNames = (currentUser, provider, customer, intl) => {\r\n  const authorDisplayName = <UserDisplayName user={provider} intl={intl} />;\r\n  const customerDisplayName = <UserDisplayName user={customer} intl={intl} />;\r\n\r\n  let otherUserDisplayName = '';\r\n  let otherUserDisplayNameString = '';\r\n  const currentUserIsCustomer =\r\n    currentUser.id && customer?.id && currentUser.id.uuid === customer?.id?.uuid;\r\n  const currentUserIsProvider =\r\n    currentUser.id && provider?.id && currentUser.id.uuid === provider?.id?.uuid;\r\n\r\n  if (currentUserIsCustomer) {\r\n    otherUserDisplayName = authorDisplayName;\r\n    otherUserDisplayNameString = userDisplayNameAsString(provider, '');\r\n  } else if (currentUserIsProvider) {\r\n    otherUserDisplayName = customerDisplayName;\r\n    otherUserDisplayNameString = userDisplayNameAsString(customer, '');\r\n  }\r\n\r\n  return {\r\n    authorDisplayName,\r\n    customerDisplayName,\r\n    otherUserDisplayName,\r\n    otherUserDisplayNameString,\r\n  };\r\n};\r\n\r\nexport class TransactionPanelComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      sendMessageFormFocused: false,\r\n    };\r\n    this.isMobSaf = false;\r\n    this.sendMessageFormName = 'TransactionPanel.SendMessageForm';\r\n\r\n    this.onSendMessageFormFocus = this.onSendMessageFormFocus.bind(this);\r\n    this.onSendMessageFormBlur = this.onSendMessageFormBlur.bind(this);\r\n    this.onMessageSubmit = this.onMessageSubmit.bind(this);\r\n    this.scrollToMessage = this.scrollToMessage.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.isMobSaf = isMobileSafari();\r\n  }\r\n\r\n  onSendMessageFormFocus() {\r\n    this.setState({ sendMessageFormFocused: true });\r\n    if (this.isMobSaf) {\r\n      // Scroll to bottom\r\n      window.scroll({ top: document.body.scrollHeight, left: 0, behavior: 'smooth' });\r\n    }\r\n  }\r\n\r\n  onSendMessageFormBlur() {\r\n    this.setState({ sendMessageFormFocused: false });\r\n  }\r\n\r\n  onMessageSubmit(values, form) {\r\n    const message = values.message ? values.message.trim() : null;\r\n    const { transactionId, onSendMessage, config } = this.props;\r\n\r\n    if (!message) {\r\n      return;\r\n    }\r\n    onSendMessage(transactionId, message, config)\r\n      .then(messageId => {\r\n        form.reset();\r\n        this.scrollToMessage(messageId);\r\n      })\r\n      .catch(e => {\r\n        // Ignore, Redux handles the error\r\n      });\r\n  }\r\n\r\n  scrollToMessage(messageId) {\r\n    const selector = `#msg-${messageId.uuid}`;\r\n    const el = document.querySelector(selector);\r\n    if (el) {\r\n      el.scrollIntoView({\r\n        block: 'start',\r\n        behavior: 'smooth',\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      rootClassName,\r\n      className,\r\n      currentUser,\r\n      transactionRole,\r\n      listing,\r\n      customer,\r\n      provider,\r\n      hasTransitions,\r\n      protectedData,\r\n      messages,\r\n      initialMessageFailed,\r\n      savePaymentMethodFailed,\r\n      fetchMessagesError,\r\n      sendMessageInProgress,\r\n      sendMessageError,\r\n      onOpenDisputeModal,\r\n      intl,\r\n      stateData,\r\n      showBookingLocation,\r\n      activityFeed,\r\n      isInquiryProcess,\r\n      orderBreakdown,\r\n      orderPanel,\r\n      config,\r\n    } = this.props;\r\n\r\n    const isCustomer = transactionRole === 'customer';\r\n    const isProvider = transactionRole === 'provider';\r\n\r\n    const listingDeleted = !!listing?.attributes?.deleted;\r\n    const isCustomerBanned = !!customer?.attributes?.banned;\r\n    const isCustomerDeleted = !!customer?.attributes?.deleted;\r\n    const isProviderBanned = !!provider?.attributes?.banned;\r\n    const isProviderDeleted = !!provider?.attributes?.deleted;\r\n\r\n    const { authorDisplayName, customerDisplayName, otherUserDisplayNameString } = displayNames(\r\n      currentUser,\r\n      provider,\r\n      customer,\r\n      intl\r\n    );\r\n\r\n    const deletedListingTitle = intl.formatMessage({\r\n      id: 'TransactionPanel.deletedListingTitle',\r\n    });\r\n\r\n    const listingTitle = listingDeleted ? deletedListingTitle : listing?.attributes?.title;\r\n    const firstImage = listing?.images?.length > 0 ? listing?.images[0] : null;\r\n\r\n    const actionButtons = (\r\n      <ActionButtonsMaybe\r\n        showButtons={stateData.showActionButtons}\r\n        primaryButtonProps={stateData?.primaryButtonProps}\r\n        secondaryButtonProps={stateData?.secondaryButtonProps}\r\n        isListingDeleted={listingDeleted}\r\n        isProvider={isProvider}\r\n      />\r\n    );\r\n\r\n    const listingType = listing?.attributes?.publicData?.listingType;\r\n    const listingTypeConfigs = config.listing.listingTypes;\r\n    const listingTypeConfig = listingTypeConfigs.find(conf => conf.listingType === listingType);\r\n    const showPrice = isInquiryProcess && displayPrice(listingTypeConfig);\r\n\r\n    const showSendMessageForm =\r\n      !isCustomerBanned && !isCustomerDeleted && !isProviderBanned && !isProviderDeleted;\r\n\r\n    const deliveryMethod = protectedData?.deliveryMethod || 'none';\r\n\r\n    const classes = classNames(rootClassName || css.root, className);\r\n\r\n    return (\r\n      <div className={classes}>\r\n        <div className={css.container}>\r\n          <div className={css.txInfo}>\r\n            <DetailCardImage\r\n              rootClassName={css.imageWrapperMobile}\r\n              avatarWrapperClassName={css.avatarWrapperMobile}\r\n              listingTitle={listingTitle}\r\n              image={firstImage}\r\n              provider={provider}\r\n              isCustomer={isCustomer}\r\n              listingImageConfig={config.layout.listingImage}\r\n            />\r\n            {isProvider ? (\r\n              <div className={css.avatarWrapperProviderDesktop}>\r\n                <AvatarLarge user={customer} className={css.avatarDesktop} />\r\n              </div>\r\n            ) : null}\r\n\r\n            <PanelHeading\r\n              processName={stateData.processName}\r\n              processState={stateData.processState}\r\n              showExtraInfo={stateData.showExtraInfo}\r\n              showPriceOnMobile={showPrice}\r\n              price={listing?.attributes?.price}\r\n              intl={intl}\r\n              deliveryMethod={deliveryMethod}\r\n              isPendingPayment={!!stateData.isPendingPayment}\r\n              transactionRole={transactionRole}\r\n              providerName={authorDisplayName}\r\n              customerName={customerDisplayName}\r\n              isCustomerBanned={isCustomerBanned}\r\n              listingId={listing?.id?.uuid}\r\n              listingTitle={listingTitle}\r\n              listingDeleted={listingDeleted}\r\n            />\r\n\r\n            <InquiryMessageMaybe\r\n              protectedData={protectedData}\r\n              showInquiryMessage={isInquiryProcess}\r\n              isCustomer={isCustomer}\r\n            />\r\n\r\n            {!isInquiryProcess ? (\r\n              <div className={css.orderDetails}>\r\n                <div className={css.orderDetailsMobileSection}>\r\n                  <BreakdownMaybe\r\n                    orderBreakdown={orderBreakdown}\r\n                    processName={stateData.processName}\r\n                  />\r\n                  <DiminishedActionButtonMaybe\r\n                    showDispute={stateData.showDispute}\r\n                    onOpenDisputeModal={onOpenDisputeModal}\r\n                  />\r\n                </div>\r\n\r\n                {savePaymentMethodFailed ? (\r\n                  <p className={css.genericError}>\r\n                    <FormattedMessage\r\n                      id=\"TransactionPanel.savePaymentMethodFailed\"\r\n                      values={{\r\n                        paymentMethodsPageLink: (\r\n                          <NamedLink name=\"PaymentMethodsPage\">\r\n                            <FormattedMessage id=\"TransactionPanel.paymentMethodsPageLink\" />\r\n                          </NamedLink>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </p>\r\n                ) : null}\r\n                <DeliveryInfoMaybe\r\n                  className={css.deliveryInfoSection}\r\n                  protectedData={protectedData}\r\n                  listing={listing}\r\n                  locale={config.localization.locale}\r\n                />\r\n                <BookingLocationMaybe\r\n                  className={css.deliveryInfoSection}\r\n                  listing={listing}\r\n                  showBookingLocation={showBookingLocation}\r\n                />\r\n              </div>\r\n            ) : null}\r\n\r\n            <FeedSection\r\n              rootClassName={css.feedContainer}\r\n              hasMessages={messages.length > 0}\r\n              hasTransitions={hasTransitions}\r\n              fetchMessagesError={fetchMessagesError}\r\n              initialMessageFailed={initialMessageFailed}\r\n              activityFeed={activityFeed}\r\n              isConversation={isInquiryProcess}\r\n            />\r\n            {showSendMessageForm ? (\r\n              <SendMessageForm\r\n                formId={this.sendMessageFormName}\r\n                rootClassName={css.sendMessageForm}\r\n                messagePlaceholder={intl.formatMessage(\r\n                  { id: 'TransactionPanel.sendMessagePlaceholder' },\r\n                  { name: otherUserDisplayNameString }\r\n                )}\r\n                inProgress={sendMessageInProgress}\r\n                sendMessageError={sendMessageError}\r\n                onFocus={this.onSendMessageFormFocus}\r\n                onBlur={this.onSendMessageFormBlur}\r\n                onSubmit={this.onMessageSubmit}\r\n              />\r\n            ) : (\r\n              <div className={css.sendingMessageNotAllowed}>\r\n                <FormattedMessage id=\"TransactionPanel.sendingMessageNotAllowed\" />\r\n              </div>\r\n            )}\r\n\r\n            {stateData.showActionButtons ? (\r\n              <>\r\n                <div className={css.mobileActionButtonSpacer}></div>\r\n                <div className={css.mobileActionButtons}>{actionButtons}</div>\r\n              </>\r\n            ) : null}\r\n          </div>\r\n\r\n          <div className={css.asideDesktop}>\r\n            <div className={css.stickySection}>\r\n              <div className={css.detailCard}>\r\n                <DetailCardImage\r\n                  avatarWrapperClassName={css.avatarWrapperDesktop}\r\n                  listingTitle={listingTitle}\r\n                  image={firstImage}\r\n                  provider={provider}\r\n                  isCustomer={isCustomer}\r\n                  listingImageConfig={config.layout.listingImage}\r\n                />\r\n\r\n                <DetailCardHeadingsMaybe\r\n                  showDetailCardHeadings={stateData.showDetailCardHeadings}\r\n                  listingTitle={\r\n                    listingDeleted ? (\r\n                      listingTitle\r\n                    ) : (\r\n                      <NamedLink\r\n                        name=\"ListingPage\"\r\n                        params={{ id: listing.id?.uuid, slug: createSlug(listingTitle) }}\r\n                      >\r\n                        {listingTitle}\r\n                      </NamedLink>\r\n                    )\r\n                  }\r\n                  showPrice={showPrice}\r\n                  price={listing?.attributes?.price}\r\n                  intl={intl}\r\n                />\r\n                {stateData.showOrderPanel ? orderPanel : null}\r\n                <BreakdownMaybe\r\n                  className={css.breakdownContainer}\r\n                  orderBreakdown={orderBreakdown}\r\n                  processName={stateData.processName}\r\n                />\r\n\r\n                {stateData.showActionButtons ? (\r\n                  <div className={css.desktopActionButtons}>{actionButtons}</div>\r\n                ) : null}\r\n              </div>\r\n              <DiminishedActionButtonMaybe\r\n                showDispute={stateData.showDispute}\r\n                onOpenDisputeModal={onOpenDisputeModal}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTransactionPanelComponent.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  currentUser: null,\r\n  listing: null,\r\n  customer: null,\r\n  provider: null,\r\n  hasTransitions: false,\r\n  fetchMessagesError: null,\r\n  initialMessageFailed: false,\r\n  savePaymentMethodFailed: false,\r\n  sendMessageError: null,\r\n  sendReviewError: null,\r\n  stateData: {},\r\n  activityFeed: null,\r\n  showBookingLocation: false,\r\n  orderBreakdown: null,\r\n  orderPanel: null,\r\n};\r\n\r\nTransactionPanelComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n\r\n  currentUser: propTypes.currentUser,\r\n  transactionRole: oneOf(['customer', 'provider']).isRequired,\r\n  listing: propTypes.listing,\r\n  customer: propTypes.user,\r\n  provider: propTypes.user,\r\n  hasTransitions: bool,\r\n  transactionId: propTypes.uuid.isRequired,\r\n  messages: arrayOf(propTypes.message).isRequired,\r\n  initialMessageFailed: bool,\r\n  savePaymentMethodFailed: bool,\r\n  fetchMessagesError: propTypes.error,\r\n  sendMessageInProgress: bool.isRequired,\r\n  sendMessageError: propTypes.error,\r\n  onOpenDisputeModal: func.isRequired,\r\n  onSendMessage: func.isRequired,\r\n  stateData: stateDataShape,\r\n  showBookingLocation: bool,\r\n  activityFeed: node,\r\n  orderBreakdown: node,\r\n  orderPanel: node,\r\n  config: object.isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape,\r\n};\r\n\r\nconst TransactionPanel = injectIntl(TransactionPanelComponent);\r\n\r\nexport default TransactionPanel;\r\n","export const isMobileSafari = () => {\r\n  if (!window) {\r\n    return false;\r\n  }\r\n\r\n  // https://stackoverflow.com/a/29696509\r\n  const ua = window.navigator.userAgent;\r\n  const iOS = !!ua.match(/iPad/i) || !!ua.match(/iPhone/i);\r\n  const webkit = !!ua.match(/WebKit/i);\r\n\r\n  // If iOS Chrome needs to be separated, use `!ua.match(/CriOS/i)` as\r\n  // an extra condition.\r\n  return iOS && webkit;\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TransactionPage_root__pFunE\",\"loading\":\"TransactionPage_loading__wApW9\",\"error\":\"TransactionPage_error__z8nzA TransactionPage_loading__wApW9\",\"tabContent\":\"TransactionPage_tabContent__vhSQp\",\"tabContentVisible\":\"TransactionPage_tabContentVisible__UWgq+\",\"footer\":\"TransactionPage_footer__EoOc7\",\"breakdown\":\"TransactionPage_breakdown__21PAc\",\"orderPanel\":\"TransactionPage_orderPanel__JuHgu\",\"orderTitle\":\"TransactionPage_orderTitle__3FPJd\",\"orderPanelTitle\":\"TransactionPage_orderPanelTitle__LWkWH\"};","import React, { useState } from 'react';\r\nimport { array, arrayOf, bool, func, number, object, oneOf, shape, string } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\nimport { useConfiguration } from '../../context/configurationContext';\r\nimport { useRouteConfiguration } from '../../context/routeConfigurationContext';\r\nimport { FormattedMessage, intlShape, injectIntl } from '../../util/reactIntl';\r\nimport { createResourceLocatorString, findRouteByRouteName } from '../../util/routes';\r\nimport {\r\n  DATE_TYPE_DATE,\r\n  DATE_TYPE_DATETIME,\r\n  LISTING_UNIT_TYPES,\r\n  LINE_ITEM_HOUR,\r\n  LINE_ITEM_ITEM,\r\n  propTypes,\r\n} from '../../util/types';\r\nimport { timestampToDate } from '../../util/dates';\r\nimport { createSlug } from '../../util/urlHelpers';\r\nimport {\r\n  INQUIRY_PROCESS_NAME,\r\n  TX_TRANSITION_ACTOR_CUSTOMER as CUSTOMER,\r\n  TX_TRANSITION_ACTOR_PROVIDER as PROVIDER,\r\n  resolveLatestProcessName,\r\n  getProcess,\r\n  isBookingProcess,\r\n} from '../../transactions/transaction';\r\n\r\nimport { getMarketplaceEntities } from '../../ducks/marketplaceData.duck';\r\nimport { isScrollingDisabled, manageDisableScrolling } from '../../ducks/ui.duck';\r\nimport { initializeCardPaymentData } from '../../ducks/stripe.duck.js';\r\n\r\nimport {\r\n  H4,\r\n  IconSpinner,\r\n  NamedLink,\r\n  NamedRedirect,\r\n  Page,\r\n  UserDisplayName,\r\n  OrderBreakdown,\r\n  OrderPanel,\r\n  LayoutSingleColumn,\r\n} from '../../components';\r\n\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\nimport FooterContainer from '../../containers/FooterContainer/FooterContainer';\r\n\r\nimport { getStateData } from './TransactionPage.stateData';\r\nimport ActivityFeed from './ActivityFeed/ActivityFeed';\r\nimport DisputeModal from './DisputeModal/DisputeModal';\r\nimport ReviewModal from './ReviewModal/ReviewModal';\r\nimport TransactionPanel from './TransactionPanel/TransactionPanel';\r\n\r\nimport {\r\n  makeTransition,\r\n  sendMessage,\r\n  sendReview,\r\n  fetchMoreMessages,\r\n  fetchTimeSlots,\r\n  fetchTransactionLineItems,\r\n} from './TransactionPage.duck';\r\nimport css from './TransactionPage.module.css';\r\n\r\n// Submit dispute and close the review modal\r\nconst onDisputeOrder = (\r\n  currentTransactionId,\r\n  transitionName,\r\n  onTransition,\r\n  setDisputeSubmitted\r\n) => values => {\r\n  const { disputeReason } = values;\r\n  const params = disputeReason ? { protectedData: { disputeReason } } : {};\r\n  onTransition(currentTransactionId, transitionName, params)\r\n    .then(r => {\r\n      return setDisputeSubmitted(true);\r\n    })\r\n    .catch(e => {\r\n      // Do nothing.\r\n    });\r\n};\r\n\r\n// TransactionPage handles data loading for Sale and Order views to transaction pages in Inbox.\r\nexport const TransactionPageComponent = props => {\r\n  const [isDisputeModalOpen, setDisputeModalOpen] = useState(false);\r\n  const [disputeSubmitted, setDisputeSubmitted] = useState(false);\r\n  const [isReviewModalOpen, setReviewModalOpen] = useState(false);\r\n  const [reviewSubmitted, setReviewSubmitted] = useState(false);\r\n\r\n  const config = useConfiguration();\r\n  const routeConfiguration = useRouteConfiguration();\r\n  const {\r\n    currentUser,\r\n    initialMessageFailedToTransaction,\r\n    savePaymentMethodFailed,\r\n    fetchMessagesError,\r\n    fetchMessagesInProgress,\r\n    totalMessagePages,\r\n    oldestMessagePageFetched,\r\n    fetchTransactionError,\r\n    history,\r\n    intl,\r\n    messages,\r\n    onManageDisableScrolling,\r\n    onSendMessage,\r\n    onSendReview,\r\n    onShowMoreMessages,\r\n    params,\r\n    scrollingDisabled,\r\n    sendMessageError,\r\n    sendMessageInProgress,\r\n    sendReviewError,\r\n    sendReviewInProgress,\r\n    transaction,\r\n    transactionRole,\r\n    transitionInProgress,\r\n    transitionError,\r\n    onTransition,\r\n    monthlyTimeSlots,\r\n    onFetchTimeSlots,\r\n    nextTransitions,\r\n    callSetInitialValues,\r\n    onInitializeCardPaymentData,\r\n    onFetchTransactionLineItems,\r\n    lineItems,\r\n    fetchLineItemsInProgress,\r\n    fetchLineItemsError,\r\n  } = props;\r\n\r\n  const { listing, provider, customer, booking } = transaction || {};\r\n  const txTransitions = transaction?.attributes?.transitions || [];\r\n  const isProviderRole = transactionRole === PROVIDER;\r\n  const isCustomerRole = transactionRole === CUSTOMER;\r\n\r\n  const processName = resolveLatestProcessName(transaction?.attributes?.processName);\r\n  let process = null;\r\n  try {\r\n    process = processName ? getProcess(processName) : null;\r\n  } catch (error) {\r\n    // Process was not recognized!\r\n  }\r\n\r\n  const isTxOnPaymentPending = tx => {\r\n    return process ? process.getState(tx) === process.states.PENDING_PAYMENT : null;\r\n  };\r\n\r\n  const redirectToCheckoutPageWithInitialValues = (initialValues, currentListing) => {\r\n    // Customize checkout page state with current listing and selected bookingDates\r\n    const { setInitialValues } = findRouteByRouteName('CheckoutPage', routeConfiguration);\r\n    callSetInitialValues(setInitialValues, initialValues);\r\n\r\n    // Clear previous Stripe errors from store if there is any\r\n    onInitializeCardPaymentData();\r\n\r\n    // Redirect to CheckoutPage\r\n    history.push(\r\n      createResourceLocatorString(\r\n        'CheckoutPage',\r\n        routeConfiguration,\r\n        { id: currentListing.id.uuid, slug: createSlug(currentListing.attributes.title) },\r\n        {}\r\n      )\r\n    );\r\n  };\r\n\r\n  // If payment is pending, redirect to CheckoutPage\r\n  if (\r\n    transaction?.id &&\r\n    isTxOnPaymentPending(transaction) &&\r\n    isCustomerRole &&\r\n    transaction.attributes.lineItems\r\n  ) {\r\n    // Note: we don't need to pass orderData since those are already saved to transaction.\r\n    //       However, we could do that by extracting the values from transaction entity.\r\n    //\r\n    // const bookingMaybe = booking?.id ? { bookingDates: { bookingStart: booking?.attributes?.start, bookingEnd: booking?.attributes?.end } } : {};\r\n    // const purchaseLineItem = transaction.attributes.lineItems.find(item => item.code === LINE_ITEM_ITEM);\r\n    // const quantity = purchaseLineItem?.quantity?.toNumber();\r\n    // const quantityMaybe = quantity ? { quantity } : {};\r\n\r\n    const initialValues = {\r\n      listing,\r\n      // Transaction with payment pending should be passed to CheckoutPage\r\n      transaction,\r\n      // Original orderData content is not available,\r\n      // but it is already saved since tx is in state: payment-pending.\r\n      orderData: {},\r\n    };\r\n\r\n    redirectToCheckoutPageWithInitialValues(initialValues, listing);\r\n  }\r\n\r\n  // Customer can create a booking, if the tx is in \"inquiry\" state.\r\n  const handleSubmitOrderRequest = values => {\r\n    const {\r\n      bookingDates,\r\n      bookingStartTime,\r\n      bookingEndTime,\r\n      quantity: quantityRaw,\r\n      deliveryMethod,\r\n      ...otherOrderData\r\n    } = values;\r\n\r\n    const bookingMaybe = bookingDates\r\n      ? {\r\n          bookingDates: {\r\n            bookingStart: bookingDates.startDate,\r\n            bookingEnd: bookingDates.endDate,\r\n          },\r\n        }\r\n      : bookingStartTime && bookingEndTime\r\n      ? {\r\n          bookingDates: {\r\n            bookingStart: timestampToDate(bookingStartTime),\r\n            bookingEnd: timestampToDate(bookingEndTime),\r\n          },\r\n        }\r\n      : {};\r\n\r\n    const quantity = Number.parseInt(quantityRaw, 10);\r\n    const quantityMaybe = Number.isInteger(quantity) ? { quantity } : {};\r\n    const deliveryMethodMaybe = deliveryMethod ? { deliveryMethod } : {};\r\n\r\n    const initialValues = {\r\n      listing,\r\n      // inquired transaction should be passed to CheckoutPage\r\n      transaction,\r\n      orderData: {\r\n        ...bookingMaybe,\r\n        ...quantityMaybe,\r\n        ...deliveryMethodMaybe,\r\n        ...otherOrderData,\r\n      },\r\n      confirmPaymentError: null,\r\n    };\r\n\r\n    redirectToCheckoutPageWithInitialValues(initialValues, listing);\r\n  };\r\n\r\n  // Open review modal\r\n  // This is called from ActivityFeed and from action buttons\r\n  const onOpenReviewModal = () => {\r\n    setReviewModalOpen(true);\r\n  };\r\n\r\n  // Submit review and close the review modal\r\n  const onSubmitReview = values => {\r\n    const { reviewRating, reviewContent } = values;\r\n    const rating = Number.parseInt(reviewRating, 10);\r\n    const { states, transitions } = process;\r\n    const transitionOptions =\r\n      transactionRole === CUSTOMER\r\n        ? {\r\n            reviewAsFirst: transitions.REVIEW_1_BY_CUSTOMER,\r\n            reviewAsSecond: transitions.REVIEW_2_BY_CUSTOMER,\r\n            hasOtherPartyReviewedFirst: process\r\n              .getTransitionsToStates([states.REVIEWED_BY_PROVIDER])\r\n              .includes(transaction.attributes.lastTransition),\r\n          }\r\n        : {\r\n            reviewAsFirst: transitions.REVIEW_1_BY_PROVIDER,\r\n            reviewAsSecond: transitions.REVIEW_2_BY_PROVIDER,\r\n            hasOtherPartyReviewedFirst: process\r\n              .getTransitionsToStates([states.REVIEWED_BY_CUSTOMER])\r\n              .includes(transaction.attributes.lastTransition),\r\n          };\r\n    const params = { reviewRating: rating, reviewContent };\r\n\r\n    onSendReview(transaction, transitionOptions, params, config)\r\n      .then(r => {\r\n        setReviewModalOpen(false);\r\n        setReviewSubmitted(true);\r\n      })\r\n      .catch(e => {\r\n        // Do nothing.\r\n      });\r\n  };\r\n\r\n  // Open dispute modal\r\n  const onOpenDisputeModal = () => {\r\n    setDisputeModalOpen(true);\r\n  };\r\n\r\n  const deletedListingTitle = intl.formatMessage({\r\n    id: 'TransactionPage.deletedListing',\r\n  });\r\n  const listingDeleted = listing?.attributes?.deleted;\r\n  const listingTitle = listingDeleted ? deletedListingTitle : listing?.attributes?.title;\r\n\r\n  // Redirect users with someone else's direct link to their own inbox/sales or inbox/orders page.\r\n  const isDataAvailable =\r\n    process &&\r\n    currentUser &&\r\n    transaction?.id &&\r\n    transaction?.id?.uuid === params.id &&\r\n    transaction?.attributes?.lineItems &&\r\n    transaction.customer &&\r\n    transaction.provider &&\r\n    !fetchTransactionError;\r\n\r\n  const isOwnSale = isDataAvailable && isProviderRole && currentUser.id.uuid === provider?.id?.uuid;\r\n  const isOwnOrder =\r\n    isDataAvailable && isCustomerRole && currentUser.id.uuid === customer?.id?.uuid;\r\n\r\n  if (isDataAvailable && isProviderRole && !isOwnSale) {\r\n    // eslint-disable-next-line no-console\r\n    console.error('Tried to access a sale that was not owned by the current user');\r\n    return <NamedRedirect name=\"InboxPage\" params={{ tab: 'sales' }} />;\r\n  } else if (isDataAvailable && isCustomerRole && !isOwnOrder) {\r\n    // eslint-disable-next-line no-console\r\n    console.error('Tried to access an order that was not owned by the current user');\r\n    return <NamedRedirect name=\"InboxPage\" params={{ tab: 'orders' }} />;\r\n  }\r\n\r\n  const detailsClassName = classNames(css.tabContent, css.tabContentVisible);\r\n\r\n  const fetchErrorMessage = isCustomerRole\r\n    ? 'TransactionPage.fetchOrderFailed'\r\n    : 'TransactionPage.fetchSaleFailed';\r\n  const loadingMessage = isCustomerRole\r\n    ? 'TransactionPage.loadingOrderData'\r\n    : 'TransactionPage.loadingSaleData';\r\n\r\n  const loadingOrFailedFetching = fetchTransactionError ? (\r\n    <p className={css.error}>\r\n      <FormattedMessage id={`${fetchErrorMessage}`} />\r\n    </p>\r\n  ) : transaction && !process ? (\r\n    <div className={css.error}>\r\n      <FormattedMessage id=\"TransactionPage.unknownTransactionProcess\" />\r\n    </div>\r\n  ) : (\r\n    <div className={css.loading}>\r\n      <FormattedMessage id={`${loadingMessage}`} />\r\n      <IconSpinner />\r\n    </div>\r\n  );\r\n\r\n  const initialMessageFailed = !!(\r\n    initialMessageFailedToTransaction &&\r\n    initialMessageFailedToTransaction.uuid === transaction?.id?.uuid\r\n  );\r\n\r\n  const otherUserDisplayName = isOwnOrder ? (\r\n    <UserDisplayName user={provider} intl={intl} />\r\n  ) : (\r\n    <UserDisplayName user={customer} intl={intl} />\r\n  );\r\n\r\n  const stateData = isDataAvailable\r\n    ? getStateData(\r\n        {\r\n          transaction,\r\n          transactionRole,\r\n          nextTransitions,\r\n          transitionInProgress,\r\n          transitionError,\r\n          sendReviewInProgress,\r\n          sendReviewError,\r\n          onTransition,\r\n          onOpenReviewModal,\r\n          intl,\r\n        },\r\n        process\r\n      )\r\n    : {};\r\n\r\n  const hasLineItems = transaction?.attributes?.lineItems?.length > 0;\r\n  const unitLineItem = hasLineItems\r\n    ? transaction.attributes?.lineItems?.find(\r\n        item => LISTING_UNIT_TYPES.includes(item.code) && !item.reversal\r\n      )\r\n    : null;\r\n\r\n  const formatLineItemUnitType = (transaction, listing) => {\r\n    // unitType should always be saved to transaction's protected data\r\n    const unitTypeInProtectedData = transaction?.attributes?.protectedData?.unitType;\r\n    // If unitType is not found (old or mutated data), we check listing's publicData\r\n    // Note: this might have changed over time\r\n    const unitTypeInListingPublicData = listing?.attributes?.publicData?.unitType;\r\n    return `line-item/${unitTypeInProtectedData || unitTypeInListingPublicData}`;\r\n  };\r\n\r\n  const lineItemUnitType = unitLineItem\r\n    ? unitLineItem.code\r\n    : isDataAvailable\r\n    ? formatLineItemUnitType(transaction, listing)\r\n    : null;\r\n\r\n  const timeZone = listing?.attributes?.availabilityPlan?.timezone;\r\n  const dateType = lineItemUnitType === LINE_ITEM_HOUR ? DATE_TYPE_DATETIME : DATE_TYPE_DATE;\r\n\r\n  const txBookingMaybe = booking?.id ? { booking, dateType, timeZone } : {};\r\n  const orderBreakdownMaybe = hasLineItems\r\n    ? {\r\n        orderBreakdown: (\r\n          <OrderBreakdown\r\n            className={css.breakdown}\r\n            userRole={transactionRole}\r\n            transaction={transaction}\r\n            {...txBookingMaybe}\r\n            currency={config.currency}\r\n            marketplaceName={config.marketplaceName}\r\n          />\r\n        ),\r\n      }\r\n    : {};\r\n\r\n  // The location of the booking can be shown if fuzzy location\r\n  const showBookingLocation =\r\n    isBookingProcess(stateData.processName) &&\r\n    process?.hasPassedState(process?.states?.ACCEPTED, transaction);\r\n\r\n  // TransactionPanel is presentational component\r\n  // that currently handles showing everything inside layout's main view area.\r\n  const panel = isDataAvailable ? (\r\n    <TransactionPanel\r\n      className={detailsClassName}\r\n      currentUser={currentUser}\r\n      transactionId={transaction?.id}\r\n      listing={listing}\r\n      customer={customer}\r\n      provider={provider}\r\n      hasTransitions={txTransitions.length > 0}\r\n      protectedData={transaction?.attributes?.protectedData}\r\n      messages={messages}\r\n      initialMessageFailed={initialMessageFailed}\r\n      savePaymentMethodFailed={savePaymentMethodFailed}\r\n      fetchMessagesError={fetchMessagesError}\r\n      sendMessageInProgress={sendMessageInProgress}\r\n      sendMessageError={sendMessageError}\r\n      onSendMessage={onSendMessage}\r\n      onOpenDisputeModal={onOpenDisputeModal}\r\n      stateData={stateData}\r\n      transactionRole={transactionRole}\r\n      showBookingLocation={showBookingLocation}\r\n      activityFeed={\r\n        <ActivityFeed\r\n          messages={messages}\r\n          transaction={transaction}\r\n          stateData={stateData}\r\n          intl={intl}\r\n          currentUser={currentUser}\r\n          hasOlderMessages={\r\n            totalMessagePages > oldestMessagePageFetched && !fetchMessagesInProgress\r\n          }\r\n          onOpenReviewModal={onOpenReviewModal}\r\n          onShowOlderMessages={() => onShowMoreMessages(transaction.id, config)}\r\n          fetchMessagesInProgress={fetchMessagesInProgress}\r\n        />\r\n      }\r\n      isInquiryProcess={processName === INQUIRY_PROCESS_NAME}\r\n      config={config}\r\n      {...orderBreakdownMaybe}\r\n      orderPanel={\r\n        <OrderPanel\r\n          className={css.orderPanel}\r\n          titleClassName={css.orderTitle}\r\n          listing={listing}\r\n          isOwnListing={isOwnSale}\r\n          lineItemUnitType={lineItemUnitType}\r\n          title={listingTitle}\r\n          titleDesktop={\r\n            <H4 as=\"h2\" className={css.orderPanelTitle}>\r\n              {listingDeleted ? (\r\n                listingTitle\r\n              ) : (\r\n                <NamedLink\r\n                  name=\"ListingPage\"\r\n                  params={{ id: listing.id?.uuid, slug: createSlug(listingTitle) }}\r\n                >\r\n                  {listingTitle}\r\n                </NamedLink>\r\n              )}\r\n            </H4>\r\n          }\r\n          author={provider}\r\n          onSubmit={handleSubmitOrderRequest}\r\n          onManageDisableScrolling={onManageDisableScrolling}\r\n          onFetchTimeSlots={onFetchTimeSlots}\r\n          monthlyTimeSlots={monthlyTimeSlots}\r\n          onFetchTransactionLineItems={onFetchTransactionLineItems}\r\n          lineItems={lineItems}\r\n          fetchLineItemsInProgress={fetchLineItemsInProgress}\r\n          fetchLineItemsError={fetchLineItemsError}\r\n          validListingTypes={config.listing.listingTypes}\r\n          marketplaceCurrency={config.currency}\r\n          dayCountAvailableForBooking={config.stripe.dayCountAvailableForBooking}\r\n          marketplaceName={config.marketplaceName}\r\n        />\r\n      }\r\n    />\r\n  ) : (\r\n    loadingOrFailedFetching\r\n  );\r\n\r\n  return (\r\n    <Page\r\n      title={intl.formatMessage({ id: 'TransactionPage.schemaTitle' }, { title: listingTitle })}\r\n      scrollingDisabled={scrollingDisabled}\r\n    >\r\n      <LayoutSingleColumn topbar={<TopbarContainer />} footer={<FooterContainer />}>\r\n        <div className={css.root}>{panel}</div>\r\n        <ReviewModal\r\n          id=\"ReviewOrderModal\"\r\n          isOpen={isReviewModalOpen}\r\n          onCloseModal={() => setReviewModalOpen(false)}\r\n          onManageDisableScrolling={onManageDisableScrolling}\r\n          onSubmitReview={onSubmitReview}\r\n          revieweeName={otherUserDisplayName}\r\n          reviewSent={reviewSubmitted}\r\n          sendReviewInProgress={sendReviewInProgress}\r\n          sendReviewError={sendReviewError}\r\n          marketplaceName={config.marketplaceName}\r\n        />\r\n        {process?.transitions?.DISPUTE ? (\r\n          <DisputeModal\r\n            id=\"DisputeOrderModal\"\r\n            isOpen={isDisputeModalOpen}\r\n            onCloseModal={() => setDisputeModalOpen(false)}\r\n            onManageDisableScrolling={onManageDisableScrolling}\r\n            onDisputeOrder={onDisputeOrder(\r\n              transaction?.id,\r\n              process.transitions.DISPUTE,\r\n              onTransition,\r\n              setDisputeSubmitted\r\n            )}\r\n            disputeSubmitted={disputeSubmitted}\r\n            disputeInProgress={transitionInProgress === process.transitions.DISPUTE}\r\n            disputeError={transitionError}\r\n          />\r\n        ) : null}\r\n      </LayoutSingleColumn>\r\n    </Page>\r\n  );\r\n};\r\n\r\nTransactionPageComponent.defaultProps = {\r\n  currentUser: null,\r\n  fetchTransactionError: null,\r\n  transitionInProgress: null,\r\n  transitionError: null,\r\n  transaction: null,\r\n  fetchMessagesError: null,\r\n  initialMessageFailedToTransaction: null,\r\n  savePaymentMethodFailed: false,\r\n  sendMessageError: null,\r\n  monthlyTimeSlots: null,\r\n  fetchTimeSlotsError: null,\r\n  lineItems: null,\r\n  fetchLineItemsError: null,\r\n};\r\n\r\nTransactionPageComponent.propTypes = {\r\n  params: shape({ id: string }).isRequired,\r\n  transactionRole: oneOf([PROVIDER, CUSTOMER]).isRequired,\r\n  currentUser: propTypes.currentUser,\r\n  fetchTransactionError: propTypes.error,\r\n  transitionInProgress: string,\r\n  transitionError: propTypes.error,\r\n  onTransition: func.isRequired,\r\n  scrollingDisabled: bool.isRequired,\r\n  transaction: propTypes.transaction,\r\n  fetchMessagesError: propTypes.error,\r\n  totalMessagePages: number.isRequired,\r\n  oldestMessagePageFetched: number.isRequired,\r\n  messages: arrayOf(propTypes.message).isRequired,\r\n  initialMessageFailedToTransaction: propTypes.uuid,\r\n  savePaymentMethodFailed: bool,\r\n  sendMessageInProgress: bool.isRequired,\r\n  sendMessageError: propTypes.error,\r\n  onShowMoreMessages: func.isRequired,\r\n  onSendMessage: func.isRequired,\r\n  onFetchTimeSlots: func.isRequired,\r\n  monthlyTimeSlots: object,\r\n  // monthlyTimeSlots could be something like:\r\n  // monthlyTimeSlots: {\r\n  //   '2019-11': {\r\n  //     timeSlots: [],\r\n  //     fetchTimeSlotsInProgress: false,\r\n  //     fetchTimeSlotsError: null,\r\n  //   }\r\n  // }\r\n  callSetInitialValues: func.isRequired,\r\n  onInitializeCardPaymentData: func.isRequired,\r\n  onFetchTransactionLineItems: func.isRequired,\r\n\r\n  // line items\r\n  lineItems: array,\r\n  fetchLineItemsInProgress: bool.isRequired,\r\n  fetchLineItemsError: propTypes.error,\r\n\r\n  // from withRouter\r\n  history: shape({\r\n    push: func.isRequired,\r\n  }).isRequired,\r\n  location: shape({\r\n    search: string,\r\n  }).isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const {\r\n    fetchTransactionError,\r\n    transitionInProgress,\r\n    transitionError,\r\n    transactionRef,\r\n    fetchMessagesInProgress,\r\n    fetchMessagesError,\r\n    totalMessagePages,\r\n    oldestMessagePageFetched,\r\n    messages,\r\n    initialMessageFailedToTransaction,\r\n    savePaymentMethodFailed,\r\n    sendMessageInProgress,\r\n    sendMessageError,\r\n    sendReviewInProgress,\r\n    sendReviewError,\r\n    monthlyTimeSlots,\r\n    processTransitions,\r\n    lineItems,\r\n    fetchLineItemsInProgress,\r\n    fetchLineItemsError,\r\n  } = state.TransactionPage;\r\n  const { currentUser } = state.user;\r\n\r\n  const transactions = getMarketplaceEntities(state, transactionRef ? [transactionRef] : []);\r\n  const transaction = transactions.length > 0 ? transactions[0] : null;\r\n\r\n  return {\r\n    currentUser,\r\n    fetchTransactionError,\r\n    transitionInProgress,\r\n    transitionError,\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n    transaction,\r\n    fetchMessagesInProgress,\r\n    fetchMessagesError,\r\n    totalMessagePages,\r\n    oldestMessagePageFetched,\r\n    messages,\r\n    initialMessageFailedToTransaction,\r\n    savePaymentMethodFailed,\r\n    sendMessageInProgress,\r\n    sendMessageError,\r\n    sendReviewInProgress,\r\n    sendReviewError,\r\n    monthlyTimeSlots,\r\n    nextTransitions: processTransitions,\r\n    lineItems,\r\n    fetchLineItemsInProgress,\r\n    fetchLineItemsError,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onTransition: (txId, transitionName, params) =>\r\n      dispatch(makeTransition(txId, transitionName, params)),\r\n    onShowMoreMessages: (txId, config) => dispatch(fetchMoreMessages(txId, config)),\r\n    onSendMessage: (txId, message, config) => dispatch(sendMessage(txId, message, config)),\r\n    onManageDisableScrolling: (componentId, disableScrolling) =>\r\n      dispatch(manageDisableScrolling(componentId, disableScrolling)),\r\n    onSendReview: (tx, transitionOptions, params, config) =>\r\n      dispatch(sendReview(tx, transitionOptions, params, config)),\r\n    callSetInitialValues: (setInitialValues, values) => dispatch(setInitialValues(values)),\r\n    onInitializeCardPaymentData: () => dispatch(initializeCardPaymentData()),\r\n    onFetchTransactionLineItems: (orderData, listingId, isOwnListing) =>\r\n      dispatch(fetchTransactionLineItems(orderData, listingId, isOwnListing)),\r\n    onFetchTimeSlots: (listingId, start, end, timeZone) =>\r\n      dispatch(fetchTimeSlots(listingId, start, end, timeZone)),\r\n  };\r\n};\r\n\r\nconst TransactionPage = compose(\r\n  withRouter,\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  ),\r\n  injectIntl\r\n)(TransactionPageComponent);\r\n\r\nexport default TransactionPage;\r\n"],"names":["DisputeForm","props","React","FinalForm","Object","assign","render","fieldRenderProps","className","rootClassName","disabled","handleSubmit","intl","formId","invalid","disputeSubmitted","disputeError","disputeInProgress","errorMessageMaybe","FormattedMessage","id","classes","classNames","css","submitDisabled","Form","onSubmit","FieldTextInput","type","concat","name","label","formatMessage","placeholder","validate","required","PrimaryButton","inProgress","ready","DisputeInfo","marketplaceName","useConfiguration","values","onDisputeOrder","DisputeSentInfo","DisputeModal","isOpen","onCloseModal","onManageDisableScrolling","Modal","containerClassName","contentClassName","onClose","usePortal","closeButtonMessage","IconDisputeOrder","defaultProps","injectIntl","ReviewModal","onSubmitReview","revieweeName","reviewSent","sendReviewInProgress","sendReviewError","reviewee","IconReviewUser","ReviewForm","bool","string","PropTypes","orderBreakdown","processName","breakdownMaybe","H6","as","orderBreakdownTitle","totalDivider","showDetailCardHeadings","listingTitle","subTitle","showPrice","price","detailCardHeadings","H4","detailCardTitle","inquiryPrice","formatMoney","detailCardSubtitle","_image$attributes","avatarWrapperClassName","image","provider","isCustomer","listingImageConfig","detailCardImageWrapper","aspectWidth","aspectHeight","variantPrefix","variants","keys","attributes","filter","k","startsWith","AspectRatioWrapper","width","height","ResponsiveImage","rootForImage","alt","avatarWrapper","AvatarMedium","user","linkRootClassName","location","geolocation","showAddress","address","building","lat","lng","hrefToGoogleMaps","encodeURIComponent","fullAddress","length","viewOnGoogleMapsWrapper","ExternalLink","href","protectedData","listing","locale","deliveryInfoContainer","deliveryMethod","isShipping","_listing$attributes","_listing$attributes$p","_listing$attributes2","pickupLocation","publicData","Heading","sectionHeading","pickupInfoContent","AddressLinkMaybe","pickupAddress","phoneNumber","shippingDetails","line1","line2","city","postalCode","state","country","countryCode","phoneMaybe","countryInfo","getCountryCodes","find","c","code","shippingInfoContent","showBookingLocation","bookingLocationContainer","bookingLocationContent","bookingLocationAddress","showInquiryMessage","inquiryMsgClasses","ownInquiryMessage","inquiryMessage","activityFeed","hasTransitions","fetchMessagesError","initialMessageFailed","hasMessages","isConversation","showFeed","feedContainer","messageError","feedContent","showButtons","primaryButtonProps","secondaryButtonProps","isListingDeleted","isProvider","buttonsDisabled","primaryButton","onClick","onAction","buttonText","primaryErrorMessage","error","actionError","errorText","secondaryButton","SecondaryButton","secondaryErrorMessage","actionButtons","actionErrors","actionButtonWrapper","showDispute","onOpenDisputeModal","diminishedActionButton","InlineTextButton","diminishedActionButtonRoot","TransactionPanelComponent","Component","constructor","super","this","sendMessageFormFocused","isMobSaf","sendMessageFormName","onSendMessageFormFocus","bind","onSendMessageFormBlur","onMessageSubmit","scrollToMessage","componentDidMount","isMobileSafari","window","ua","navigator","userAgent","iOS","match","webkit","setState","scroll","top","document","body","scrollHeight","left","behavior","form","message","trim","transactionId","onSendMessage","config","then","messageId","reset","catch","e","selector","uuid","el","querySelector","scrollIntoView","block","_customer$attributes","_customer$attributes2","_provider$attributes","_provider$attributes2","_listing$images","_listing$attributes3","_listing$attributes3$","_listing$attributes4","_listing$id","_listing$id2","_listing$attributes5","currentUser","transactionRole","customer","messages","savePaymentMethodFailed","sendMessageInProgress","sendMessageError","stateData","isInquiryProcess","orderPanel","listingDeleted","deleted","isCustomerBanned","banned","isCustomerDeleted","isProviderBanned","isProviderDeleted","authorDisplayName","customerDisplayName","otherUserDisplayNameString","displayNames","_customer$id","_provider$id","UserDisplayName","otherUserDisplayName","currentUserIsCustomer","currentUserIsProvider","userDisplayNameAsString","deletedListingTitle","title","firstImage","images","ActionButtonsMaybe","showActionButtons","listingType","listingTypeConfig","listingTypes","conf","displayPrice","showSendMessageForm","root","container","txInfo","DetailCardImage","imageWrapperMobile","avatarWrapperMobile","layout","listingImage","avatarWrapperProviderDesktop","AvatarLarge","avatarDesktop","PanelHeading","processState","showExtraInfo","showPriceOnMobile","isPendingPayment","providerName","customerName","listingId","InquiryMessageMaybe","orderDetails","orderDetailsMobileSection","BreakdownMaybe","DiminishedActionButtonMaybe","genericError","paymentMethodsPageLink","NamedLink","DeliveryInfoMaybe","deliveryInfoSection","localization","BookingLocationMaybe","FeedSection","SendMessageForm","sendMessageForm","messagePlaceholder","onFocus","onBlur","sendingMessageNotAllowed","mobileActionButtonSpacer","mobileActionButtons","asideDesktop","stickySection","detailCard","avatarWrapperDesktop","DetailCardHeadingsMaybe","params","slug","createSlug","showOrderPanel","breakdownContainer","desktopActionButtons","currentTransactionId","transitionName","onTransition","setDisputeSubmitted","disputeReason","r","TransactionPageComponent","_transaction$attribut","_transaction$attribut2","_transaction$id","_transaction$attribut3","_transaction$id2","_transaction$attribut4","_transaction$attribut5","_transaction$attribut6","_transaction$attribut7","_listing$attributes4$","_process","_process2","_process2$states","_transaction$attribut10","_process3","_process3$transitions","isDisputeModalOpen","setDisputeModalOpen","useState","isReviewModalOpen","setReviewModalOpen","reviewSubmitted","setReviewSubmitted","routeConfiguration","useRouteConfiguration","initialMessageFailedToTransaction","fetchMessagesInProgress","totalMessagePages","oldestMessagePageFetched","fetchTransactionError","history","onSendReview","onShowMoreMessages","scrollingDisabled","transaction","transitionInProgress","transitionError","monthlyTimeSlots","onFetchTimeSlots","nextTransitions","callSetInitialValues","onInitializeCardPaymentData","onFetchTransactionLineItems","lineItems","fetchLineItemsInProgress","fetchLineItemsError","booking","txTransitions","transitions","isProviderRole","PROVIDER","isCustomerRole","CUSTOMER","resolveLatestProcessName","process","getProcess","redirectToCheckoutPageWithInitialValues","initialValues","currentListing","setInitialValues","findRouteByRouteName","push","createResourceLocatorString","tx","getState","states","PENDING_PAYMENT","orderData","onOpenReviewModal","isDataAvailable","isOwnSale","isOwnOrder","console","NamedRedirect","tab","detailsClassName","fetchErrorMessage","loadingMessage","loadingOrFailedFetching","IconSpinner","getStateData","hasLineItems","unitLineItem","item","LISTING_UNIT_TYPES","includes","reversal","lineItemUnitType","formatLineItemUnitType","_transaction$attribut8","_transaction$attribut9","unitTypeInProtectedData","unitType","unitTypeInListingPublicData","timeZone","availabilityPlan","timezone","dateType","LINE_ITEM_HOUR","DATE_TYPE_DATETIME","DATE_TYPE_DATE","txBookingMaybe","orderBreakdownMaybe","OrderBreakdown","userRole","currency","isBookingProcess","hasPassedState","ACCEPTED","panel","TransactionPanel","ActivityFeed","hasOlderMessages","onShowOlderMessages","INQUIRY_PROCESS_NAME","OrderPanel","titleClassName","isOwnListing","titleDesktop","author","bookingDates","bookingStartTime","bookingEndTime","quantity","quantityRaw","otherOrderData","bookingMaybe","bookingStart","startDate","bookingEnd","endDate","timestampToDate","Number","parseInt","quantityMaybe","isInteger","confirmPaymentError","validListingTypes","marketplaceCurrency","dayCountAvailableForBooking","stripe","Page","LayoutSingleColumn","topbar","TopbarContainer","footer","FooterContainer","reviewRating","reviewContent","rating","transitionOptions","reviewAsFirst","REVIEW_1_BY_CUSTOMER","reviewAsSecond","REVIEW_2_BY_CUSTOMER","hasOtherPartyReviewedFirst","getTransitionsToStates","REVIEWED_BY_PROVIDER","lastTransition","REVIEW_1_BY_PROVIDER","REVIEW_2_BY_PROVIDER","REVIEWED_BY_CUSTOMER","DISPUTE","fetchTimeSlotsError","compose","withRouter","connect","transactionRef","processTransitions","TransactionPage","transactions","getMarketplaceEntities","isScrollingDisabled","dispatch","txId","makeTransition","fetchMoreMessages","sendMessage","componentId","disableScrolling","manageDisableScrolling","sendReview","initializeCardPaymentData","fetchTransactionLineItems","start","end","fetchTimeSlots"],"sourceRoot":""}