{"version":3,"file":"PasswordRecoveryPage.657037ee.chunk.js","mappings":"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","sources":["webpack://app/./src/containers/PasswordRecoveryPage/PasswordRecoveryForm/PasswordRecoveryForm.module.css?2eb3","containers/PasswordRecoveryPage/PasswordRecoveryForm/PasswordRecoveryForm.js","webpack://app/./src/containers/PasswordRecoveryPage/PasswordRecoveryPage.module.css?7565","containers/PasswordRecoveryPage/PasswordRecoveryPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PasswordRecoveryForm_root__nGnPC marketplaceModalFormRootStyles\",\"email\":\"PasswordRecoveryForm_email__nL2i8\",\"bottomWrapper\":\"PasswordRecoveryForm_bottomWrapper__7ugry marketplaceModalBottomWrapper\",\"bottomWrapperText\":\"PasswordRecoveryForm_bottomWrapperText__oxP51 marketplaceModalBottomWrapperText\",\"modalHelperLink\":\"PasswordRecoveryForm_modalHelperLink__k3EUw marketplaceModalHelperLink\",\"modalHelperText\":\"PasswordRecoveryForm_modalHelperText__aSuld marketplaceModalHelperText\"};","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { Form as FinalForm } from 'react-final-form';\r\nimport isEqual from 'lodash/isEqual';\r\nimport classNames from 'classnames';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport { propTypes } from '../../../util/types';\r\nimport * as validators from '../../../util/validators';\r\nimport { isPasswordRecoveryEmailNotFoundError } from '../../../util/errors';\r\n\r\nimport { Form, PrimaryButton, FieldTextInput, NamedLink } from '../../../components';\r\n\r\nimport css from './PasswordRecoveryForm.module.css';\r\n\r\nclass PasswordRecoveryFormComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.submittedValues = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <FinalForm\r\n        {...this.props}\r\n        render={fieldRenderProps => {\r\n          const {\r\n            rootClassName,\r\n            className,\r\n            formId,\r\n            handleSubmit,\r\n            pristine,\r\n            initialValues,\r\n            intl,\r\n            inProgress,\r\n            recoveryError,\r\n            values,\r\n          } = fieldRenderProps;\r\n\r\n          // email\r\n          const emailLabel = intl.formatMessage({\r\n            id: 'PasswordRecoveryForm.emailLabel',\r\n          });\r\n          const emailPlaceholder = intl.formatMessage({\r\n            id: 'PasswordRecoveryForm.emailPlaceholder',\r\n          });\r\n          const emailRequiredMessage = intl.formatMessage({\r\n            id: 'PasswordRecoveryForm.emailRequired',\r\n          });\r\n          const emailNotFoundMessage = intl.formatMessage({\r\n            id: 'PasswordRecoveryForm.emailNotFound',\r\n          });\r\n          const emailInvalidMessage = intl.formatMessage({\r\n            id: 'PasswordRecoveryForm.emailInvalid',\r\n          });\r\n\r\n          const emailRequired = validators.required(emailRequiredMessage);\r\n          const emailValid = validators.emailFormatValid(emailInvalidMessage);\r\n\r\n          // In case a given email is not found, pass a custom error message\r\n          // to be rendered with the input component\r\n          const customErrorText = isPasswordRecoveryEmailNotFoundError(recoveryError)\r\n            ? emailNotFoundMessage\r\n            : null;\r\n          const initialEmail = initialValues ? initialValues.email : null;\r\n          const emailTouched = values.email !== this.submittedValues.email;\r\n\r\n          const classes = classNames(rootClassName || css.root, className);\r\n          const submitInProgress = inProgress;\r\n          const submittedOnce = Object.keys(this.submittedValues).length > 0;\r\n          const pristineSinceLastSubmit = submittedOnce && isEqual(values, this.submittedValues);\r\n          const submitDisabled =\r\n            (pristine && !initialEmail) || submitInProgress || pristineSinceLastSubmit;\r\n\r\n          const loginLink = (\r\n            <NamedLink name=\"LoginPage\" className={css.modalHelperLink}>\r\n              <FormattedMessage id=\"PasswordRecoveryForm.loginLinkText\" />\r\n            </NamedLink>\r\n          );\r\n\r\n          return (\r\n            <Form\r\n              className={classes}\r\n              onSubmit={e => {\r\n                this.submittedValues = values;\r\n                handleSubmit(e);\r\n              }}\r\n            >\r\n              <FieldTextInput\r\n                className={css.email}\r\n                type=\"email\"\r\n                id={formId ? `${formId}.email` : 'email'}\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                label={emailLabel}\r\n                placeholder={emailPlaceholder}\r\n                validate={validators.composeValidators(emailRequired, emailValid)}\r\n                customErrorText={emailTouched ? null : customErrorText}\r\n              />\r\n\r\n              <div className={css.bottomWrapper}>\r\n                <p className={css.bottomWrapperText}>\r\n                  <span className={css.modalHelperText}>\r\n                    <FormattedMessage\r\n                      id=\"PasswordRecoveryForm.loginLinkInfo\"\r\n                      values={{ loginLink }}\r\n                    />\r\n                  </span>\r\n                </p>\r\n\r\n                <PrimaryButton\r\n                  type=\"submit\"\r\n                  inProgress={submitInProgress}\r\n                  disabled={submitDisabled}\r\n                >\r\n                  <FormattedMessage id=\"PasswordRecoveryForm.sendInstructions\" />\r\n                </PrimaryButton>\r\n              </div>\r\n            </Form>\r\n          );\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nPasswordRecoveryFormComponent.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  formId: null,\r\n  inProgress: false,\r\n  recoveryError: null,\r\n};\r\n\r\nconst { bool, string } = PropTypes;\r\n\r\nPasswordRecoveryFormComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  formId: string,\r\n\r\n  inProgress: bool,\r\n  recoveryError: propTypes.error,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst PasswordRecoveryForm = compose(injectIntl)(PasswordRecoveryFormComponent);\r\nPasswordRecoveryForm.displayName = 'PasswordRecoveryForm';\r\n\r\nexport default PasswordRecoveryForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PasswordRecoveryPage_root__pIHcL\",\"contentContainer\":\"PasswordRecoveryPage_contentContainer__CWiDM marketplaceModalRootStyles\",\"layoutWrapperMain\":\"PasswordRecoveryPage_layoutWrapperMain__R0bZT\",\"submitEmailContent\":\"PasswordRecoveryPage_submitEmailContent__A8N50 marketplaceModalBaseStyles\",\"genericErrorContent\":\"PasswordRecoveryPage_genericErrorContent__-qhGR marketplaceModalBaseStyles\",\"emailSubmittedContent\":\"PasswordRecoveryPage_emailSubmittedContent__BIOA8 marketplaceModalBaseStyles\",\"emailNotVerifiedContent\":\"PasswordRecoveryPage_emailNotVerifiedContent__MqQzI marketplaceModalBaseStyles\",\"bottomWrapper\":\"PasswordRecoveryPage_bottomWrapper__LZNTX marketplaceModalBottomWrapper\",\"modalIcon\":\"PasswordRecoveryPage_modalIcon__H8nSZ marketplaceModalIconStyles\",\"modalTitle\":\"PasswordRecoveryPage_modalTitle__Mn3HG marketplaceModalTitleStyles\",\"modalMessage\":\"PasswordRecoveryPage_modalMessage__tM9ar marketplaceModalParagraphStyles\",\"email\":\"PasswordRecoveryPage_email__qkFaS\",\"helperLink\":\"PasswordRecoveryPage_helperLink__WQogU a marketplaceModalHelperLink\",\"helperText\":\"PasswordRecoveryPage_helperText__UZYlC marketplaceModalHelperText\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { useConfiguration } from '../../context/configurationContext';\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\r\nimport { propTypes } from '../../util/types';\r\nimport { isPasswordRecoveryEmailNotFoundError } from '../../util/errors';\r\nimport { isScrollingDisabled } from '../../ducks/ui.duck';\r\n\r\nimport {\r\n  Heading,\r\n  Page,\r\n  InlineTextButton,\r\n  IconKeys,\r\n  ResponsiveBackgroundImageContainer,\r\n  LayoutSingleColumn,\r\n} from '../../components';\r\n\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\nimport FooterContainer from '../../containers/FooterContainer/FooterContainer';\r\n\r\nimport PasswordRecoveryForm from './PasswordRecoveryForm/PasswordRecoveryForm';\r\n\r\nimport {\r\n  recoverPassword,\r\n  retypePasswordRecoveryEmail,\r\n  clearPasswordRecoveryError,\r\n} from './PasswordRecoveryPage.duck';\r\nimport css from './PasswordRecoveryPage.module.css';\r\n\r\nconst PasswordRecovery = props => {\r\n  const { initialEmail, onChange, onSubmitEmail, recoveryInProgress, recoveryError } = props;\r\n  return (\r\n    <div className={css.submitEmailContent}>\r\n      <IconKeys className={css.modalIcon} />\r\n      <Heading as=\"h1\" rootClassName={css.modalTitle}>\r\n        <FormattedMessage id=\"PasswordRecoveryPage.forgotPasswordTitle\" />\r\n      </Heading>\r\n      <p className={css.modalMessage}>\r\n        <FormattedMessage id=\"PasswordRecoveryPage.forgotPasswordMessage\" />\r\n      </p>\r\n      <PasswordRecoveryForm\r\n        inProgress={recoveryInProgress}\r\n        onChange={onChange}\r\n        onSubmit={values => onSubmitEmail(values.email)}\r\n        initialValues={{ email: initialEmail }}\r\n        recoveryError={recoveryError}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst GenericError = () => {\r\n  return (\r\n    <div className={css.genericErrorContent}>\r\n      <IconKeys className={css.modalIcon} />\r\n      <Heading as=\"h1\" rootClassName={css.modalTitle}>\r\n        <FormattedMessage id=\"PasswordRecoveryPage.actionFailedTitle\" />\r\n      </Heading>\r\n      <p className={css.modalMessage}>\r\n        <FormattedMessage id=\"PasswordRecoveryPage.actionFailedMessage\" />\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst EmailSubmittedContent = props => {\r\n  const {\r\n    passwordRequested,\r\n    initialEmail,\r\n    submittedEmail,\r\n    onRetypeEmail,\r\n    onSubmitEmail,\r\n    recoveryInProgress,\r\n  } = props;\r\n\r\n  const submittedEmailText = (\r\n    <span className={css.email}>{passwordRequested ? initialEmail : submittedEmail}</span>\r\n  );\r\n\r\n  const resendEmailLink = (\r\n    <InlineTextButton rootClassName={css.helperLink} onClick={() => onSubmitEmail(submittedEmail)}>\r\n      <FormattedMessage id=\"PasswordRecoveryPage.resendEmailLinkText\" />\r\n    </InlineTextButton>\r\n  );\r\n\r\n  const fixEmailLink = (\r\n    <InlineTextButton rootClassName={css.helperLink} onClick={onRetypeEmail}>\r\n      <FormattedMessage id=\"PasswordRecoveryPage.fixEmailLinkText\" />\r\n    </InlineTextButton>\r\n  );\r\n\r\n  return (\r\n    <div className={css.emailSubmittedContent}>\r\n      <IconKeys className={css.modalIcon} />\r\n      <Heading as=\"h1\" rootClassName={css.modalTitle}>\r\n        <FormattedMessage id=\"PasswordRecoveryPage.emailSubmittedTitle\" />\r\n      </Heading>\r\n      <p className={css.modalMessage}>\r\n        <FormattedMessage\r\n          id=\"PasswordRecoveryPage.emailSubmittedMessage\"\r\n          values={{ submittedEmailText }}\r\n        />\r\n      </p>\r\n      <div className={css.bottomWrapper}>\r\n        <p className={css.helperText}>\r\n          {recoveryInProgress ? (\r\n            <FormattedMessage id=\"PasswordRecoveryPage.resendingEmailInfo\" />\r\n          ) : (\r\n            <FormattedMessage\r\n              id=\"PasswordRecoveryPage.resendEmailInfo\"\r\n              values={{ resendEmailLink }}\r\n            />\r\n          )}\r\n        </p>\r\n        <p className={css.helperText}>\r\n          <FormattedMessage id=\"PasswordRecoveryPage.fixEmailInfo\" values={{ fixEmailLink }} />\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const PasswordRecoveryPageComponent = props => {\r\n  const config = useConfiguration();\r\n  const {\r\n    scrollingDisabled,\r\n    initialEmail,\r\n    submittedEmail,\r\n    recoveryError,\r\n    recoveryInProgress,\r\n    passwordRequested,\r\n    onChange,\r\n    onSubmitEmail,\r\n    onRetypeEmail,\r\n    intl,\r\n  } = props;\r\n  const alreadyrequested = submittedEmail || passwordRequested;\r\n  const showPasswordRecoveryForm = (\r\n    <PasswordRecovery\r\n      initialEmail={initialEmail}\r\n      onChange={onChange}\r\n      onSubmitEmail={onSubmitEmail}\r\n      recoveryInProgress={recoveryInProgress}\r\n      recoveryError={recoveryError}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Page\r\n      title={intl.formatMessage({\r\n        id: 'PasswordRecoveryPage.title',\r\n      })}\r\n      scrollingDisabled={scrollingDisabled}\r\n    >\r\n      <LayoutSingleColumn\r\n        mainColumnClassName={css.layoutWrapperMain}\r\n        topbar={<TopbarContainer />}\r\n        footer={<FooterContainer />}\r\n      >\r\n        <ResponsiveBackgroundImageContainer\r\n          className={css.root}\r\n          childrenWrapperClassName={css.contentContainer}\r\n          as=\"section\"\r\n          image={config.branding.brandImage}\r\n          sizes=\"100%\"\r\n          useOverlay\r\n        >\r\n          {isPasswordRecoveryEmailNotFoundError(recoveryError) ? (\r\n            showPasswordRecoveryForm\r\n          ) : recoveryError ? (\r\n            <GenericError />\r\n          ) : alreadyrequested ? (\r\n            <EmailSubmittedContent\r\n              passwordRequested={passwordRequested}\r\n              initialEmail={initialEmail}\r\n              submittedEmail={submittedEmail}\r\n              onRetypeEmail={onRetypeEmail}\r\n              onSubmitEmail={onSubmitEmail}\r\n              recoveryInProgress={recoveryInProgress}\r\n            />\r\n          ) : (\r\n            showPasswordRecoveryForm\r\n          )}\r\n        </ResponsiveBackgroundImageContainer>\r\n      </LayoutSingleColumn>\r\n    </Page>\r\n  );\r\n};\r\n\r\nPasswordRecoveryPageComponent.defaultProps = {\r\n  sendVerificationEmailError: null,\r\n  initialEmail: null,\r\n  submittedEmail: null,\r\n  recoveryError: null,\r\n};\r\n\r\nconst { bool, func, string } = PropTypes;\r\n\r\nPasswordRecoveryPageComponent.propTypes = {\r\n  scrollingDisabled: bool.isRequired,\r\n  initialEmail: string,\r\n  submittedEmail: string,\r\n  recoveryError: propTypes.error,\r\n  recoveryInProgress: bool.isRequired,\r\n  passwordRequested: bool.isRequired,\r\n  onChange: func.isRequired,\r\n  onSubmitEmail: func.isRequired,\r\n  onRetypeEmail: func.isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const {\r\n    initialEmail,\r\n    submittedEmail,\r\n    recoveryError,\r\n    recoveryInProgress,\r\n    passwordRequested,\r\n  } = state.PasswordRecoveryPage;\r\n  return {\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n    initialEmail,\r\n    submittedEmail,\r\n    recoveryError,\r\n    recoveryInProgress,\r\n    passwordRequested,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: () => dispatch(clearPasswordRecoveryError()),\r\n  onSubmitEmail: email => dispatch(recoverPassword(email)),\r\n  onRetypeEmail: () => dispatch(retypePasswordRecoveryEmail()),\r\n});\r\n\r\nconst PasswordRecoveryPage = compose(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  ),\r\n  injectIntl\r\n)(PasswordRecoveryPageComponent);\r\n\r\nexport default PasswordRecoveryPage;\r\n"],"names":["PasswordRecoveryFormComponent","Component","constructor","props","super","this","submittedValues","render","React","FinalForm","Object","assign","fieldRenderProps","rootClassName","className","formId","handleSubmit","pristine","initialValues","intl","inProgress","recoveryError","values","emailLabel","formatMessage","id","emailPlaceholder","emailRequiredMessage","emailNotFoundMessage","emailInvalidMessage","emailRequired","validators","emailValid","customErrorText","isPasswordRecoveryEmailNotFoundError","initialEmail","email","emailTouched","classes","classNames","css","submitInProgress","pristineSinceLastSubmit","keys","length","isEqual","submitDisabled","loginLink","NamedLink","name","FormattedMessage","Form","onSubmit","e","FieldTextInput","type","concat","autoComplete","label","placeholder","validate","PrimaryButton","disabled","defaultProps","bool","string","PropTypes","PasswordRecoveryForm","compose","injectIntl","displayName","PasswordRecovery","onChange","onSubmitEmail","recoveryInProgress","IconKeys","Heading","as","GenericError","EmailSubmittedContent","passwordRequested","submittedEmail","onRetypeEmail","submittedEmailText","resendEmailLink","InlineTextButton","onClick","fixEmailLink","PasswordRecoveryPageComponent","config","useConfiguration","scrollingDisabled","alreadyrequested","showPasswordRecoveryForm","Page","title","LayoutSingleColumn","mainColumnClassName","topbar","TopbarContainer","footer","FooterContainer","ResponsiveBackgroundImageContainer","childrenWrapperClassName","image","branding","brandImage","sizes","useOverlay","sendVerificationEmailError","func","connect","state","PasswordRecoveryPage","isScrollingDisabled","dispatch","clearPasswordRecoveryError","recoverPassword","retypePasswordRecoveryEmail"],"sourceRoot":""}