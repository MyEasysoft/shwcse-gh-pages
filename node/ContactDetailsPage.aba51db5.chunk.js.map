{"version":3,"file":"ContactDetailsPage.aba51db5.chunk.js","mappings":"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","sources":["webpack://app/./src/containers/ContactDetailsPage/ContactDetailsForm/ContactDetailsForm.module.css?91a2","containers/ContactDetailsPage/ContactDetailsForm/ContactDetailsForm.js","webpack://app/./src/containers/ContactDetailsPage/ContactDetailsPage.module.css?78dc","containers/ContactDetailsPage/ContactDetailsPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ContactDetailsForm_root__Ve4GD\",\"infoText\":\"ContactDetailsForm_infoText__eENnH textSmall\",\"contactDetailsSection\":\"ContactDetailsForm_contactDetailsSection__yE1cF\",\"phone\":\"ContactDetailsForm_phone__TNaT8\",\"confirmChangesSection\":\"ContactDetailsForm_confirmChangesSection__UKhEe\",\"confirmChangesSectionVisible\":\"ContactDetailsForm_confirmChangesSectionVisible__FikTj\",\"emailVerified\":\"ContactDetailsForm_emailVerified__wUmPI ContactDetailsForm_infoText__eENnH textSmall\",\"emailUnverified\":\"ContactDetailsForm_emailUnverified__6vOx0 ContactDetailsForm_infoText__eENnH textSmall\",\"pendingEmailUnverified\":\"ContactDetailsForm_pendingEmailUnverified__L8lfp ContactDetailsForm_infoText__eENnH textSmall\",\"checkInbox\":\"ContactDetailsForm_checkInbox__8-Myk\",\"emailStyle\":\"ContactDetailsForm_emailStyle__aCL19\",\"helperLink\":\"ContactDetailsForm_helperLink__L4Gjt a\",\"tooMany\":\"ContactDetailsForm_tooMany__6Els+\",\"emailSent\":\"ContactDetailsForm_emailSent__w+Z3P\",\"confirmChangesTitle\":\"ContactDetailsForm_confirmChangesTitle__qgvt1\",\"confirmChangesInfo\":\"ContactDetailsForm_confirmChangesInfo__C8aHm\",\"bottomWrapper\":\"ContactDetailsForm_bottomWrapper__kI5z-\",\"error\":\"ContactDetailsForm_error__OKJ6s h4\"};","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport isEqual from 'lodash/isEqual';\r\nimport classNames from 'classnames';\r\nimport { Form as FinalForm } from 'react-final-form';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../../util/reactIntl';\r\nimport { propTypes } from '../../../util/types';\r\nimport * as validators from '../../../util/validators';\r\nimport { ensureCurrentUser } from '../../../util/data';\r\nimport {\r\n  isChangeEmailTakenError,\r\n  isChangeEmailWrongPassword,\r\n  isTooManyEmailVerificationRequestsError,\r\n} from '../../../util/errors';\r\n\r\nimport {\r\n  FieldPhoneNumberInput,\r\n  Form,\r\n  PrimaryButton,\r\n  FieldTextInput,\r\n  H4,\r\n} from '../../../components';\r\n\r\nimport css from './ContactDetailsForm.module.css';\r\n\r\nconst SHOW_EMAIL_SENT_TIMEOUT = 2000;\r\n\r\nclass ContactDetailsFormComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { showVerificationEmailSentMessage: false, showResetPasswordMessage: false };\r\n    this.emailSentTimeoutId = null;\r\n    this.handleResendVerificationEmail = this.handleResendVerificationEmail.bind(this);\r\n    this.handleResetPassword = this.handleResetPassword.bind(this);\r\n    this.submittedValues = {};\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.clearTimeout(this.emailSentTimeoutId);\r\n  }\r\n\r\n  handleResendVerificationEmail() {\r\n    this.setState({ showVerificationEmailSentMessage: true });\r\n\r\n    this.props.onResendVerificationEmail().then(() => {\r\n      // show \"verification email sent\" text for a bit longer.\r\n      this.emailSentTimeoutId = window.setTimeout(() => {\r\n        this.setState({ showVerificationEmailSentMessage: false });\r\n      }, SHOW_EMAIL_SENT_TIMEOUT);\r\n    });\r\n  }\r\n\r\n  handleResetPassword() {\r\n    this.setState({ showResetPasswordMessage: true });\r\n    const email = this.props.currentUser.attributes.email;\r\n    this.props.onResetPassword(email);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <FinalForm\r\n        {...this.props}\r\n        render={fieldRenderProps => {\r\n          const {\r\n            rootClassName,\r\n            className,\r\n            saveEmailError,\r\n            savePhoneNumberError,\r\n            currentUser,\r\n            formId,\r\n            handleSubmit,\r\n            inProgress,\r\n            intl,\r\n            invalid,\r\n            sendVerificationEmailError,\r\n            sendVerificationEmailInProgress,\r\n            resetPasswordInProgress,\r\n            values,\r\n          } = fieldRenderProps;\r\n          const { email, phoneNumber } = values;\r\n\r\n          const user = ensureCurrentUser(currentUser);\r\n\r\n          if (!user.id) {\r\n            return null;\r\n          }\r\n\r\n          const { email: currentEmail, emailVerified, pendingEmail, profile } = user.attributes;\r\n\r\n          // email\r\n\r\n          // has the email changed\r\n          const emailChanged = currentEmail !== email;\r\n\r\n          const emailLabel = intl.formatMessage({\r\n            id: 'ContactDetailsForm.emailLabel',\r\n          });\r\n\r\n          const emailPlaceholder = currentEmail || '';\r\n\r\n          const emailRequiredMessage = intl.formatMessage({\r\n            id: 'ContactDetailsForm.emailRequired',\r\n          });\r\n          const emailRequired = validators.required(emailRequiredMessage);\r\n          const emailInvalidMessage = intl.formatMessage({\r\n            id: 'ContactDetailsForm.emailInvalid',\r\n          });\r\n          const emailValid = validators.emailFormatValid(emailInvalidMessage);\r\n\r\n          const tooManyVerificationRequests = isTooManyEmailVerificationRequestsError(\r\n            sendVerificationEmailError\r\n          );\r\n\r\n          const emailTouched = this.submittedValues.email !== values.email;\r\n          const emailTakenErrorText = isChangeEmailTakenError(saveEmailError)\r\n            ? intl.formatMessage({ id: 'ContactDetailsForm.emailTakenError' })\r\n            : null;\r\n\r\n          let resendEmailMessage = null;\r\n          if (tooManyVerificationRequests) {\r\n            resendEmailMessage = (\r\n              <span className={css.tooMany}>\r\n                <FormattedMessage id=\"ContactDetailsForm.tooManyVerificationRequests\" />\r\n              </span>\r\n            );\r\n          } else if (\r\n            sendVerificationEmailInProgress ||\r\n            this.state.showVerificationEmailSentMessage\r\n          ) {\r\n            resendEmailMessage = (\r\n              <span className={css.emailSent}>\r\n                <FormattedMessage id=\"ContactDetailsForm.emailSent\" />\r\n              </span>\r\n            );\r\n          } else {\r\n            resendEmailMessage = (\r\n              <span\r\n                className={css.helperLink}\r\n                onClick={this.handleResendVerificationEmail}\r\n                role=\"button\"\r\n              >\r\n                <FormattedMessage id=\"ContactDetailsForm.resendEmailVerificationText\" />\r\n              </span>\r\n            );\r\n          }\r\n\r\n          // Email status info: unverified, verified and pending email (aka changed unverified email)\r\n          let emailVerifiedInfo = null;\r\n\r\n          if (emailVerified && !pendingEmail && !emailChanged) {\r\n            // Current email is verified and there's no pending unverified email\r\n            emailVerifiedInfo = (\r\n              <span className={css.emailVerified}>\r\n                <FormattedMessage id=\"ContactDetailsForm.emailVerified\" />\r\n              </span>\r\n            );\r\n          } else if (!emailVerified && !pendingEmail) {\r\n            // Current email is unverified. This is the email given in sign up form\r\n\r\n            emailVerifiedInfo = (\r\n              <span className={css.emailUnverified}>\r\n                <FormattedMessage\r\n                  id=\"ContactDetailsForm.emailUnverified\"\r\n                  values={{ resendEmailMessage }}\r\n                />\r\n              </span>\r\n            );\r\n          } else if (pendingEmail) {\r\n            // Current email has been tried to change, but the new address is not yet verified\r\n\r\n            const pendingEmailStyled = <span className={css.emailStyle}>{pendingEmail}</span>;\r\n            const pendingEmailCheckInbox = (\r\n              <span className={css.checkInbox}>\r\n                <FormattedMessage\r\n                  id=\"ContactDetailsForm.pendingEmailCheckInbox\"\r\n                  values={{ pendingEmail: pendingEmailStyled }}\r\n                />\r\n              </span>\r\n            );\r\n\r\n            emailVerifiedInfo = (\r\n              <span className={css.pendingEmailUnverified}>\r\n                <FormattedMessage\r\n                  id=\"ContactDetailsForm.pendingEmailUnverified\"\r\n                  values={{ pendingEmailCheckInbox, resendEmailMessage }}\r\n                />\r\n              </span>\r\n            );\r\n          }\r\n\r\n          // phone\r\n          const protectedData = profile.protectedData || {};\r\n          const currentPhoneNumber = protectedData.phoneNumber;\r\n\r\n          // has the phone number changed\r\n          const phoneNumberChanged =\r\n            currentPhoneNumber !== phoneNumber &&\r\n            !(typeof currentPhoneNumber === 'undefined' && phoneNumber === '');\r\n\r\n          const phonePlaceholder = intl.formatMessage({\r\n            id: 'ContactDetailsForm.phonePlaceholder',\r\n          });\r\n          const phoneLabel = intl.formatMessage({ id: 'ContactDetailsForm.phoneLabel' });\r\n\r\n          // password\r\n          const passwordLabel = intl.formatMessage({\r\n            id: 'ContactDetailsForm.passwordLabel',\r\n          });\r\n          const passwordPlaceholder = intl.formatMessage({\r\n            id: 'ContactDetailsForm.passwordPlaceholder',\r\n          });\r\n          const passwordRequiredMessage = intl.formatMessage({\r\n            id: 'ContactDetailsForm.passwordRequired',\r\n          });\r\n\r\n          const passwordRequired = validators.requiredStringNoTrim(passwordRequiredMessage);\r\n\r\n          const passwordMinLengthMessage = intl.formatMessage(\r\n            {\r\n              id: 'ContactDetailsForm.passwordTooShort',\r\n            },\r\n            {\r\n              minLength: validators.PASSWORD_MIN_LENGTH,\r\n            }\r\n          );\r\n\r\n          const passwordMinLength = validators.minLength(\r\n            passwordMinLengthMessage,\r\n            validators.PASSWORD_MIN_LENGTH\r\n          );\r\n\r\n          const passwordValidators = emailChanged\r\n            ? validators.composeValidators(passwordRequired, passwordMinLength)\r\n            : null;\r\n\r\n          const passwordFailedMessage = intl.formatMessage({\r\n            id: 'ContactDetailsForm.passwordFailed',\r\n          });\r\n          const passwordTouched = this.submittedValues.currentPassword !== values.currentPassword;\r\n          const passwordErrorText = isChangeEmailWrongPassword(saveEmailError)\r\n            ? passwordFailedMessage\r\n            : null;\r\n\r\n          const confirmClasses = classNames(css.confirmChangesSection, {\r\n            [css.confirmChangesSectionVisible]: emailChanged,\r\n          });\r\n\r\n          // generic error\r\n          const isGenericEmailError = saveEmailError && !(emailTakenErrorText || passwordErrorText);\r\n\r\n          let genericError = null;\r\n\r\n          if (isGenericEmailError && savePhoneNumberError) {\r\n            genericError = (\r\n              <span className={css.error}>\r\n                <FormattedMessage id=\"ContactDetailsForm.genericFailure\" />\r\n              </span>\r\n            );\r\n          } else if (isGenericEmailError) {\r\n            genericError = (\r\n              <span className={css.error}>\r\n                <FormattedMessage id=\"ContactDetailsForm.genericEmailFailure\" />\r\n              </span>\r\n            );\r\n          } else if (savePhoneNumberError) {\r\n            genericError = (\r\n              <span className={css.error}>\r\n                <FormattedMessage id=\"ContactDetailsForm.genericPhoneNumberFailure\" />\r\n              </span>\r\n            );\r\n          }\r\n\r\n          const sendPasswordLink = (\r\n            <span className={css.helperLink} onClick={this.handleResetPassword} role=\"button\">\r\n              <FormattedMessage id=\"ContactDetailsForm.resetPasswordLinkText\" />\r\n            </span>\r\n          );\r\n\r\n          const resendPasswordLink = (\r\n            <span className={css.helperLink} onClick={this.handleResetPassword} role=\"button\">\r\n              <FormattedMessage id=\"ContactDetailsForm.resendPasswordLinkText\" />\r\n            </span>\r\n          );\r\n\r\n          const resetPasswordLink =\r\n            this.state.showResetPasswordMessage || resetPasswordInProgress ? (\r\n              <>\r\n                <FormattedMessage\r\n                  id=\"ContactDetailsForm.resetPasswordLinkSent\"\r\n                  values={{\r\n                    email: <span className={css.emailStyle}>{currentUser.attributes.email}</span>,\r\n                  }}\r\n                />{' '}\r\n                {resendPasswordLink}\r\n              </>\r\n            ) : (\r\n              sendPasswordLink\r\n            );\r\n\r\n          const classes = classNames(rootClassName || css.root, className);\r\n          const submittedOnce = Object.keys(this.submittedValues).length > 0;\r\n          const pristineSinceLastSubmit = submittedOnce && isEqual(values, this.submittedValues);\r\n          const submitDisabled =\r\n            invalid ||\r\n            pristineSinceLastSubmit ||\r\n            inProgress ||\r\n            !(emailChanged || phoneNumberChanged);\r\n\r\n          return (\r\n            <Form\r\n              className={classes}\r\n              onSubmit={e => {\r\n                this.submittedValues = values;\r\n                handleSubmit(e);\r\n              }}\r\n            >\r\n              <div className={css.contactDetailsSection}>\r\n                <FieldTextInput\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  id={formId ? `${formId}.email` : 'email'}\r\n                  label={emailLabel}\r\n                  placeholder={emailPlaceholder}\r\n                  validate={validators.composeValidators(emailRequired, emailValid)}\r\n                  customErrorText={emailTouched ? null : emailTakenErrorText}\r\n                />\r\n                {emailVerifiedInfo}\r\n                <FieldPhoneNumberInput\r\n                  className={css.phone}\r\n                  name=\"phoneNumber\"\r\n                  id={formId ? `${formId}.phoneNumber` : 'phoneNumber'}\r\n                  label={phoneLabel}\r\n                  placeholder={phonePlaceholder}\r\n                />\r\n              </div>\r\n\r\n              <div className={confirmClasses}>\r\n                <H4 as=\"h3\" className={css.confirmChangesTitle}>\r\n                  <FormattedMessage id=\"ContactDetailsForm.confirmChangesTitle\" />\r\n                </H4>\r\n                <p className={css.confirmChangesInfo}>\r\n                  <FormattedMessage id=\"ContactDetailsForm.confirmChangesInfo\" />\r\n                  <br />\r\n                  <FormattedMessage\r\n                    id=\"ContactDetailsForm.resetPasswordInfo\"\r\n                    values={{ resetPasswordLink }}\r\n                  />\r\n                </p>\r\n\r\n                <FieldTextInput\r\n                  className={css.password}\r\n                  type=\"password\"\r\n                  name=\"currentPassword\"\r\n                  id={formId ? `${formId}.currentPassword` : 'currentPassword'}\r\n                  autoComplete=\"current-password\"\r\n                  label={passwordLabel}\r\n                  placeholder={passwordPlaceholder}\r\n                  validate={passwordValidators}\r\n                  customErrorText={passwordTouched ? null : passwordErrorText}\r\n                />\r\n              </div>\r\n              <div className={css.bottomWrapper}>\r\n                {genericError}\r\n                <PrimaryButton\r\n                  type=\"submit\"\r\n                  inProgress={inProgress}\r\n                  ready={pristineSinceLastSubmit}\r\n                  disabled={submitDisabled}\r\n                >\r\n                  <FormattedMessage id=\"ContactDetailsForm.saveChanges\" />\r\n                </PrimaryButton>\r\n              </div>\r\n            </Form>\r\n          );\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nContactDetailsFormComponent.defaultProps = {\r\n  rootClassName: null,\r\n  className: null,\r\n  formId: null,\r\n  saveEmailError: null,\r\n  savePhoneNumberError: null,\r\n  inProgress: false,\r\n  sendVerificationEmailError: null,\r\n  sendVerificationEmailInProgress: false,\r\n  email: null,\r\n  phoneNumber: null,\r\n  resetPasswordInProgress: false,\r\n  resetPasswordError: null,\r\n};\r\n\r\nconst { bool, func, string } = PropTypes;\r\n\r\nContactDetailsFormComponent.propTypes = {\r\n  rootClassName: string,\r\n  className: string,\r\n  formId: string,\r\n  saveEmailError: propTypes.error,\r\n  savePhoneNumberError: propTypes.error,\r\n  inProgress: bool,\r\n  intl: intlShape.isRequired,\r\n  onResendVerificationEmail: func.isRequired,\r\n  ready: bool.isRequired,\r\n  sendVerificationEmailError: propTypes.error,\r\n  sendVerificationEmailInProgress: bool,\r\n  resetPasswordInProgress: bool,\r\n  resetPasswordError: propTypes.error,\r\n};\r\n\r\nconst ContactDetailsForm = compose(injectIntl)(ContactDetailsFormComponent);\r\n\r\nContactDetailsForm.displayName = 'ContactDetailsForm';\r\n\r\nexport default ContactDetailsForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ContactDetailsPage_content__NOhC-\",\"desktopTopbar\":\"ContactDetailsPage_desktopTopbar__fVtHT\",\"mobileTopbar\":\"ContactDetailsPage_mobileTopbar__miBEM\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\r\nimport { propTypes } from '../../util/types';\r\nimport { ensureCurrentUser } from '../../util/data';\r\nimport { sendVerificationEmail } from '../../ducks/user.duck';\r\nimport { isScrollingDisabled } from '../../ducks/ui.duck';\r\n\r\nimport { H3, Page, UserNav, LayoutSideNavigation } from '../../components';\r\n\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\nimport FooterContainer from '../../containers/FooterContainer/FooterContainer';\r\n\r\nimport ContactDetailsForm from './ContactDetailsForm/ContactDetailsForm';\r\n\r\nimport {\r\n  saveContactDetails,\r\n  saveContactDetailsClear,\r\n  resetPassword,\r\n} from './ContactDetailsPage.duck';\r\nimport css from './ContactDetailsPage.module.css';\r\n\r\nexport const ContactDetailsPageComponent = props => {\r\n  const {\r\n    saveEmailError,\r\n    savePhoneNumberError,\r\n    saveContactDetailsInProgress,\r\n    currentUser,\r\n    contactDetailsChanged,\r\n    onChange,\r\n    scrollingDisabled,\r\n    sendVerificationEmailInProgress,\r\n    sendVerificationEmailError,\r\n    onResendVerificationEmail,\r\n    onSubmitContactDetails,\r\n    onResetPassword,\r\n    resetPasswordInProgress,\r\n    resetPasswordError,\r\n    intl,\r\n  } = props;\r\n\r\n  const user = ensureCurrentUser(currentUser);\r\n  const currentEmail = user.attributes.email || '';\r\n  const protectedData = user.attributes.profile.protectedData || {};\r\n  const currentPhoneNumber = protectedData.phoneNumber || '';\r\n  const contactInfoForm = user.id ? (\r\n    <ContactDetailsForm\r\n      className={css.form}\r\n      initialValues={{ email: currentEmail, phoneNumber: currentPhoneNumber }}\r\n      saveEmailError={saveEmailError}\r\n      savePhoneNumberError={savePhoneNumberError}\r\n      currentUser={currentUser}\r\n      onResendVerificationEmail={onResendVerificationEmail}\r\n      onResetPassword={onResetPassword}\r\n      onSubmit={values => onSubmitContactDetails({ ...values, currentEmail, currentPhoneNumber })}\r\n      onChange={onChange}\r\n      inProgress={saveContactDetailsInProgress}\r\n      ready={contactDetailsChanged}\r\n      sendVerificationEmailInProgress={sendVerificationEmailInProgress}\r\n      sendVerificationEmailError={sendVerificationEmailError}\r\n      resetPasswordInProgress={resetPasswordInProgress}\r\n      resetPasswordError={resetPasswordError}\r\n    />\r\n  ) : null;\r\n\r\n  const title = intl.formatMessage({ id: 'ContactDetailsPage.title' });\r\n\r\n  return (\r\n    <Page title={title} scrollingDisabled={scrollingDisabled}>\r\n      <LayoutSideNavigation\r\n        topbar={\r\n          <>\r\n            <TopbarContainer\r\n              currentPage=\"ContactDetailsPage\"\r\n              desktopClassName={css.desktopTopbar}\r\n              mobileClassName={css.mobileTopbar}\r\n            />\r\n            <UserNav currentPage=\"ContactDetailsPage\" />\r\n          </>\r\n        }\r\n        sideNav={null}\r\n        useAccountSettingsNav\r\n        currentPage=\"ContactDetailsPage\"\r\n        footer={<FooterContainer />}\r\n      >\r\n        <div className={css.content}>\r\n          <H3 as=\"h1\">\r\n            <FormattedMessage id=\"ContactDetailsPage.heading\" />\r\n          </H3>\r\n          {contactInfoForm}\r\n        </div>\r\n      </LayoutSideNavigation>\r\n    </Page>\r\n  );\r\n};\r\n\r\nContactDetailsPageComponent.defaultProps = {\r\n  saveEmailError: null,\r\n  savePhoneNumberError: null,\r\n  currentUser: null,\r\n  sendVerificationEmailError: null,\r\n  resetPasswordInProgress: false,\r\n  resetPasswordError: null,\r\n};\r\n\r\nconst { bool, func } = PropTypes;\r\n\r\nContactDetailsPageComponent.propTypes = {\r\n  saveEmailError: propTypes.error,\r\n  savePhoneNumberError: propTypes.error,\r\n  saveContactDetailsInProgress: bool.isRequired,\r\n  currentUser: propTypes.currentUser,\r\n  contactDetailsChanged: bool.isRequired,\r\n  onChange: func.isRequired,\r\n  onSubmitContactDetails: func.isRequired,\r\n  scrollingDisabled: bool.isRequired,\r\n  sendVerificationEmailInProgress: bool.isRequired,\r\n  sendVerificationEmailError: propTypes.error,\r\n  onResendVerificationEmail: func.isRequired,\r\n  resetPasswordInProgress: bool,\r\n  resetPasswordError: propTypes.error,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  // Topbar needs user info.\r\n  const { currentUser, sendVerificationEmailInProgress, sendVerificationEmailError } = state.user;\r\n  const {\r\n    saveEmailError,\r\n    savePhoneNumberError,\r\n    saveContactDetailsInProgress,\r\n    contactDetailsChanged,\r\n    resetPasswordInProgress,\r\n    resetPasswordError,\r\n  } = state.ContactDetailsPage;\r\n  return {\r\n    saveEmailError,\r\n    savePhoneNumberError,\r\n    saveContactDetailsInProgress,\r\n    currentUser,\r\n    contactDetailsChanged,\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n    sendVerificationEmailInProgress,\r\n    sendVerificationEmailError,\r\n    resetPasswordInProgress,\r\n    resetPasswordError,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: () => dispatch(saveContactDetailsClear()),\r\n  onResendVerificationEmail: () => dispatch(sendVerificationEmail()),\r\n  onSubmitContactDetails: values => dispatch(saveContactDetails(values)),\r\n  onResetPassword: values => dispatch(resetPassword(values)),\r\n});\r\n\r\nconst ContactDetailsPage = compose(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  ),\r\n  injectIntl\r\n)(ContactDetailsPageComponent);\r\n\r\nexport default ContactDetailsPage;\r\n"],"names":["ContactDetailsFormComponent","Component","constructor","props","super","this","state","showVerificationEmailSentMessage","showResetPasswordMessage","emailSentTimeoutId","handleResendVerificationEmail","bind","handleResetPassword","submittedValues","componentWillUnmount","window","clearTimeout","setState","onResendVerificationEmail","then","setTimeout","email","currentUser","attributes","onResetPassword","render","React","FinalForm","Object","assign","fieldRenderProps","rootClassName","className","saveEmailError","savePhoneNumberError","formId","handleSubmit","inProgress","intl","invalid","sendVerificationEmailError","sendVerificationEmailInProgress","resetPasswordInProgress","values","phoneNumber","user","ensureCurrentUser","id","currentEmail","emailVerified","pendingEmail","profile","emailChanged","emailLabel","formatMessage","emailPlaceholder","emailRequiredMessage","emailRequired","validators","emailInvalidMessage","emailValid","tooManyVerificationRequests","isTooManyEmailVerificationRequestsError","emailTouched","emailTakenErrorText","isChangeEmailTakenError","resendEmailMessage","css","tooMany","FormattedMessage","emailSent","helperLink","onClick","role","emailVerifiedInfo","pendingEmailStyled","emailStyle","pendingEmailCheckInbox","checkInbox","pendingEmailUnverified","emailUnverified","currentPhoneNumber","protectedData","phoneNumberChanged","phonePlaceholder","phoneLabel","passwordLabel","passwordPlaceholder","passwordRequiredMessage","passwordRequired","passwordMinLengthMessage","minLength","passwordMinLength","passwordValidators","passwordFailedMessage","passwordTouched","currentPassword","passwordErrorText","isChangeEmailWrongPassword","confirmClasses","classNames","confirmChangesSection","confirmChangesSectionVisible","isGenericEmailError","genericError","error","sendPasswordLink","resendPasswordLink","resetPasswordLink","classes","root","pristineSinceLastSubmit","keys","length","isEqual","submitDisabled","Form","onSubmit","e","contactDetailsSection","FieldTextInput","type","name","concat","label","placeholder","validate","customErrorText","FieldPhoneNumberInput","phone","H4","as","confirmChangesTitle","confirmChangesInfo","password","autoComplete","bottomWrapper","PrimaryButton","ready","disabled","defaultProps","resetPasswordError","bool","func","string","PropTypes","ContactDetailsForm","compose","injectIntl","displayName","ContactDetailsPageComponent","saveContactDetailsInProgress","contactDetailsChanged","onChange","scrollingDisabled","onSubmitContactDetails","contactInfoForm","form","initialValues","title","Page","LayoutSideNavigation","topbar","TopbarContainer","currentPage","desktopClassName","desktopTopbar","mobileClassName","mobileTopbar","UserNav","sideNav","useAccountSettingsNav","footer","FooterContainer","content","H3","connect","ContactDetailsPage","isScrollingDisabled","dispatch","saveContactDetailsClear","sendVerificationEmail","saveContactDetails","resetPassword"],"sourceRoot":""}