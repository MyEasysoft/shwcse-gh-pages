{"version":3,"file":"InboxPage.fe9b162e.chunk.js","mappings":"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","sources":["webpack://app/./src/containers/InboxPage/InboxPage.module.css?94f6","containers/InboxPage/InboxPage.js","containers/InboxPage/InboxPage.stateData.js","containers/InboxPage/InboxPage.stateDataBooking.js","containers/InboxPage/InboxPage.stateDataPurchase.js","containers/InboxPage/InboxPage.stateDataInquiry.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"mobileTopbar\":\"InboxPage_mobileTopbar__4PjGM\",\"desktopTopbar\":\"InboxPage_desktopTopbar__Xa66G\",\"navigation\":\"InboxPage_navigation__FV-nc\",\"title\":\"InboxPage_title__zSoVd\",\"tabs\":\"InboxPage_tabs__vAH6s\",\"tab\":\"InboxPage_tab__p+Bq3\",\"error\":\"InboxPage_error__mXyRA\",\"noResults\":\"InboxPage_noResults__CfSks\",\"itemList\":\"InboxPage_itemList__TKDkD\",\"listItemsLoading\":\"InboxPage_listItemsLoading__dubhi\",\"loadingSpinnerFadeIn\":\"InboxPage_loadingSpinnerFadeIn__vze4a\",\"listItem\":\"InboxPage_listItem__TbZxn\",\"item\":\"InboxPage_item__KE9NU\",\"itemAvatar\":\"InboxPage_itemAvatar__9c1y1\",\"itemLink\":\"InboxPage_itemLink__61KZ-\",\"itemUsername\":\"InboxPage_itemUsername__RWVM8 textSmall\",\"rowNotificationDot\":\"InboxPage_rowNotificationDot__8q7bH\",\"notificationDot\":\"InboxPage_notificationDot__9utFD\",\"itemTitle\":\"InboxPage_itemTitle__HmOsL marketplaceTinyFontStyles\",\"itemDetails\":\"InboxPage_itemDetails__1jowG marketplaceTinyFontStyles\",\"itemState\":\"InboxPage_itemState__RA4qF marketplaceTinyFontStyles\",\"pagination\":\"InboxPage_pagination__mqQEI\",\"stateName\":\"InboxPage_stateName__at1xq\",\"stateActionNeeded\":\"InboxPage_stateActionNeeded__cDfpI\",\"stateNoActionNeeded\":\"InboxPage_stateNoActionNeeded__TBJ0K\",\"stateConcluded\":\"InboxPage_stateConcluded__xCnHg\",\"bookingActionNeeded\":\"InboxPage_bookingActionNeeded__Natp3\",\"bookingNoActionNeeded\":\"InboxPage_bookingNoActionNeeded__v5cqS\",\"lastTransitionedShwcsephasized\":\"InboxPage_lastTransitionedShwcsephasized__teyGl\",\"lastTransitionedAtNotEmphasized\":\"InboxPage_lastTransitionedAtNotEmphasized__UYWpn\",\"bannedUserLink\":\"InboxPage_bannedUserLink__NxshM\"};","import React from 'react';\r\nimport { arrayOf, bool, number, oneOf, shape, string } from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport classNames from 'classnames';\r\n\r\nimport { useConfiguration } from '../../context/configurationContext';\r\n\r\nimport { FormattedMessage, injectIntl, intlShape } from '../../util/reactIntl';\r\nimport {\r\n  propTypes,\r\n  DATE_TYPE_DATE,\r\n  DATE_TYPE_DATETIME,\r\n  LINE_ITEM_NIGHT,\r\n  LINE_ITEM_HOUR,\r\n  LISTING_UNIT_TYPES,\r\n  STOCK_MULTIPLE_ITEMS,\r\n} from '../../util/types';\r\nimport { subtractTime } from '../../util/dates';\r\nimport {\r\n  TX_TRANSITION_ACTOR_CUSTOMER,\r\n  TX_TRANSITION_ACTOR_PROVIDER,\r\n  resolveLatestProcessName,\r\n  getProcess,\r\n  isBookingProcess,\r\n} from '../../transactions/transaction';\r\n\r\nimport { getMarketplaceEntities } from '../../ducks/marketplaceData.duck';\r\nimport { isScrollingDisabled } from '../../ducks/ui.duck';\r\nimport {\r\n  H2,\r\n  Avatar,\r\n  NamedLink,\r\n  NotificationBadge,\r\n  Page,\r\n  PaginationLinks,\r\n  TabNav,\r\n  IconSpinner,\r\n  TimeRange,\r\n  UserDisplayName,\r\n  LayoutSideNavigation,\r\n} from '../../components';\r\n\r\nimport TopbarContainer from '../../containers/TopbarContainer/TopbarContainer';\r\nimport FooterContainer from '../../containers/FooterContainer/FooterContainer';\r\nimport NotFoundPage from '../../containers/NotFoundPage/NotFoundPage';\r\n\r\nimport { stateDataShape, getStateData } from './InboxPage.stateData';\r\nimport css from './InboxPage.module.css';\r\n\r\n// Check if the transaction line-items use booking-related units\r\nconst getUnitLineItem = lineItems => {\r\n  const unitLineItem = lineItems?.find(\r\n    item => LISTING_UNIT_TYPES.includes(item.code) && !item.reversal\r\n  );\r\n  return unitLineItem;\r\n};\r\n\r\n// Booking data (start & end) are bit different depending on display times and\r\n// if \"end\" refers to last day booked or the first exclusive day\r\nconst bookingData = (tx, lineItemUnitType, timeZone) => {\r\n  // Attributes: displayStart and displayEnd can be used to differentiate shown time range\r\n  // from actual start and end times used for availability reservation. It can help in situations\r\n  // where there are preparation time needed between bookings.\r\n  // Read more: https://www.sharetribe.com/api-reference/marketplace.html#bookings\r\n  const { start, end, displayStart, displayEnd } = tx.booking.attributes;\r\n  const bookingStart = displayStart || start;\r\n  const bookingEndRaw = displayEnd || end;\r\n\r\n  // When unit type is night, we can assume booking end to be inclusive.\r\n  const isNight = lineItemUnitType === LINE_ITEM_NIGHT;\r\n  const isHour = lineItemUnitType === LINE_ITEM_HOUR;\r\n  const bookingEnd =\r\n    isNight || isHour ? bookingEndRaw : subtractTime(bookingEndRaw, 1, 'days', timeZone);\r\n\r\n  return { bookingStart, bookingEnd };\r\n};\r\n\r\nconst BookingTimeInfoMaybe = props => {\r\n  const { transaction, ...rest } = props;\r\n  const processName = resolveLatestProcessName(transaction?.attributes?.processName);\r\n  const process = getProcess(processName);\r\n  const isInquiry = process.getState(transaction) === process.states.INQUIRY;\r\n\r\n  if (isInquiry) {\r\n    return null;\r\n  }\r\n\r\n  const hasLineItems = transaction?.attributes?.lineItems?.length > 0;\r\n  const unitLineItem = hasLineItems\r\n    ? transaction.attributes?.lineItems?.find(\r\n        item => LISTING_UNIT_TYPES.includes(item.code) && !item.reversal\r\n      )\r\n    : null;\r\n\r\n  const lineItemUnitType = unitLineItem ? unitLineItem.code : null;\r\n  const dateType = lineItemUnitType === LINE_ITEM_HOUR ? DATE_TYPE_DATETIME : DATE_TYPE_DATE;\r\n\r\n  const timeZone = transaction?.listing?.attributes?.availabilityPlan?.timezone || 'Etc/UTC';\r\n  const { bookingStart, bookingEnd } = bookingData(transaction, lineItemUnitType, timeZone);\r\n\r\n  return (\r\n    <TimeRange\r\n      startDate={bookingStart}\r\n      endDate={bookingEnd}\r\n      dateType={dateType}\r\n      timeZone={timeZone}\r\n      {...rest}\r\n    />\r\n  );\r\n};\r\n\r\nBookingTimeInfoMaybe.propTypes = {\r\n  transaction: propTypes.transaction.isRequired,\r\n};\r\n\r\nexport const InboxItem = props => {\r\n  const {\r\n    transactionRole,\r\n    tx,\r\n    intl,\r\n    stateData,\r\n    isBooking,\r\n    stockType = STOCK_MULTIPLE_ITEMS,\r\n  } = props;\r\n  const { customer, provider, listing } = tx;\r\n  const { processName, processState, actionNeeded, isSaleNotification, isFinal } = stateData;\r\n  const isCustomer = transactionRole === TX_TRANSITION_ACTOR_CUSTOMER;\r\n\r\n  const lineItems = tx.attributes?.lineItems;\r\n  const hasPricingData = lineItems.length > 0;\r\n  const unitLineItem = getUnitLineItem(lineItems);\r\n  const quantity = hasPricingData && !isBooking ? unitLineItem.quantity.toString() : null;\r\n  const showStock = stockType === STOCK_MULTIPLE_ITEMS || (quantity && unitLineItem.quantity > 1);\r\n\r\n  const otherUser = isCustomer ? provider : customer;\r\n  const otherUserDisplayName = <UserDisplayName user={otherUser} intl={intl} />;\r\n  const isOtherUserBanned = otherUser.attributes.banned;\r\n\r\n  const rowNotificationDot = isSaleNotification ? <div className={css.notificationDot} /> : null;\r\n\r\n  const linkClasses = classNames(css.itemLink, {\r\n    [css.bannedUserLink]: isOtherUserBanned,\r\n  });\r\n  const stateClasses = classNames(css.stateName, {\r\n    [css.stateConcluded]: isFinal,\r\n    [css.stateActionNeeded]: actionNeeded,\r\n    [css.stateNoActionNeeded]: !actionNeeded,\r\n  });\r\n\r\n  return (\r\n    <div className={css.item}>\r\n      <div className={css.itemAvatar}>\r\n        <Avatar user={otherUser} />\r\n      </div>\r\n      <NamedLink\r\n        className={linkClasses}\r\n        name={isCustomer ? 'OrderDetailsPage' : 'SaleDetailsPage'}\r\n        params={{ id: tx.id.uuid }}\r\n      >\r\n        <div className={css.rowNotificationDot}>{rowNotificationDot}</div>\r\n        <div className={css.itemUsername}>{otherUserDisplayName}</div>\r\n        <div className={css.itemTitle}>{listing?.attributes?.title}</div>\r\n        <div className={css.itemDetails}>\r\n          {isBooking ? (\r\n            <BookingTimeInfoMaybe transaction={tx} />\r\n          ) : hasPricingData && showStock ? (\r\n            <FormattedMessage id=\"InboxPage.quantity\" values={{ quantity }} />\r\n          ) : null}\r\n        </div>\r\n        <div className={css.itemState}>\r\n          <div className={stateClasses}>\r\n            <FormattedMessage\r\n              id={`InboxPage.${processName}.${processState}.status`}\r\n              values={{ transactionRole }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </NamedLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nInboxItem.propTypes = {\r\n  transactionRole: oneOf([TX_TRANSITION_ACTOR_CUSTOMER, TX_TRANSITION_ACTOR_PROVIDER]).isRequired,\r\n  tx: propTypes.transaction.isRequired,\r\n  intl: intlShape.isRequired,\r\n  stateData: stateDataShape.isRequired,\r\n};\r\n\r\nexport const InboxPageComponent = props => {\r\n  const config = useConfiguration();\r\n  const {\r\n    currentUser,\r\n    fetchInProgress,\r\n    fetchOrdersOrSalesError,\r\n    intl,\r\n    pagination,\r\n    params,\r\n    providerNotificationCount,\r\n    scrollingDisabled,\r\n    transactions,\r\n  } = props;\r\n  const { tab } = params;\r\n  const validTab = tab === 'orders' || tab === 'sales';\r\n  if (!validTab) {\r\n    return <NotFoundPage />;\r\n  }\r\n\r\n  const isOrders = tab === 'orders';\r\n  const hasNoResults = !fetchInProgress && transactions.length === 0 && !fetchOrdersOrSalesError;\r\n  const ordersTitle = intl.formatMessage({ id: 'InboxPage.ordersTitle' });\r\n  const salesTitle = intl.formatMessage({ id: 'InboxPage.salesTitle' });\r\n  const title = isOrders ? ordersTitle : salesTitle;\r\n\r\n  const pickType = lt => conf => conf.listingType === lt;\r\n  const findListingTypeConfig = publicData => {\r\n    const listingTypeConfigs = config.listing?.listingTypes;\r\n    const { listingType } = publicData || {};\r\n    const foundConfig = listingTypeConfigs?.find(pickType(listingType));\r\n    return foundConfig;\r\n  };\r\n  const toTxItem = tx => {\r\n    const transactionRole = isOrders ? TX_TRANSITION_ACTOR_CUSTOMER : TX_TRANSITION_ACTOR_PROVIDER;\r\n    let stateData = null;\r\n    try {\r\n      stateData = getStateData({ transaction: tx, transactionRole, intl });\r\n    } catch (error) {\r\n      // If stateData is missing, omit the transaction from InboxItem list.\r\n    }\r\n\r\n    const publicData = tx?.listing?.attributes?.publicData || {};\r\n    const foundListingTypeConfig = findListingTypeConfig(publicData);\r\n    const { transactionType, stockType } = foundListingTypeConfig || {};\r\n    const process = tx?.attributes?.processName || transactionType?.transactionType;\r\n    const transactionProcess = resolveLatestProcessName(process);\r\n    const isBooking = isBookingProcess(transactionProcess);\r\n\r\n    // Render InboxItem only if the latest transition of the transaction is handled in the `txState` function.\r\n    return stateData ? (\r\n      <li key={tx.id.uuid} className={css.listItem}>\r\n        <InboxItem\r\n          transactionRole={transactionRole}\r\n          tx={tx}\r\n          intl={intl}\r\n          stateData={stateData}\r\n          stockType={stockType}\r\n          isBooking={isBooking}\r\n        />\r\n      </li>\r\n    ) : null;\r\n  };\r\n\r\n  const hasOrderOrSaleTransactions = (tx, isOrdersTab, user) => {\r\n    return isOrdersTab\r\n      ? user?.id && tx && tx.length > 0 && tx[0].customer.id.uuid === user?.id?.uuid\r\n      : user?.id && tx && tx.length > 0 && tx[0].provider.id.uuid === user?.id?.uuid;\r\n  };\r\n  const hasTransactions =\r\n    !fetchInProgress && hasOrderOrSaleTransactions(transactions, isOrders, currentUser);\r\n\r\n  const tabs = [\r\n    {\r\n      text: (\r\n        <span>\r\n          <FormattedMessage id=\"InboxPage.ordersTabTitle\" />\r\n        </span>\r\n      ),\r\n      selected: isOrders,\r\n      linkProps: {\r\n        name: 'InboxPage',\r\n        params: { tab: 'orders' },\r\n      },\r\n    },\r\n    {\r\n      text: (\r\n        <span>\r\n          <FormattedMessage id=\"InboxPage.salesTabTitle\" />\r\n          {providerNotificationCount > 0 ? (\r\n            <NotificationBadge count={providerNotificationCount} />\r\n          ) : null}\r\n        </span>\r\n      ),\r\n      selected: !isOrders,\r\n      linkProps: {\r\n        name: 'InboxPage',\r\n        params: { tab: 'sales' },\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Page title={title} scrollingDisabled={scrollingDisabled}>\r\n      <LayoutSideNavigation\r\n        sideNavClassName={css.navigation}\r\n        topbar={\r\n          <TopbarContainer\r\n            mobileRootClassName={css.mobileTopbar}\r\n            desktopClassName={css.desktopTopbar}\r\n            currentPage=\"InboxPage\"\r\n          />\r\n        }\r\n        sideNav={\r\n          <>\r\n            <H2 as=\"h1\" className={css.title}>\r\n              <FormattedMessage id=\"InboxPage.title\" />\r\n            </H2>\r\n            <TabNav rootClassName={css.tabs} tabRootClassName={css.tab} tabs={tabs} />{' '}\r\n          </>\r\n        }\r\n        footer={<FooterContainer />}\r\n      >\r\n        {fetchOrdersOrSalesError ? (\r\n          <p className={css.error}>\r\n            <FormattedMessage id=\"InboxPage.fetchFailed\" />\r\n          </p>\r\n        ) : null}\r\n        <ul className={css.itemList}>\r\n          {!fetchInProgress ? (\r\n            transactions.map(toTxItem)\r\n          ) : (\r\n            <li className={css.listItemsLoading}>\r\n              <IconSpinner />\r\n            </li>\r\n          )}\r\n          {hasNoResults ? (\r\n            <li key=\"noResults\" className={css.noResults}>\r\n              <FormattedMessage\r\n                id={isOrders ? 'InboxPage.noOrdersFound' : 'InboxPage.noSalesFound'}\r\n              />\r\n            </li>\r\n          ) : null}\r\n        </ul>\r\n        {hasTransactions && pagination && pagination.totalPages > 1 ? (\r\n          <PaginationLinks\r\n            className={css.pagination}\r\n            pageName=\"InboxPage\"\r\n            pagePathParams={params}\r\n            pagination={pagination}\r\n          />\r\n        ) : null}\r\n      </LayoutSideNavigation>\r\n    </Page>\r\n  );\r\n};\r\n\r\nInboxPageComponent.defaultProps = {\r\n  currentUser: null,\r\n  currentUserHasOrders: null,\r\n  fetchOrdersOrSalesError: null,\r\n  pagination: null,\r\n  providerNotificationCount: 0,\r\n  sendVerificationEmailError: null,\r\n};\r\n\r\nInboxPageComponent.propTypes = {\r\n  params: shape({\r\n    tab: string.isRequired,\r\n  }).isRequired,\r\n\r\n  currentUser: propTypes.currentUser,\r\n  fetchInProgress: bool.isRequired,\r\n  fetchOrdersOrSalesError: propTypes.error,\r\n  pagination: propTypes.pagination,\r\n  providerNotificationCount: number,\r\n  scrollingDisabled: bool.isRequired,\r\n  transactions: arrayOf(propTypes.transaction).isRequired,\r\n\r\n  // from injectIntl\r\n  intl: intlShape.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const { fetchInProgress, fetchOrdersOrSalesError, pagination, transactionRefs } = state.InboxPage;\r\n  const { currentUser, currentUserNotificationCount: providerNotificationCount } = state.user;\r\n  return {\r\n    currentUser,\r\n    fetchInProgress,\r\n    fetchOrdersOrSalesError,\r\n    pagination,\r\n    providerNotificationCount,\r\n    scrollingDisabled: isScrollingDisabled(state),\r\n    transactions: getMarketplaceEntities(state, transactionRefs),\r\n  };\r\n};\r\n\r\nconst InboxPage = compose(\r\n  connect(mapStateToProps),\r\n  injectIntl\r\n)(InboxPageComponent);\r\n\r\nexport default InboxPage;\r\n","import { bool, shape, string } from 'prop-types';\r\nimport {\r\n  BOOKING_PROCESS_NAME,\r\n  INQUIRY_PROCESS_NAME,\r\n  PURCHASE_PROCESS_NAME,\r\n  resolveLatestProcessName,\r\n  getProcess,\r\n} from '../../transactions/transaction';\r\n\r\nimport { getStateDataForBookingProcess } from './InboxPage.stateDataBooking.js';\r\nimport { getStateDataForInquiryProcess } from './InboxPage.stateDataInquiry.js';\r\nimport { getStateDataForPurchaseProcess } from './InboxPage.stateDataPurchase.js';\r\n\r\nexport const stateDataShape = shape({\r\n  processName: string.isRequired,\r\n  processState: string.isRequired,\r\n  actionNeeded: bool,\r\n  isFinal: bool,\r\n  isSaleNotification: bool,\r\n});\r\n\r\n// Translated name of the state of the given transaction\r\nexport const getStateData = params => {\r\n  const { transaction } = params;\r\n  const processName = resolveLatestProcessName(transaction?.attributes?.processName);\r\n  const process = getProcess(processName);\r\n\r\n  const processInfo = () => {\r\n    const { getState, states } = process;\r\n    const processState = getState(transaction);\r\n    return {\r\n      processName,\r\n      processState,\r\n      states,\r\n    };\r\n  };\r\n\r\n  if (processName === PURCHASE_PROCESS_NAME) {\r\n    return getStateDataForPurchaseProcess(params, processInfo());\r\n  } else if (processName === BOOKING_PROCESS_NAME) {\r\n    return getStateDataForBookingProcess(params, processInfo());\r\n  } else if (processName === INQUIRY_PROCESS_NAME) {\r\n    return getStateDataForInquiryProcess(params, processInfo());\r\n  } else {\r\n    return {};\r\n  }\r\n};\r\n","import {\r\n  TX_TRANSITION_ACTOR_CUSTOMER as CUSTOMER,\r\n  TX_TRANSITION_ACTOR_PROVIDER as PROVIDER,\r\n  CONDITIONAL_RESOLVER_WILDCARD,\r\n  ConditionalResolver,\r\n} from '../../transactions/transaction';\r\n\r\n// Get UI data mapped to specific transaction state & role\r\nexport const getStateDataForBookingProcess = (txInfo, processInfo) => {\r\n  const { transactionRole } = txInfo;\r\n  const { processName, processState, states } = processInfo;\r\n  const _ = CONDITIONAL_RESOLVER_WILDCARD;\r\n\r\n  return new ConditionalResolver([processState, transactionRole])\r\n    .cond([states.INQUIRY, _], () => {\r\n      return { processName, processState, actionNeeded: true };\r\n    })\r\n    .cond([states.PENDING_PAYMENT, CUSTOMER], () => {\r\n      return { processName, processState, actionNeeded: true };\r\n    })\r\n    .cond([states.CANCELED, _], () => {\r\n      return { processName, processState, isFinal: true };\r\n    })\r\n    .cond([states.PREAUTHORIZED, PROVIDER], () => {\r\n      return { processName, processState, actionNeeded: true, isSaleNotification: true };\r\n    })\r\n    .cond([states.ACCEPTED, _], () => {\r\n      return { processName, processState, actionNeeded: true };\r\n    })\r\n    .cond([states.DECLINED, _], () => {\r\n      return { processName, processState, isFinal: true };\r\n    })\r\n    .cond([states.EXPIRED, _], () => {\r\n      return { processName, processState, isFinal: true };\r\n    })\r\n    .cond([states.DELIVERED, _], () => {\r\n      return { processName, processState, actionNeeded: true };\r\n    })\r\n    .cond([states.REVIEWED_BY_PROVIDER, CUSTOMER], () => {\r\n      return { processName, processState, actionNeeded: true };\r\n    })\r\n    .cond([states.REVIEWED_BY_CUSTOMER, PROVIDER], () => {\r\n      return { processName, processState, actionNeeded: true };\r\n    })\r\n    .cond([states.REVIEWED, _], () => {\r\n      return { processName, processState, isFinal: true };\r\n    })\r\n    .default(() => {\r\n      // Default values for other states\r\n      return { processName, processState };\r\n    })\r\n    .resolve();\r\n};\r\n","import {\r\n  TX_TRANSITION_ACTOR_CUSTOMER as CUSTOMER,\r\n  TX_TRANSITION_ACTOR_PROVIDER as PROVIDER,\r\n  CONDITIONAL_RESOLVER_WILDCARD,\r\n  ConditionalResolver,\r\n} from '../../transactions/transaction';\r\n\r\n// Get UI data mapped to specific transaction state & role\r\nexport const getStateDataForPurchaseProcess = (txInfo, processInfo) => {\r\n  const { transactionRole } = txInfo;\r\n  const { processName, processState, states } = processInfo;\r\n  const _ = CONDITIONAL_RESOLVER_WILDCARD;\r\n\r\n  return new ConditionalResolver([processState, transactionRole])\r\n    .cond([states.INQUIRY, _], () => {\r\n      return { processName, processState, actionNeeded: true };\r\n    })\r\n    .cond([states.PENDING_PAYMENT, CUSTOMER], () => {\r\n      return { processName, processState, actionNeeded: true };\r\n    })\r\n    .cond([states.PENDING_PAYMENT, PROVIDER], () => {\r\n      return { processName, processState, actionNeeded: true };\r\n    })\r\n    .cond([states.CANCELED, _], () => {\r\n      return { processName, processState, isFinal: true };\r\n    })\r\n    .cond([states.PURCHASED, PROVIDER], () => {\r\n      return { processName, processState, actionNeeded: true, isSaleNotification: true };\r\n    })\r\n    .cond([states.DELIVERED, CUSTOMER], () => {\r\n      return { processName, processState, actionNeeded: true };\r\n    })\r\n    .cond([states.DISPUTED, _], () => {\r\n      return { processName, processState, actionNeeded: true };\r\n    })\r\n    .cond([states.COMPLETED, _], () => {\r\n      return { processName, processState, actionNeeded: true };\r\n    })\r\n    .cond([states.REVIEWED_BY_PROVIDER, CUSTOMER], () => {\r\n      return { processName, processState, actionNeeded: true };\r\n    })\r\n    .cond([states.REVIEWED_BY_CUSTOMER, PROVIDER], () => {\r\n      return { processName, processState, actionNeeded: true };\r\n    })\r\n    .cond([states.REVIEWED, _], () => {\r\n      return { processName, processState, isFinal: true };\r\n    })\r\n    .default(() => {\r\n      // Default values for other states\r\n      return { processName, processState };\r\n    })\r\n    .resolve();\r\n};\r\n","import { CONDITIONAL_RESOLVER_WILDCARD, ConditionalResolver } from '../../transactions/transaction';\r\n\r\n// Get UI data mapped to specific transaction state & role\r\nexport const getStateDataForInquiryProcess = (txInfo, processInfo) => {\r\n  const { transactionRole } = txInfo;\r\n  const { processName, processState, states } = processInfo;\r\n  const _ = CONDITIONAL_RESOLVER_WILDCARD;\r\n\r\n  return new ConditionalResolver([processState, transactionRole])\r\n    .cond([states.FREE_INQUIRY, _], () => {\r\n      return { processName, processState, actionNeeded: true };\r\n    })\r\n    .default(() => {\r\n      // Default values for other states\r\n      return { processName, processState };\r\n    })\r\n    .resolve();\r\n};\r\n"],"names":["BookingTimeInfoMaybe","props","_transaction$attribut","_transaction$attribut2","_transaction$attribut3","_transaction$attribut4","_transaction$attribut5","_transaction$listing","_transaction$listing$","_transaction$listing$2","transaction","rest","processName","resolveLatestProcessName","attributes","process","getProcess","getState","states","INQUIRY","unitLineItem","lineItems","length","find","item","LISTING_UNIT_TYPES","includes","code","reversal","lineItemUnitType","dateType","LINE_ITEM_HOUR","DATE_TYPE_DATETIME","DATE_TYPE_DATE","timeZone","listing","availabilityPlan","timezone","bookingStart","bookingEnd","bookingData","tx","start","end","displayStart","displayEnd","booking","bookingEndRaw","isNight","LINE_ITEM_NIGHT","isHour","subtractTime","React","TimeRange","Object","assign","startDate","endDate","InboxItem","_tx$attributes","_listing$attributes","transactionRole","intl","stateData","isBooking","stockType","STOCK_MULTIPLE_ITEMS","customer","provider","processState","actionNeeded","isSaleNotification","isFinal","isCustomer","TX_TRANSITION_ACTOR_CUSTOMER","hasPricingData","getUnitLineItem","quantity","toString","showStock","otherUser","otherUserDisplayName","UserDisplayName","user","isOtherUserBanned","banned","rowNotificationDot","className","css","linkClasses","classNames","stateClasses","Avatar","NamedLink","name","params","id","uuid","title","FormattedMessage","values","concat","InboxPageComponent","config","useConfiguration","currentUser","fetchInProgress","fetchOrdersOrSalesError","pagination","providerNotificationCount","scrollingDisabled","transactions","tab","NotFoundPage","isOrders","hasNoResults","ordersTitle","formatMessage","salesTitle","hasTransactions","hasOrderOrSaleTransactions","isOrdersTab","_user$id","_user$id2","tabs","text","selected","linkProps","NotificationBadge","count","Page","LayoutSideNavigation","sideNavClassName","topbar","TopbarContainer","mobileRootClassName","desktopClassName","currentPage","sideNav","H2","as","TabNav","rootClassName","tabRootClassName","footer","FooterContainer","IconSpinner","map","_tx$listing","_tx$listing$attribute","_tx$attributes2","TX_TRANSITION_ACTOR_PROVIDER","getStateData","error","foundListingTypeConfig","publicData","_config$listing","listingTypeConfigs","listingTypes","listingType","lt","conf","findListingTypeConfig","transactionType","transactionProcess","isBookingProcess","key","totalPages","PaginationLinks","pageName","pagePathParams","defaultProps","currentUserHasOrders","sendVerificationEmailError","compose","connect","state","transactionRefs","InboxPage","currentUserNotificationCount","isScrollingDisabled","getMarketplaceEntities","injectIntl","shape","string","isRequired","bool","processInfo","PURCHASE_PROCESS_NAME","getStateDataForPurchaseProcess","txInfo","_","CONDITIONAL_RESOLVER_WILDCARD","ConditionalResolver","cond","PENDING_PAYMENT","CUSTOMER","PROVIDER","CANCELED","PURCHASED","DELIVERED","DISPUTED","COMPLETED","REVIEWED_BY_PROVIDER","REVIEWED_BY_CUSTOMER","REVIEWED","default","resolve","BOOKING_PROCESS_NAME","getStateDataForBookingProcess","PREAUTHORIZED","ACCEPTED","DECLINED","EXPIRED","INQUIRY_PROCESS_NAME","getStateDataForInquiryProcess","FREE_INQUIRY"],"sourceRoot":""}